/*
 * main.c
 *
 *  Created on: Dec 30, 2022
 *      Author: sscl
 */


#include "main.h"

void gpio_init(void);
void uart3_init();
void Error_handler();
void SystemClock_Config(uint8_t clock_freq);
void print_SYSFREQ();
void time6_init();


UART_HandleTypeDef huart3;
TIM_HandleTypeDef htimer6;



int main()
{
	HAL_Init();
	gpio_init();
	uart3_init();
	time6_init();
	print_SYSFREQ();


	while(1);
	return 0;
}



void print_SYSFREQ()
{
	char data[100];
	memset(data,0,strlen(data));
	sprintf(data,"SYSCLK = %ld \r\n",HAL_RCC_GetPCLK1Freq());
	HAL_UART_Transmit(&huart3, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
}

void gpio_init(void)
{
    __HAL_RCC_GPIOB_CLK_ENABLE();
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_0;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB,&ledgpio);
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
}

void time6_init()
{
	htimer6.Instance = TIM6;
	htimer6.Init.
}


void uart3_init()
{
	huart3.Instance = USART3;
	huart3.Init.BaudRate=115200;
	huart3.Init.Mode = UART_MODE_TX_RX;
	huart3.Init.HwFlowCtl=UART_HWCONTROL_NONE;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity=UART_PARITY_NONE;
	huart3.Init.WordLength =UART_WORDLENGTH_8B;
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
	if(!(HAL_UART_Init(&huart3)==HAL_OK))
	{
		Error_handler();
	}
	char* data = "Uart Ready\r\n";
	HAL_UART_Transmit(&huart3,(uint8_t*)data,strlen(data),10);
}

void SystemClock_Config(uint8_t clock_freq)
{
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency =0;

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	osc_init.HSIState = RCC_HSI_ON;
	osc_init.HSICalibrationValue = 16;
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;

	switch(clock_freq)
	{
		case SYS_CLOCK_FREQ_50_MHZ:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 100;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ  = 2;
			osc_init.PLL.PLLR=2;

		    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
		    					RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
		    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

		    FLatency = FLASH_ACR_LATENCY_1WS;
			break;
		}
		case SYS_CLOCK_FREQ_84_MHZ:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 168;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ  = 2;
			osc_init.PLL.PLLR=2;

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			 FLatency = FLASH_ACR_LATENCY_2WS;

			break;
		}
		case SYS_CLOCK_FREQ_120_MHZ:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 240;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ  = 2;
			osc_init.PLL.PLLR=2;

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;

		}
		default:
			return;

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
	{
		Error_handler();
	}

	if(HAL_RCC_ClockConfig(&clk_init,FLatency) != HAL_OK)
	{
		Error_handler();
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}



void Error_handler()
{

	char* err_data = "error";

	while(1)
	{
		HAL_UART_Transmit(&huart3,(uint8_t*)err_data,strlen(err_data),10);
		HAL_Delay(1000);

	}

}
