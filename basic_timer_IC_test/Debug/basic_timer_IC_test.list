
basic_timer_IC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008788  08008788  00018788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c74  08008c74  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c74  08008c74  00018c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c7c  08008c7c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001e4  08008e68  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08008e68  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e21d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d00  00000000  00000000  0002e431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00030138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00030db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002288f  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed74  00000000  00000000  0005420f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e53  00000000  00000000  00062f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134dd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a64  00000000  00000000  00134e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008770 	.word	0x08008770

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08008770 	.word	0x08008770

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <SysTick_Handler>:
#include "main.h"
extern TIM_HandleTypeDef htimer2;
extern TIM_HandleTypeDef htimer6;

void SysTick_Handler (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800103c:	f000 fc58 	bl	80018f0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001040:	f000 fda4 	bl	8001b8c <HAL_SYSTICK_IRQHandler>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM2_IRQHandler+0x10>)
 800104e:	f001 ff5b 	bl	8002f08 <HAL_TIM_IRQHandler>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000200 	.word	0x20000200

0800105c <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001060:	2120      	movs	r1, #32
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <TIM6_DAC_IRQHandler+0x18>)
 8001064:	f000 ff34 	bl	8001ed0 <HAL_GPIO_TogglePin>
	HAL_TIM_IRQHandler(&htimer6);
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <TIM6_DAC_IRQHandler+0x1c>)
 800106a:	f001 ff4d 	bl	8002f08 <HAL_TIM_IRQHandler>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020000 	.word	0x40020000
 8001078:	20000248 	.word	0x20000248

0800107c <main>:
volatile uint8_t is_capture_done = FALSE;



int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0a4      	sub	sp, #144	; 0x90
 8001080:	af00      	add	r7, sp, #0
	uint32_t capture_difference =0;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	double timer2_cnt_freq=0;
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double timer2_cnt_res=0;
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double user_signal_time_period =0;
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double user_signal_freq=0;
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	char usr_msg[100];
	HAL_Init();
 80010b8:	f000 fbc8 	bl	800184c <HAL_Init>

//	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f000 f885 	bl	80011cc <SystemClock_Config_HSE>

	GPIO_Init();
 80010c2:	f000 f921 	bl	8001308 <GPIO_Init>

	UART3_Init();
 80010c6:	f000 f95d 	bl	8001384 <UART3_Init>

	TIMER6_Init();
 80010ca:	f000 f941 	bl	8001350 <TIMER6_Init>

	TIMER2_Init();
 80010ce:	f000 f97f 	bl	80013d0 <TIMER2_Init>

	LSE_Configuration();
 80010d2:	f000 f9af 	bl	8001434 <LSE_Configuration>

    HAL_TIM_Base_Start_IT(&htimer6);
 80010d6:	4836      	ldr	r0, [pc, #216]	; (80011b0 <main+0x134>)
 80010d8:	f001 fd2e 	bl	8002b38 <HAL_TIM_Base_Start_IT>

	HAL_TIM_IC_Start_IT(&htimer2,TIM_CHANNEL_1);
 80010dc:	2100      	movs	r1, #0
 80010de:	4835      	ldr	r0, [pc, #212]	; (80011b4 <main+0x138>)
 80010e0:	f001 fdea 	bl	8002cb8 <HAL_TIM_IC_Start_IT>

	while(1)
	{
		if(is_capture_done)
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <main+0x13c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0fa      	beq.n	80010e4 <main+0x68>
		{
			if(input_captures[1] > input_captures[0])
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <main+0x140>)
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <main+0x140>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d907      	bls.n	800110a <main+0x8e>
				capture_difference = input_captures[1] - input_captures[0];
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <main+0x140>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <main+0x140>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001108:	e007      	b.n	800111a <main+0x9e>
			else
				capture_difference = (0XFFFFFFFF -input_captures[0]) + input_captures[1];
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <main+0x140>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <main+0x140>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	3b01      	subs	r3, #1
 8001116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c


		timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2 ) / (htimer2.Init.Prescaler + 1);
 800111a:	f001 f84d 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 800111e:	4603      	mov	r3, r0
 8001120:	005a      	lsls	r2, r3, #1
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <main+0x138>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa09 	bl	8000544 <__aeabi_ui2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		timer2_cnt_res = 1/ timer2_cnt_freq;
 800113a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	491f      	ldr	r1, [pc, #124]	; (80011c0 <main+0x144>)
 8001144:	f7ff fba2 	bl	800088c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		user_signal_time_period = capture_difference * timer2_cnt_res;
 8001150:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001154:	f7ff f9f6 	bl	8000544 <__aeabi_ui2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001160:	f7ff fa6a 	bl	8000638 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		user_signal_freq = 1/user_signal_time_period ;
 800116c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4912      	ldr	r1, [pc, #72]	; (80011c0 <main+0x144>)
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		sprintf(usr_msg,"Frequency of the signal applied = %.2f Hz\r\n",user_signal_freq );
 8001182:	1d38      	adds	r0, r7, #4
 8001184:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001188:	490e      	ldr	r1, [pc, #56]	; (80011c4 <main+0x148>)
 800118a:	f003 fcff 	bl	8004b8c <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t*)usr_msg,strlen(usr_msg),HAL_MAX_DELAY);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f83d 	bl	8000210 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	1d39      	adds	r1, r7, #4
 800119c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <main+0x14c>)
 80011a2:	f002 facd 	bl	8003740 <HAL_UART_Transmit>

		is_capture_done = FALSE;
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <main+0x13c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
		if(is_capture_done)
 80011ac:	e79a      	b.n	80010e4 <main+0x68>
 80011ae:	bf00      	nop
 80011b0:	20000248 	.word	0x20000248
 80011b4:	20000200 	.word	0x20000200
 80011b8:	200002dc 	.word	0x200002dc
 80011bc:	200002d4 	.word	0x200002d4
 80011c0:	3ff00000 	.word	0x3ff00000
 80011c4:	08008788 	.word	0x08008788
 80011c8:	20000290 	.word	0x20000290

080011cc <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	; 0x58
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 80011dc:	2307      	movs	r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 80011e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e4:	623b      	str	r3, [r7, #32]
	Osc_Init.LSEState = RCC_LSE_ON;
 80011e6:	2301      	movs	r3, #1
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_Init.HSIState = RCC_HSI_ON;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80011ee:	2302      	movs	r3, #2
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f6:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b78      	cmp	r3, #120	; 0x78
 80011fc:	d038      	beq.n	8001270 <SystemClock_Config_HSE+0xa4>
 80011fe:	2b78      	cmp	r3, #120	; 0x78
 8001200:	dc7c      	bgt.n	80012fc <SystemClock_Config_HSE+0x130>
 8001202:	2b32      	cmp	r3, #50	; 0x32
 8001204:	d002      	beq.n	800120c <SystemClock_Config_HSE+0x40>
 8001206:	2b54      	cmp	r3, #84	; 0x54
 8001208:	d019      	beq.n	800123e <SystemClock_Config_HSE+0x72>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 800120a:	e077      	b.n	80012fc <SystemClock_Config_HSE+0x130>
		  Osc_Init.PLL.PLLM = 4;
 800120c:	2304      	movs	r3, #4
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 8001210:	2332      	movs	r3, #50	; 0x32
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8001218:	2302      	movs	r3, #2
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	2302      	movs	r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800123c:	e032      	b.n	80012a4 <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 800123e:	2304      	movs	r3, #4
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 8001242:	2354      	movs	r3, #84	; 0x54
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001246:	2302      	movs	r3, #2
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800126e:	e019      	b.n	80012a4 <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 8001274:	2378      	movs	r3, #120	; 0x78
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8001290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001294:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 800129c:	2303      	movs	r3, #3
 800129e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80012a2:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 f957 	bl	800255c <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config_HSE+0xec>
	{
			Error_handler();
 80012b4:	f000 f8fc 	bl	80014b0 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 80012b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fe1e 	bl	8001f04 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config_HSE+0x106>
	{
		Error_handler();
 80012ce:	f000 f8ef 	bl	80014b0 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 80012d2:	f000 ff65 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80012d6:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 80012d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SystemClock_Config_HSE+0x138>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fc29 	bl	8001b3a <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80012e8:	2004      	movs	r0, #4
 80012ea:	f000 fc33 	bl	8001b54 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f6:	f000 fbf6 	bl	8001ae6 <HAL_NVIC_SetPriority>
 80012fa:	e000      	b.n	80012fe <SystemClock_Config_HSE+0x132>
	   return ;
 80012fc:	bf00      	nop



 }
 80012fe:	3758      	adds	r7, #88	; 0x58
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	10624dd3 	.word	0x10624dd3

08001308 <GPIO_Init>:

void GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <GPIO_Init+0x40>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <GPIO_Init+0x40>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <GPIO_Init+0x40>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800132a:	2320      	movs	r3, #32
 800132c:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <GPIO_Init+0x44>)
 800133c:	f000 fc34 	bl	8001ba8 <HAL_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <TIMER6_Init+0x2c>)
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <TIMER6_Init+0x30>)
 8001358:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 9;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <TIMER6_Init+0x2c>)
 800135c:	2209      	movs	r2, #9
 800135e:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 50-1;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <TIMER6_Init+0x2c>)
 8001362:	2231      	movs	r2, #49	; 0x31
 8001364:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <TIMER6_Init+0x2c>)
 8001368:	f001 fb96 	bl	8002a98 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <TIMER6_Init+0x26>
	{
		Error_handler();
 8001372:	f000 f89d 	bl	80014b0 <Error_handler>
	}

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000248 	.word	0x20000248
 8001380:	40001000 	.word	0x40001000

08001384 <UART3_Init>:

void UART3_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <UART3_Init+0x44>)
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <UART3_Init+0x48>)
 800138c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <UART3_Init+0x44>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <UART3_Init+0x44>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <UART3_Init+0x44>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <UART3_Init+0x44>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <UART3_Init+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <UART3_Init+0x44>)
 80013b0:	220c      	movs	r2, #12
 80013b2:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart3) != HAL_OK )
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <UART3_Init+0x44>)
 80013b6:	f002 f976 	bl	80036a6 <HAL_UART_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <UART3_Init+0x40>
	{
		//There is a problem
		Error_handler();
 80013c0:	f000 f876 	bl	80014b0 <Error_handler>
	}


}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000290 	.word	0x20000290
 80013cc:	40004800 	.word	0x40004800

080013d0 <TIMER2_Init>:


 void TIMER2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
	 TIM_IC_InitTypeDef timer2IC_Config;

	 htimer2.Instance = TIM2;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <TIMER2_Init+0x60>)
 80013d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013dc:	601a      	str	r2, [r3, #0]
	 htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <TIMER2_Init+0x60>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
	 htimer2.Init.Period = 0xFFFFFFFF;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <TIMER2_Init+0x60>)
 80013e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ea:	60da      	str	r2, [r3, #12]
	 htimer2.Init.Prescaler = 1;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <TIMER2_Init+0x60>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	605a      	str	r2, [r3, #4]
	 if ( HAL_TIM_IC_Init(&htimer2) != HAL_OK)
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <TIMER2_Init+0x60>)
 80013f4:	f001 fc10 	bl	8002c18 <HAL_TIM_IC_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <TIMER2_Init+0x32>
	 {
		 Error_handler();
 80013fe:	f000 f857 	bl	80014b0 <Error_handler>
	 }

	 timer2IC_Config.ICFilter = 0 ;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
	 timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
	 timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
	 timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800140e:	2301      	movs	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
	 if ( HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <TIMER2_Init+0x60>)
 800141a:	f001 fe7d 	bl	8003118 <HAL_TIM_IC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <TIMER2_Init+0x58>
	 {
		 Error_handler();
 8001424:	f000 f844 	bl	80014b0 <Error_handler>
	 }



}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000200 	.word	0x20000200

08001434 <LSE_Configuration>:

void LSE_Configuration(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	{
		Error_handler();
	}
#endif

	HAL_RCC_MCOConfig(RCC_MCO1,RCC_MCO1SOURCE_HSI,RCC_MCODIV_4);
 8001438:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f000 fe46 	bl	80020d0 <HAL_RCC_MCOConfig>

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_TIM_IC_CaptureCallback>:


 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
#if 1
 if(! is_capture_done)
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11e      	bne.n	8001498 <HAL_TIM_IC_CaptureCallback+0x50>
 {
	 if(count == 1)
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10b      	bne.n	800147a <HAL_TIM_IC_CaptureCallback+0x32>
	 {
		 input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	4a10      	ldr	r2, [pc, #64]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x64>)
 800146a:	6013      	str	r3, [r2, #0]
		 count++;
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001476:	701a      	strb	r2, [r3, #0]
	 }

 }
#endif

}
 8001478:	e00e      	b.n	8001498 <HAL_TIM_IC_CaptureCallback+0x50>
	 else if (count == 2)
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d10a      	bne.n	8001498 <HAL_TIM_IC_CaptureCallback+0x50>
		 input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001488:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x64>)
 800148a:	6053      	str	r3, [r2, #4]
		 count =1;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
		 is_capture_done = TRUE;
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	200002dc 	.word	0x200002dc
 80014a8:	20000000 	.word	0x20000000
 80014ac:	200002d4 	.word	0x200002d4

080014b0 <Error_handler>:

void Error_handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	while(1);
 80014b4:	e7fe      	b.n	80014b4 <Error_handler+0x4>
	...

080014b8 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 fb07 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_MspInit+0x40>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_MspInit+0x40>)
 80014c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80014cc:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	f06f 000b 	mvn.w	r0, #11
 80014d6:	f000 fb06 	bl	8001ae6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	f06f 000a 	mvn.w	r0, #10
 80014e2:	f000 fb00 	bl	8001ae6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	f06f 0009 	mvn.w	r0, #9
 80014ee:	f000 fafa 	bl	8001ae6 <HAL_NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <HAL_TIM_IC_MspInit>:

 void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef tim2ch1_gpio;
	 //1. enable the peripheral clock for the timer2 peripheral
	 __HAL_RCC_TIM2_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_TIM_IC_MspInit+0x70>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_TIM_IC_MspInit+0x70>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_TIM_IC_MspInit+0x70>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_TIM_IC_MspInit+0x70>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_TIM_IC_MspInit+0x70>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_TIM_IC_MspInit+0x70>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]

	 //2. Configure a gpio to behave as timer2 channel 1
	 tim2ch1_gpio.Pin = GPIO_PIN_0;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
	 tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
	 tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8001544:	2301      	movs	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&tim2ch1_gpio);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <HAL_TIM_IC_MspInit+0x74>)
 8001550:	f000 fb2a 	bl	8001ba8 <HAL_GPIO_Init>

	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 8001554:	2200      	movs	r2, #0
 8001556:	210f      	movs	r1, #15
 8001558:	201c      	movs	r0, #28
 800155a:	f000 fac4 	bl	8001ae6 <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800155e:	201c      	movs	r0, #28
 8001560:	f000 fadd 	bl	8001b1e <HAL_NVIC_EnableIRQ>


}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_TIM_Base_MspInit>:

 void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
 {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

 	//1. enable the clock for the TIM6 peripheral
 	__HAL_RCC_TIM6_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001586:	f043 0310 	orr.w	r3, r3, #16
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_TIM_Base_MspInit+0x3c>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

 	//2. Enable the IRQ of TIM6
 	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001598:	2036      	movs	r0, #54	; 0x36
 800159a:	f000 fac0 	bl	8001b1e <HAL_NVIC_EnableIRQ>

 	//3. setup the priority for TIM6_DAC_IRQn
 	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 800159e:	2200      	movs	r2, #0
 80015a0:	210f      	movs	r1, #15
 80015a2:	2036      	movs	r0, #54	; 0x36
 80015a4:	f000 fa9f 	bl	8001ae6 <HAL_NVIC_SetPriority>

 }
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART3_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_UART_MspInit+0x8c>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_UART_MspInit+0x8c>)
 80015c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_UART_MspInit+0x8c>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_UART_MspInit+0x8c>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_UART_MspInit+0x8c>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x8c>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_8;
 80015f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f8:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART3; //UART2_TX
 8001606:	2307      	movs	r3, #7
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOD,&gpio_uart);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_UART_MspInit+0x90>)
 8001612:	f000 fac9 	bl	8001ba8 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_9; //UART2_RX
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOD,&gpio_uart);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4808      	ldr	r0, [pc, #32]	; (8001644 <HAL_UART_MspInit+0x90>)
 8001624:	f000 fac0 	bl	8001ba8 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001628:	2027      	movs	r0, #39	; 0x27
 800162a:	f000 fa78 	bl	8001b1e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART3_IRQn,15,0);
 800162e:	2200      	movs	r2, #0
 8001630:	210f      	movs	r1, #15
 8001632:	2027      	movs	r0, #39	; 0x27
 8001634:	f000 fa57 	bl	8001ae6 <HAL_NVIC_SetPriority>

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40020c00 	.word	0x40020c00

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001662:	f002 fbe1 	bl	8003e28 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
  return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800168a:	e7fe      	b.n	800168a <_exit+0x12>

0800168c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e00a      	b.n	80016b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169e:	f3af 8000 	nop.w
 80016a2:	4601      	mov	r1, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf0      	blt.n	800169e <_read+0x12>
  }

  return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e009      	b.n	80016ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf1      	blt.n	80016d8 <_write+0x12>
  }
  return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_close>:

int _close(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001726:	605a      	str	r2, [r3, #4]
  return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_isatty>:

int _isatty(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f002 fb46 	bl	8003e28 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20020000 	.word	0x20020000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	200002e0 	.word	0x200002e0
 80017d0:	200002f8 	.word	0x200002f8

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f002 fb05 	bl	8003e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fc27 	bl	800107c <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800183c:	08008c84 	.word	0x08008c84
  ldr r2, =_sbss
 8001840:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001844:	200002f8 	.word	0x200002f8

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f92b 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	200f      	movs	r0, #15
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fe1a 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f943 	bl	8001b3a <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018cc:	f000 f90b 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000004 	.word	0x20000004
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000000c 	.word	0x2000000c
 8001914:	200002e4 	.word	0x200002e4

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	200002e4 	.word	0x200002e4

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4907      	ldr	r1, [pc, #28]	; (80019cc <__NVIC_EnableIRQ+0x38>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab0:	f7ff ff8e 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff29 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff3e 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff8e 	bl	8001a24 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5d 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff31 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffa2 	bl	8001a8c <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d106      	bne.n	8001b70 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001b6e:	e005      	b.n	8001b7c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b76:	f023 0304 	bic.w	r3, r3, #4
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b90:	f000 f802 	bl	8001b98 <HAL_SYSTICK_Callback>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e165      	b.n	8001e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 8154 	bne.w	8001e8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d005      	beq.n	8001bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d130      	bne.n	8001c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80ae 	beq.w	8001e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a5c      	ldr	r2, [pc, #368]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4f      	ldr	r2, [pc, #316]	; (8001eb0 <HAL_GPIO_Init+0x308>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x21a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_GPIO_Init+0x30c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x216>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_GPIO_Init+0x310>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x212>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	; (8001ebc <HAL_GPIO_Init+0x314>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x20e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	; (8001ec0 <HAL_GPIO_Init+0x318>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x20a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <HAL_GPIO_Init+0x31c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x206>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <HAL_GPIO_Init+0x320>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x202>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4935      	ldr	r1, [pc, #212]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e06:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f ae96 	bls.w	8001bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40013c00 	.word	0x40013c00

08001ed0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43d9      	mvns	r1, r3
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0cc      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d90c      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0b8      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f58:	4b59      	ldr	r3, [pc, #356]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	494d      	ldr	r1, [pc, #308]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d044      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d119      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e07f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e06f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e067      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4934      	ldr	r1, [pc, #208]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff fc90 	bl	8001918 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff fc8c 	bl	8001918 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e04f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d20c      	bcs.n	800204c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e032      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4916      	ldr	r1, [pc, #88]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208a:	f000 f8bd 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 800208e:	4602      	mov	r2, r0
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	490a      	ldr	r1, [pc, #40]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	5ccb      	ldrb	r3, [r1, r3]
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fbf0 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00
 80020c0:	40023800 	.word	0x40023800
 80020c4:	080087b4 	.word	0x080087b4
 80020c8:	20000004 	.word	0x20000004
 80020cc:	20000008 	.word	0x20000008

080020d0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d129      	bne.n	8002136 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80020fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4619      	mov	r1, r3
 800211a:	481f      	ldr	r0, [pc, #124]	; (8002198 <HAL_RCC_MCOConfig+0xc8>)
 800211c:	f7ff fd44 	bl	8001ba8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	430b      	orrs	r3, r1
 800212e:	4919      	ldr	r1, [pc, #100]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002134:	e029      	b.n	800218a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a15      	ldr	r2, [pc, #84]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	480b      	ldr	r0, [pc, #44]	; (800219c <HAL_RCC_MCOConfig+0xcc>)
 8002170:	f7ff fd1a 	bl	8001ba8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	00d9      	lsls	r1, r3, #3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	430b      	orrs	r3, r1
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_MCOConfig+0xc4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
}
 800218a:	bf00      	nop
 800218c:	3730      	adds	r7, #48	; 0x30
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40020000 	.word	0x40020000
 800219c:	40020800 	.word	0x40020800

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	080087c4 	.word	0x080087c4

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffdc 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	080087c4 	.word	0x080087c4

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800220c:	b0a6      	sub	sp, #152	; 0x98
 800220e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222e:	4bc8      	ldr	r3, [pc, #800]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b0c      	cmp	r3, #12
 8002238:	f200 817e 	bhi.w	8002538 <HAL_RCC_GetSysClockFreq+0x330>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <HAL_RCC_GetSysClockFreq+0x3c>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002279 	.word	0x08002279
 8002248:	08002539 	.word	0x08002539
 800224c:	08002539 	.word	0x08002539
 8002250:	08002539 	.word	0x08002539
 8002254:	08002281 	.word	0x08002281
 8002258:	08002539 	.word	0x08002539
 800225c:	08002539 	.word	0x08002539
 8002260:	08002539 	.word	0x08002539
 8002264:	08002289 	.word	0x08002289
 8002268:	08002539 	.word	0x08002539
 800226c:	08002539 	.word	0x08002539
 8002270:	08002539 	.word	0x08002539
 8002274:	080023f3 	.word	0x080023f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4bb6      	ldr	r3, [pc, #728]	; (8002554 <HAL_RCC_GetSysClockFreq+0x34c>)
 800227a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800227e:	e15f      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002280:	4bb5      	ldr	r3, [pc, #724]	; (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 8002282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002286:	e15b      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002288:	4bb1      	ldr	r3, [pc, #708]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002294:	4bae      	ldr	r3, [pc, #696]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d031      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a0:	4bab      	ldr	r3, [pc, #684]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	2200      	movs	r2, #0
 80022a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80022aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b2:	663b      	str	r3, [r7, #96]	; 0x60
 80022b4:	2300      	movs	r3, #0
 80022b6:	667b      	str	r3, [r7, #100]	; 0x64
 80022b8:	4ba7      	ldr	r3, [pc, #668]	; (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 80022ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022be:	462a      	mov	r2, r5
 80022c0:	fb03 f202 	mul.w	r2, r3, r2
 80022c4:	2300      	movs	r3, #0
 80022c6:	4621      	mov	r1, r4
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	4aa2      	ldr	r2, [pc, #648]	; (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 80022d0:	4621      	mov	r1, r4
 80022d2:	fba1 1202 	umull	r1, r2, r1, r2
 80022d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022d8:	460a      	mov	r2, r1
 80022da:	67ba      	str	r2, [r7, #120]	; 0x78
 80022dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80022de:	4413      	add	r3, r2
 80022e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e6:	2200      	movs	r2, #0
 80022e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80022ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80022f4:	f7fe fce8 	bl	8000cc8 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4613      	mov	r3, r2
 80022fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002302:	e064      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002304:	4b92      	ldr	r3, [pc, #584]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	2200      	movs	r2, #0
 800230c:	653b      	str	r3, [r7, #80]	; 0x50
 800230e:	657a      	str	r2, [r7, #84]	; 0x54
 8002310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48
 8002318:	2300      	movs	r3, #0
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800231c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002320:	4622      	mov	r2, r4
 8002322:	462b      	mov	r3, r5
 8002324:	f04f 0000 	mov.w	r0, #0
 8002328:	f04f 0100 	mov.w	r1, #0
 800232c:	0159      	lsls	r1, r3, #5
 800232e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002332:	0150      	lsls	r0, r2, #5
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4621      	mov	r1, r4
 800233a:	1a51      	subs	r1, r2, r1
 800233c:	6139      	str	r1, [r7, #16]
 800233e:	4629      	mov	r1, r5
 8002340:	eb63 0301 	sbc.w	r3, r3, r1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002352:	4659      	mov	r1, fp
 8002354:	018b      	lsls	r3, r1, #6
 8002356:	4651      	mov	r1, sl
 8002358:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235c:	4651      	mov	r1, sl
 800235e:	018a      	lsls	r2, r1, #6
 8002360:	4651      	mov	r1, sl
 8002362:	ebb2 0801 	subs.w	r8, r2, r1
 8002366:	4659      	mov	r1, fp
 8002368:	eb63 0901 	sbc.w	r9, r3, r1
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002380:	4690      	mov	r8, r2
 8002382:	4699      	mov	r9, r3
 8002384:	4623      	mov	r3, r4
 8002386:	eb18 0303 	adds.w	r3, r8, r3
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	462b      	mov	r3, r5
 800238e:	eb49 0303 	adc.w	r3, r9, r3
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023a0:	4629      	mov	r1, r5
 80023a2:	028b      	lsls	r3, r1, #10
 80023a4:	4621      	mov	r1, r4
 80023a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023aa:	4621      	mov	r1, r4
 80023ac:	028a      	lsls	r2, r1, #10
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b6:	2200      	movs	r2, #0
 80023b8:	643b      	str	r3, [r7, #64]	; 0x40
 80023ba:	647a      	str	r2, [r7, #68]	; 0x44
 80023bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023c0:	f7fe fc82 	bl	8000cc8 <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4613      	mov	r3, r2
 80023ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023ce:	4b60      	ldr	r3, [pc, #384]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	3301      	adds	r3, #1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80023e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80023f0:	e0a6      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02a      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	2200      	movs	r2, #0
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38
 8002414:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800241c:	2100      	movs	r1, #0
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 8002420:	fb03 f201 	mul.w	r2, r3, r1
 8002424:	2300      	movs	r3, #0
 8002426:	fb00 f303 	mul.w	r3, r0, r3
 800242a:	4413      	add	r3, r2
 800242c:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 800242e:	fba0 1202 	umull	r1, r2, r0, r2
 8002432:	677a      	str	r2, [r7, #116]	; 0x74
 8002434:	460a      	mov	r2, r1
 8002436:	673a      	str	r2, [r7, #112]	; 0x70
 8002438:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800243a:	4413      	add	r3, r2
 800243c:	677b      	str	r3, [r7, #116]	; 0x74
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002442:	2200      	movs	r2, #0
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
 8002446:	637a      	str	r2, [r7, #52]	; 0x34
 8002448:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800244c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002450:	f7fe fc3a 	bl	8000cc8 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800245e:	e05b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	2200      	movs	r2, #0
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
 800246a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
 8002478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	0159      	lsls	r1, r3, #5
 800248a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248e:	0150      	lsls	r0, r2, #5
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4641      	mov	r1, r8
 8002496:	ebb2 0a01 	subs.w	sl, r2, r1
 800249a:	4649      	mov	r1, r9
 800249c:	eb63 0b01 	sbc.w	fp, r3, r1
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b4:	ebb2 040a 	subs.w	r4, r2, sl
 80024b8:	eb63 050b 	sbc.w	r5, r3, fp
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	00eb      	lsls	r3, r5, #3
 80024c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ca:	00e2      	lsls	r2, r4, #3
 80024cc:	4614      	mov	r4, r2
 80024ce:	461d      	mov	r5, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	18e3      	adds	r3, r4, r3
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	464b      	mov	r3, r9
 80024d8:	eb45 0303 	adc.w	r3, r5, r3
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002500:	2200      	movs	r2, #0
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	61fa      	str	r2, [r7, #28]
 8002506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250a:	f7fe fbdd 	bl	8000cc8 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4613      	mov	r3, r2
 8002514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0f1b      	lsrs	r3, r3, #28
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002526:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800252a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002536:	e003      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_GetSysClockFreq+0x34c>)
 800253a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800253e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002544:	4618      	mov	r0, r3
 8002546:	3798      	adds	r7, #152	; 0x98
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	00f42400 	.word	0x00f42400
 8002558:	017d7840 	.word	0x017d7840

0800255c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e28d      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8083 	beq.w	8002682 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800257c:	4b94      	ldr	r3, [pc, #592]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	d019      	beq.n	80025bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002588:	4b91      	ldr	r3, [pc, #580]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002590:	2b08      	cmp	r3, #8
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002594:	4b8e      	ldr	r3, [pc, #568]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a0:	d00c      	beq.n	80025bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b84      	ldr	r3, [pc, #528]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x124>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e25a      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x90>
 80025de:	4b7c      	ldr	r3, [pc, #496]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7b      	ldr	r2, [pc, #492]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xcc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0xb4>
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a72      	ldr	r2, [pc, #456]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xcc>
 8002610:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6b      	ldr	r2, [pc, #428]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff f972 	bl	8001918 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff f96e 	bl	8001918 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e21f      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b61      	ldr	r3, [pc, #388]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xdc>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff f95e 	bl	8001918 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff f95a 	bl	8001918 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e20b      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x104>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d06f      	beq.n	800276e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800268e:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800269a:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d105      	bne.n	80026b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x186>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1d3      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x278>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff f907 	bl	8001918 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff f903 	bl	8001918 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1b4      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x278>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff f8e6 	bl	8001918 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7ff f8e2 	bl	8001918 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e193      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x27c>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7ff f8c6 	bl	8001918 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7ff f8c2 	bl	8001918 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e173      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x234>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_OscConfig+0x27c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7ff f8af 	bl	8001918 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7ff f8ab 	bl	8001918 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e15c      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b8a      	ldr	r3, [pc, #552]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b83      	ldr	r3, [pc, #524]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7f      	ldr	r3, [pc, #508]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a7e      	ldr	r2, [pc, #504]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b7c      	ldr	r3, [pc, #496]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a75      	ldr	r2, [pc, #468]	; (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7ff f86b 	bl	8001918 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7ff f867 	bl	8001918 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e118      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6c      	ldr	r3, [pc, #432]	; (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x31e>
 800286c:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a65      	ldr	r2, [pc, #404]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x358>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x340>
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5d      	ldr	r2, [pc, #372]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x358>
 800289c:	4b5a      	ldr	r3, [pc, #360]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a59      	ldr	r2, [pc, #356]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b57      	ldr	r3, [pc, #348]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a56      	ldr	r2, [pc, #344]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7ff f82c 	bl	8001918 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7ff f828 	bl	8001918 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0d7      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x368>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7ff f816 	bl	8001918 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7ff f812 	bl	8001918 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0c1      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b40      	ldr	r3, [pc, #256]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a3a      	ldr	r2, [pc, #232]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80ad 	beq.w	8002a88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d060      	beq.n	80029fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d145      	bne.n	80029ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe ffe6 	bl	8001918 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe ffe2 	bl	8001918 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e093      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	491b      	ldr	r1, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe ffb7 	bl	8001918 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe ffb3 	bl	8001918 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e064      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x452>
 80029cc:	e05c      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe ffa0 	bl	8001918 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe ff9c 	bl	8001918 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e04d      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x480>
 80029fa:	e045      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e040      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a14:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <HAL_RCC_OscConfig+0x538>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d030      	beq.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d129      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d122      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d119      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10f      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e041      	b.n	8002b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fd58 	bl	8001574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fbe2 	bl	80032a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e04e      	b.n	8002bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a23      	ldr	r2, [pc, #140]	; (8002bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d018      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d111      	bne.n	8002bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d010      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	e007      	b.n	8002bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40000c00 	.word	0x40000c00
 8002c0c:	40010400 	.word	0x40010400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40001800 	.word	0x40001800

08002c18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fc5c 	bl	80014fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 fb22 	bl	80032a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start_IT+0x1e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e013      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0x2e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e00b      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_IC_Start_IT+0x3e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e003      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IC_Start_IT+0x58>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e013      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_IC_Start_IT+0x68>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e00b      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d104      	bne.n	8002d30 <HAL_TIM_IC_Start_IT+0x78>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e003      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3a:	7bbb      	ldrb	r3, [r7, #14]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d40:	7b7b      	ldrb	r3, [r7, #13]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0cc      	b.n	8002ee4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_IC_Start_IT+0xa2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	e013      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start_IT+0xb2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_IC_Start_IT+0xc2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d78:	e003      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0xda>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d90:	e013      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0xea>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_IC_Start_IT+0xfa>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db0:	e003      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d841      	bhi.n	8002e44 <HAL_TIM_IC_Start_IT+0x18c>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_TIM_IC_Start_IT+0x110>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e45 	.word	0x08002e45
 8002dd4:	08002e45 	.word	0x08002e45
 8002dd8:	08002e0f 	.word	0x08002e0f
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002e45 	.word	0x08002e45
 8002de8:	08002e21 	.word	0x08002e21
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e33 	.word	0x08002e33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0202 	orr.w	r2, r2, #2
 8002e0a:	60da      	str	r2, [r3, #12]
      break;
 8002e0c:	e01d      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0204 	orr.w	r2, r2, #4
 8002e1c:	60da      	str	r2, [r3, #12]
      break;
 8002e1e:	e014      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0208 	orr.w	r2, r2, #8
 8002e2e:	60da      	str	r2, [r3, #12]
      break;
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0210 	orr.w	r2, r2, #16
 8002e40:	60da      	str	r2, [r3, #12]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d148      	bne.n	8002ee2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fbeb 	bl	8003634 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <HAL_TIM_IC_Start_IT+0x234>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_TIM_IC_Start_IT+0x1f6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e70:	d01d      	beq.n	8002eae <HAL_TIM_IC_Start_IT+0x1f6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <HAL_TIM_IC_Start_IT+0x238>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_TIM_IC_Start_IT+0x1f6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <HAL_TIM_IC_Start_IT+0x23c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_TIM_IC_Start_IT+0x1f6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HAL_TIM_IC_Start_IT+0x240>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_TIM_IC_Start_IT+0x1f6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_TIM_IC_Start_IT+0x244>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_IC_Start_IT+0x1f6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <HAL_TIM_IC_Start_IT+0x248>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_IC_Start_IT+0x1f6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <HAL_TIM_IC_Start_IT+0x24c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d111      	bne.n	8002ed2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d010      	beq.n	8002ee2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	e007      	b.n	8002ee2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40010400 	.word	0x40010400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40001800 	.word	0x40001800

08002f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0202 	mvn.w	r2, #2
 8002f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fa7c 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f986 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f98d 	bl	8003278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0204 	mvn.w	r2, #4
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fa52 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f95c 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f963 	bl	8003278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0208 	mvn.w	r2, #8
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe fa28 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f932 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f939 	bl	8003278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b10      	cmp	r3, #16
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b10      	cmp	r3, #16
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0210 	mvn.w	r2, #16
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2208      	movs	r2, #8
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe f9fe 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f908 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f90f 	bl	8003278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10e      	bne.n	800308c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0201 	mvn.w	r2, #1
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8e2 	bl	8003250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 faed 	bl	8003692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8d4 	bl	800328c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0220 	mvn.w	r2, #32
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fab7 	bl	800367e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e088      	b.n	8003248 <HAL_TIM_IC_ConfigChannel+0x130>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f000 f944 	bl	80033e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 020c 	bic.w	r2, r2, #12
 8003166:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e060      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d11c      	bne.n	80031bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f000 f999 	bl	80034c8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6999      	ldr	r1, [r3, #24]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	021a      	lsls	r2, r3, #8
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
 80031ba:	e040      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11b      	bne.n	80031fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f000 f9b6 	bl	8003542 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020c 	bic.w	r2, r2, #12
 80031e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	61da      	str	r2, [r3, #28]
 80031f8:	e021      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d11c      	bne.n	800323a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	6819      	ldr	r1, [r3, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f000 f9d3 	bl	80035ba <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003222:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69d9      	ldr	r1, [r3, #28]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	021a      	lsls	r2, r3, #8
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	61da      	str	r2, [r3, #28]
 8003238:	e001      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d00f      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3d      	ldr	r2, [pc, #244]	; (80033b8 <TIM_Base_SetConfig+0x118>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00b      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <TIM_Base_SetConfig+0x11c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3b      	ldr	r2, [pc, #236]	; (80033c0 <TIM_Base_SetConfig+0x120>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3a      	ldr	r2, [pc, #232]	; (80033c4 <TIM_Base_SetConfig+0x124>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02b      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d027      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <TIM_Base_SetConfig+0x118>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d023      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <TIM_Base_SetConfig+0x11c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01f      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <TIM_Base_SetConfig+0x120>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01b      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <TIM_Base_SetConfig+0x124>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d017      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <TIM_Base_SetConfig+0x128>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <TIM_Base_SetConfig+0x12c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00f      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <TIM_Base_SetConfig+0x130>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <TIM_Base_SetConfig+0x134>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <TIM_Base_SetConfig+0x138>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a23      	ldr	r2, [pc, #140]	; (80033dc <TIM_Base_SetConfig+0x13c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0xf8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <TIM_Base_SetConfig+0x124>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	40010400 	.word	0x40010400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800
 80033d4:	40001800 	.word	0x40001800
 80033d8:	40001c00 	.word	0x40001c00
 80033dc:	40002000 	.word	0x40002000

080033e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f023 0201 	bic.w	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a28      	ldr	r2, [pc, #160]	; (80034ac <TIM_TI1_SetConfig+0xcc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01b      	beq.n	8003446 <TIM_TI1_SetConfig+0x66>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d017      	beq.n	8003446 <TIM_TI1_SetConfig+0x66>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <TIM_TI1_SetConfig+0xd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <TIM_TI1_SetConfig+0x66>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <TIM_TI1_SetConfig+0xd4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00f      	beq.n	8003446 <TIM_TI1_SetConfig+0x66>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <TIM_TI1_SetConfig+0xd8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_TI1_SetConfig+0x66>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <TIM_TI1_SetConfig+0xdc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_TI1_SetConfig+0x66>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <TIM_TI1_SetConfig+0xe0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_TI1_SetConfig+0x66>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <TIM_TI1_SetConfig+0xe4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <TIM_TI1_SetConfig+0x6a>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <TIM_TI1_SetConfig+0x6c>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e003      	b.n	800346a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	b2db      	uxtb	r3, r3
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f023 030a 	bic.w	r3, r3, #10
 8003484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f003 030a 	and.w	r3, r3, #10
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40010000 	.word	0x40010000
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800
 80034b8:	40000c00 	.word	0x40000c00
 80034bc:	40010400 	.word	0x40010400
 80034c0:	40014000 	.word	0x40014000
 80034c4:	40001800 	.word	0x40001800

080034c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f023 0210 	bic.w	r2, r3, #16
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	031b      	lsls	r3, r3, #12
 800350c:	b29b      	uxth	r3, r3
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003542:	b480      	push	{r7}
 8003544:	b087      	sub	sp, #28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	b2db      	uxtb	r3, r3
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003592:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b087      	sub	sp, #28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	031b      	lsls	r3, r3, #12
 80035fe:	b29b      	uxth	r3, r3
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800360c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	621a      	str	r2, [r3, #32]
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2201      	movs	r2, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e03f      	b.n	8003738 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fd ff71 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2224      	movs	r2, #36	; 0x24
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f928 	bl	8003940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b20      	cmp	r3, #32
 800375e:	d17c      	bne.n	800385a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_UART_Transmit+0x2c>
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e075      	b.n	800385c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_UART_Transmit+0x3e>
 800377a:	2302      	movs	r3, #2
 800377c:	e06e      	b.n	800385c <HAL_UART_Transmit+0x11c>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2221      	movs	r2, #33	; 0x21
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003794:	f7fe f8c0 	bl	8001918 <HAL_GetTick>
 8003798:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ae:	d108      	bne.n	80037c2 <HAL_UART_Transmit+0x82>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	e003      	b.n	80037ca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037d2:	e02a      	b.n	800382a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f840 	bl	8003864 <UART_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e036      	b.n	800385c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003802:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	3302      	adds	r3, #2
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e007      	b.n	800381c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1cf      	bne.n	80037d4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	2140      	movs	r1, #64	; 0x40
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f810 	bl	8003864 <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e006      	b.n	800385c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b090      	sub	sp, #64	; 0x40
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003874:	e050      	b.n	8003918 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387c:	d04c      	beq.n	8003918 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800387e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <UART_WaitOnFlagUntilTimeout+0x30>
 8003884:	f7fe f848 	bl	8001918 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003890:	429a      	cmp	r2, r3
 8003892:	d241      	bcs.n	8003918 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b4:	637a      	str	r2, [r7, #52]	; 0x34
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	613b      	str	r3, [r7, #16]
   return(result);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038e8:	623a      	str	r2, [r7, #32]
 80038ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	69f9      	ldr	r1, [r7, #28]
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e5      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e00f      	b.n	8003938 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	429a      	cmp	r2, r3
 8003934:	d09f      	beq.n	8003876 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3740      	adds	r7, #64	; 0x40
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003944:	b0c0      	sub	sp, #256	; 0x100
 8003946:	af00      	add	r7, sp, #0
 8003948:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	68d9      	ldr	r1, [r3, #12]
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	ea40 0301 	orr.w	r3, r0, r1
 8003968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	431a      	orrs	r2, r3
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	431a      	orrs	r2, r3
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003998:	f021 010c 	bic.w	r1, r1, #12
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039a6:	430b      	orrs	r3, r1
 80039a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ba:	6999      	ldr	r1, [r3, #24]
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	ea40 0301 	orr.w	r3, r0, r1
 80039c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b8f      	ldr	r3, [pc, #572]	; (8003c0c <UART_SetConfig+0x2cc>)
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d005      	beq.n	80039e0 <UART_SetConfig+0xa0>
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b8d      	ldr	r3, [pc, #564]	; (8003c10 <UART_SetConfig+0x2d0>)
 80039dc:	429a      	cmp	r2, r3
 80039de:	d104      	bne.n	80039ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe fbfe 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 80039e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039e8:	e003      	b.n	80039f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ea:	f7fe fbe5 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80039ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fc:	f040 810c 	bne.w	8003c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	1891      	adds	r1, r2, r2
 8003a18:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a1a:	415b      	adcs	r3, r3
 8003a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a22:	4621      	mov	r1, r4
 8003a24:	eb12 0801 	adds.w	r8, r2, r1
 8003a28:	4629      	mov	r1, r5
 8003a2a:	eb43 0901 	adc.w	r9, r3, r1
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a42:	4690      	mov	r8, r2
 8003a44:	4699      	mov	r9, r3
 8003a46:	4623      	mov	r3, r4
 8003a48:	eb18 0303 	adds.w	r3, r8, r3
 8003a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a50:	462b      	mov	r3, r5
 8003a52:	eb49 0303 	adc.w	r3, r9, r3
 8003a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a6e:	460b      	mov	r3, r1
 8003a70:	18db      	adds	r3, r3, r3
 8003a72:	653b      	str	r3, [r7, #80]	; 0x50
 8003a74:	4613      	mov	r3, r2
 8003a76:	eb42 0303 	adc.w	r3, r2, r3
 8003a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a84:	f7fd f920 	bl	8000cc8 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <UART_SetConfig+0x2d4>)
 8003a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	011c      	lsls	r4, r3, #4
 8003a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	1891      	adds	r1, r2, r2
 8003aae:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ab0:	415b      	adcs	r3, r3
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ab8:	4641      	mov	r1, r8
 8003aba:	eb12 0a01 	adds.w	sl, r2, r1
 8003abe:	4649      	mov	r1, r9
 8003ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad8:	4692      	mov	sl, r2
 8003ada:	469b      	mov	fp, r3
 8003adc:	4643      	mov	r3, r8
 8003ade:	eb1a 0303 	adds.w	r3, sl, r3
 8003ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8003aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003afc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b04:	460b      	mov	r3, r1
 8003b06:	18db      	adds	r3, r3, r3
 8003b08:	643b      	str	r3, [r7, #64]	; 0x40
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	eb42 0303 	adc.w	r3, r2, r3
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
 8003b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b1a:	f7fd f8d5 	bl	8000cc8 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <UART_SetConfig+0x2d4>)
 8003b26:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2264      	movs	r2, #100	; 0x64
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	1acb      	subs	r3, r1, r3
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <UART_SetConfig+0x2d4>)
 8003b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b48:	441c      	add	r4, r3
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b64:	415b      	adcs	r3, r3
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	1851      	adds	r1, r2, r1
 8003b70:	6339      	str	r1, [r7, #48]	; 0x30
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b84:	4659      	mov	r1, fp
 8003b86:	00cb      	lsls	r3, r1, #3
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	4651      	mov	r1, sl
 8003b90:	00ca      	lsls	r2, r1, #3
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	18db      	adds	r3, r3, r3
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bd6:	f7fd f877 	bl	8000cc8 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <UART_SetConfig+0x2d4>)
 8003be0:	fba3 1302 	umull	r1, r3, r3, r2
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	2164      	movs	r1, #100	; 0x64
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	3332      	adds	r3, #50	; 0x32
 8003bf2:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <UART_SetConfig+0x2d4>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	f003 0207 	and.w	r2, r3, #7
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4422      	add	r2, r4
 8003c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c08:	e105      	b.n	8003e16 <UART_SetConfig+0x4d6>
 8003c0a:	bf00      	nop
 8003c0c:	40011000 	.word	0x40011000
 8003c10:	40011400 	.word	0x40011400
 8003c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c2a:	4642      	mov	r2, r8
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	1891      	adds	r1, r2, r2
 8003c30:	6239      	str	r1, [r7, #32]
 8003c32:	415b      	adcs	r3, r3
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	1854      	adds	r4, r2, r1
 8003c3e:	4649      	mov	r1, r9
 8003c40:	eb43 0501 	adc.w	r5, r3, r1
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	00eb      	lsls	r3, r5, #3
 8003c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c52:	00e2      	lsls	r2, r4, #3
 8003c54:	4614      	mov	r4, r2
 8003c56:	461d      	mov	r5, r3
 8003c58:	4643      	mov	r3, r8
 8003c5a:	18e3      	adds	r3, r4, r3
 8003c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c60:	464b      	mov	r3, r9
 8003c62:	eb45 0303 	adc.w	r3, r5, r3
 8003c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c86:	4629      	mov	r1, r5
 8003c88:	008b      	lsls	r3, r1, #2
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c90:	4621      	mov	r1, r4
 8003c92:	008a      	lsls	r2, r1, #2
 8003c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c98:	f7fd f816 	bl	8000cc8 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b60      	ldr	r3, [pc, #384]	; (8003e24 <UART_SetConfig+0x4e4>)
 8003ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	011c      	lsls	r4, r3, #4
 8003caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	61b9      	str	r1, [r7, #24]
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ccc:	4641      	mov	r1, r8
 8003cce:	1851      	adds	r1, r2, r1
 8003cd0:	6139      	str	r1, [r7, #16]
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	414b      	adcs	r3, r1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	00cb      	lsls	r3, r1, #3
 8003ce8:	4651      	mov	r1, sl
 8003cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cee:	4651      	mov	r1, sl
 8003cf0:	00ca      	lsls	r2, r1, #3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d00:	464b      	mov	r3, r9
 8003d02:	460a      	mov	r2, r1
 8003d04:	eb42 0303 	adc.w	r3, r2, r3
 8003d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d24:	4649      	mov	r1, r9
 8003d26:	008b      	lsls	r3, r1, #2
 8003d28:	4641      	mov	r1, r8
 8003d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d2e:	4641      	mov	r1, r8
 8003d30:	008a      	lsls	r2, r1, #2
 8003d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d36:	f7fc ffc7 	bl	8000cc8 <__aeabi_uldivmod>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <UART_SetConfig+0x4e4>)
 8003d40:	fba3 1302 	umull	r1, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	2164      	movs	r1, #100	; 0x64
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	3332      	adds	r3, #50	; 0x32
 8003d52:	4a34      	ldr	r2, [pc, #208]	; (8003e24 <UART_SetConfig+0x4e4>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d5e:	441c      	add	r4, r3
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d64:	2200      	movs	r2, #0
 8003d66:	673b      	str	r3, [r7, #112]	; 0x70
 8003d68:	677a      	str	r2, [r7, #116]	; 0x74
 8003d6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d6e:	4642      	mov	r2, r8
 8003d70:	464b      	mov	r3, r9
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	415b      	adcs	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7e:	4641      	mov	r1, r8
 8003d80:	1851      	adds	r1, r2, r1
 8003d82:	6039      	str	r1, [r7, #0]
 8003d84:	4649      	mov	r1, r9
 8003d86:	414b      	adcs	r3, r1
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d96:	4659      	mov	r1, fp
 8003d98:	00cb      	lsls	r3, r1, #3
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da0:	4651      	mov	r1, sl
 8003da2:	00ca      	lsls	r2, r1, #3
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	4642      	mov	r2, r8
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db0:	464b      	mov	r3, r9
 8003db2:	460a      	mov	r2, r1
 8003db4:	eb42 0303 	adc.w	r3, r2, r3
 8003db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc4:	667a      	str	r2, [r7, #100]	; 0x64
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	008b      	lsls	r3, r1, #2
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ddc:	4641      	mov	r1, r8
 8003dde:	008a      	lsls	r2, r1, #2
 8003de0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003de4:	f7fc ff70 	bl	8000cc8 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <UART_SetConfig+0x4e4>)
 8003dee:	fba3 1302 	umull	r1, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2164      	movs	r1, #100	; 0x64
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	3332      	adds	r3, #50	; 0x32
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <UART_SetConfig+0x4e4>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4422      	add	r2, r4
 8003e14:	609a      	str	r2, [r3, #8]
}
 8003e16:	bf00      	nop
 8003e18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e22:	bf00      	nop
 8003e24:	51eb851f 	.word	0x51eb851f

08003e28 <__errno>:
 8003e28:	4b01      	ldr	r3, [pc, #4]	; (8003e30 <__errno+0x8>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000010 	.word	0x20000010

08003e34 <__libc_init_array>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4d0d      	ldr	r5, [pc, #52]	; (8003e6c <__libc_init_array+0x38>)
 8003e38:	4c0d      	ldr	r4, [pc, #52]	; (8003e70 <__libc_init_array+0x3c>)
 8003e3a:	1b64      	subs	r4, r4, r5
 8003e3c:	10a4      	asrs	r4, r4, #2
 8003e3e:	2600      	movs	r6, #0
 8003e40:	42a6      	cmp	r6, r4
 8003e42:	d109      	bne.n	8003e58 <__libc_init_array+0x24>
 8003e44:	4d0b      	ldr	r5, [pc, #44]	; (8003e74 <__libc_init_array+0x40>)
 8003e46:	4c0c      	ldr	r4, [pc, #48]	; (8003e78 <__libc_init_array+0x44>)
 8003e48:	f004 fc92 	bl	8008770 <_init>
 8003e4c:	1b64      	subs	r4, r4, r5
 8003e4e:	10a4      	asrs	r4, r4, #2
 8003e50:	2600      	movs	r6, #0
 8003e52:	42a6      	cmp	r6, r4
 8003e54:	d105      	bne.n	8003e62 <__libc_init_array+0x2e>
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5c:	4798      	blx	r3
 8003e5e:	3601      	adds	r6, #1
 8003e60:	e7ee      	b.n	8003e40 <__libc_init_array+0xc>
 8003e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e66:	4798      	blx	r3
 8003e68:	3601      	adds	r6, #1
 8003e6a:	e7f2      	b.n	8003e52 <__libc_init_array+0x1e>
 8003e6c:	08008c7c 	.word	0x08008c7c
 8003e70:	08008c7c 	.word	0x08008c7c
 8003e74:	08008c7c 	.word	0x08008c7c
 8003e78:	08008c80 	.word	0x08008c80

08003e7c <memset>:
 8003e7c:	4402      	add	r2, r0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d100      	bne.n	8003e86 <memset+0xa>
 8003e84:	4770      	bx	lr
 8003e86:	f803 1b01 	strb.w	r1, [r3], #1
 8003e8a:	e7f9      	b.n	8003e80 <memset+0x4>

08003e8c <__cvt>:
 8003e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	ec55 4b10 	vmov	r4, r5, d0
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	460e      	mov	r6, r1
 8003e98:	4619      	mov	r1, r3
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	bfbb      	ittet	lt
 8003e9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ea2:	461d      	movlt	r5, r3
 8003ea4:	2300      	movge	r3, #0
 8003ea6:	232d      	movlt	r3, #45	; 0x2d
 8003ea8:	700b      	strb	r3, [r1, #0]
 8003eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003eb0:	4691      	mov	r9, r2
 8003eb2:	f023 0820 	bic.w	r8, r3, #32
 8003eb6:	bfbc      	itt	lt
 8003eb8:	4622      	movlt	r2, r4
 8003eba:	4614      	movlt	r4, r2
 8003ebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ec0:	d005      	beq.n	8003ece <__cvt+0x42>
 8003ec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ec6:	d100      	bne.n	8003eca <__cvt+0x3e>
 8003ec8:	3601      	adds	r6, #1
 8003eca:	2102      	movs	r1, #2
 8003ecc:	e000      	b.n	8003ed0 <__cvt+0x44>
 8003ece:	2103      	movs	r1, #3
 8003ed0:	ab03      	add	r3, sp, #12
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	ab02      	add	r3, sp, #8
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	ec45 4b10 	vmov	d0, r4, r5
 8003edc:	4653      	mov	r3, sl
 8003ede:	4632      	mov	r2, r6
 8003ee0:	f001 fdae 	bl	8005a40 <_dtoa_r>
 8003ee4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ee8:	4607      	mov	r7, r0
 8003eea:	d102      	bne.n	8003ef2 <__cvt+0x66>
 8003eec:	f019 0f01 	tst.w	r9, #1
 8003ef0:	d022      	beq.n	8003f38 <__cvt+0xac>
 8003ef2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ef6:	eb07 0906 	add.w	r9, r7, r6
 8003efa:	d110      	bne.n	8003f1e <__cvt+0x92>
 8003efc:	783b      	ldrb	r3, [r7, #0]
 8003efe:	2b30      	cmp	r3, #48	; 0x30
 8003f00:	d10a      	bne.n	8003f18 <__cvt+0x8c>
 8003f02:	2200      	movs	r2, #0
 8003f04:	2300      	movs	r3, #0
 8003f06:	4620      	mov	r0, r4
 8003f08:	4629      	mov	r1, r5
 8003f0a:	f7fc fdfd 	bl	8000b08 <__aeabi_dcmpeq>
 8003f0e:	b918      	cbnz	r0, 8003f18 <__cvt+0x8c>
 8003f10:	f1c6 0601 	rsb	r6, r6, #1
 8003f14:	f8ca 6000 	str.w	r6, [sl]
 8003f18:	f8da 3000 	ldr.w	r3, [sl]
 8003f1c:	4499      	add	r9, r3
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2300      	movs	r3, #0
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7fc fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8003f2a:	b108      	cbz	r0, 8003f30 <__cvt+0xa4>
 8003f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f30:	2230      	movs	r2, #48	; 0x30
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	454b      	cmp	r3, r9
 8003f36:	d307      	bcc.n	8003f48 <__cvt+0xbc>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f3c:	1bdb      	subs	r3, r3, r7
 8003f3e:	4638      	mov	r0, r7
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	b004      	add	sp, #16
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	1c59      	adds	r1, r3, #1
 8003f4a:	9103      	str	r1, [sp, #12]
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e7f0      	b.n	8003f32 <__cvt+0xa6>

08003f50 <__exponent>:
 8003f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f52:	4603      	mov	r3, r0
 8003f54:	2900      	cmp	r1, #0
 8003f56:	bfb8      	it	lt
 8003f58:	4249      	neglt	r1, r1
 8003f5a:	f803 2b02 	strb.w	r2, [r3], #2
 8003f5e:	bfb4      	ite	lt
 8003f60:	222d      	movlt	r2, #45	; 0x2d
 8003f62:	222b      	movge	r2, #43	; 0x2b
 8003f64:	2909      	cmp	r1, #9
 8003f66:	7042      	strb	r2, [r0, #1]
 8003f68:	dd2a      	ble.n	8003fc0 <__exponent+0x70>
 8003f6a:	f10d 0407 	add.w	r4, sp, #7
 8003f6e:	46a4      	mov	ip, r4
 8003f70:	270a      	movs	r7, #10
 8003f72:	46a6      	mov	lr, r4
 8003f74:	460a      	mov	r2, r1
 8003f76:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f7a:	fb07 1516 	mls	r5, r7, r6, r1
 8003f7e:	3530      	adds	r5, #48	; 0x30
 8003f80:	2a63      	cmp	r2, #99	; 0x63
 8003f82:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003f86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	dcf1      	bgt.n	8003f72 <__exponent+0x22>
 8003f8e:	3130      	adds	r1, #48	; 0x30
 8003f90:	f1ae 0502 	sub.w	r5, lr, #2
 8003f94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f98:	1c44      	adds	r4, r0, #1
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	4561      	cmp	r1, ip
 8003f9e:	d30a      	bcc.n	8003fb6 <__exponent+0x66>
 8003fa0:	f10d 0209 	add.w	r2, sp, #9
 8003fa4:	eba2 020e 	sub.w	r2, r2, lr
 8003fa8:	4565      	cmp	r5, ip
 8003faa:	bf88      	it	hi
 8003fac:	2200      	movhi	r2, #0
 8003fae:	4413      	add	r3, r2
 8003fb0:	1a18      	subs	r0, r3, r0
 8003fb2:	b003      	add	sp, #12
 8003fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003fbe:	e7ed      	b.n	8003f9c <__exponent+0x4c>
 8003fc0:	2330      	movs	r3, #48	; 0x30
 8003fc2:	3130      	adds	r1, #48	; 0x30
 8003fc4:	7083      	strb	r3, [r0, #2]
 8003fc6:	70c1      	strb	r1, [r0, #3]
 8003fc8:	1d03      	adds	r3, r0, #4
 8003fca:	e7f1      	b.n	8003fb0 <__exponent+0x60>

08003fcc <_printf_float>:
 8003fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd0:	ed2d 8b02 	vpush	{d8}
 8003fd4:	b08d      	sub	sp, #52	; 0x34
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003fdc:	4616      	mov	r6, r2
 8003fde:	461f      	mov	r7, r3
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	f002 fe8b 	bl	8006cfc <_localeconv_r>
 8003fe6:	f8d0 a000 	ldr.w	sl, [r0]
 8003fea:	4650      	mov	r0, sl
 8003fec:	f7fc f910 	bl	8000210 <strlen>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	9305      	str	r3, [sp, #20]
 8003ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ffc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004000:	3307      	adds	r3, #7
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	f103 0208 	add.w	r2, r3, #8
 800400a:	f8c8 2000 	str.w	r2, [r8]
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004016:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800401a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800401e:	9307      	str	r3, [sp, #28]
 8004020:	f8cd 8018 	str.w	r8, [sp, #24]
 8004024:	ee08 0a10 	vmov	s16, r0
 8004028:	4b9f      	ldr	r3, [pc, #636]	; (80042a8 <_printf_float+0x2dc>)
 800402a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800402e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004032:	f7fc fd9b 	bl	8000b6c <__aeabi_dcmpun>
 8004036:	bb88      	cbnz	r0, 800409c <_printf_float+0xd0>
 8004038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800403c:	4b9a      	ldr	r3, [pc, #616]	; (80042a8 <_printf_float+0x2dc>)
 800403e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004042:	f7fc fd75 	bl	8000b30 <__aeabi_dcmple>
 8004046:	bb48      	cbnz	r0, 800409c <_printf_float+0xd0>
 8004048:	2200      	movs	r2, #0
 800404a:	2300      	movs	r3, #0
 800404c:	4640      	mov	r0, r8
 800404e:	4649      	mov	r1, r9
 8004050:	f7fc fd64 	bl	8000b1c <__aeabi_dcmplt>
 8004054:	b110      	cbz	r0, 800405c <_printf_float+0x90>
 8004056:	232d      	movs	r3, #45	; 0x2d
 8004058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405c:	4b93      	ldr	r3, [pc, #588]	; (80042ac <_printf_float+0x2e0>)
 800405e:	4894      	ldr	r0, [pc, #592]	; (80042b0 <_printf_float+0x2e4>)
 8004060:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004064:	bf94      	ite	ls
 8004066:	4698      	movls	r8, r3
 8004068:	4680      	movhi	r8, r0
 800406a:	2303      	movs	r3, #3
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	9b05      	ldr	r3, [sp, #20]
 8004070:	f023 0204 	bic.w	r2, r3, #4
 8004074:	6022      	str	r2, [r4, #0]
 8004076:	f04f 0900 	mov.w	r9, #0
 800407a:	9700      	str	r7, [sp, #0]
 800407c:	4633      	mov	r3, r6
 800407e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004080:	4621      	mov	r1, r4
 8004082:	4628      	mov	r0, r5
 8004084:	f000 f9d8 	bl	8004438 <_printf_common>
 8004088:	3001      	adds	r0, #1
 800408a:	f040 8090 	bne.w	80041ae <_printf_float+0x1e2>
 800408e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004092:	b00d      	add	sp, #52	; 0x34
 8004094:	ecbd 8b02 	vpop	{d8}
 8004098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	4640      	mov	r0, r8
 80040a2:	4649      	mov	r1, r9
 80040a4:	f7fc fd62 	bl	8000b6c <__aeabi_dcmpun>
 80040a8:	b140      	cbz	r0, 80040bc <_printf_float+0xf0>
 80040aa:	464b      	mov	r3, r9
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bfbc      	itt	lt
 80040b0:	232d      	movlt	r3, #45	; 0x2d
 80040b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040b6:	487f      	ldr	r0, [pc, #508]	; (80042b4 <_printf_float+0x2e8>)
 80040b8:	4b7f      	ldr	r3, [pc, #508]	; (80042b8 <_printf_float+0x2ec>)
 80040ba:	e7d1      	b.n	8004060 <_printf_float+0x94>
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040c2:	9206      	str	r2, [sp, #24]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	d13f      	bne.n	8004148 <_printf_float+0x17c>
 80040c8:	2306      	movs	r3, #6
 80040ca:	6063      	str	r3, [r4, #4]
 80040cc:	9b05      	ldr	r3, [sp, #20]
 80040ce:	6861      	ldr	r1, [r4, #4]
 80040d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040d4:	2300      	movs	r3, #0
 80040d6:	9303      	str	r3, [sp, #12]
 80040d8:	ab0a      	add	r3, sp, #40	; 0x28
 80040da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040de:	ab09      	add	r3, sp, #36	; 0x24
 80040e0:	ec49 8b10 	vmov	d0, r8, r9
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6022      	str	r2, [r4, #0]
 80040e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040ec:	4628      	mov	r0, r5
 80040ee:	f7ff fecd 	bl	8003e8c <__cvt>
 80040f2:	9b06      	ldr	r3, [sp, #24]
 80040f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040f6:	2b47      	cmp	r3, #71	; 0x47
 80040f8:	4680      	mov	r8, r0
 80040fa:	d108      	bne.n	800410e <_printf_float+0x142>
 80040fc:	1cc8      	adds	r0, r1, #3
 80040fe:	db02      	blt.n	8004106 <_printf_float+0x13a>
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	4299      	cmp	r1, r3
 8004104:	dd41      	ble.n	800418a <_printf_float+0x1be>
 8004106:	f1ab 0b02 	sub.w	fp, fp, #2
 800410a:	fa5f fb8b 	uxtb.w	fp, fp
 800410e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004112:	d820      	bhi.n	8004156 <_printf_float+0x18a>
 8004114:	3901      	subs	r1, #1
 8004116:	465a      	mov	r2, fp
 8004118:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800411c:	9109      	str	r1, [sp, #36]	; 0x24
 800411e:	f7ff ff17 	bl	8003f50 <__exponent>
 8004122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004124:	1813      	adds	r3, r2, r0
 8004126:	2a01      	cmp	r2, #1
 8004128:	4681      	mov	r9, r0
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	dc02      	bgt.n	8004134 <_printf_float+0x168>
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	07d2      	lsls	r2, r2, #31
 8004132:	d501      	bpl.n	8004138 <_printf_float+0x16c>
 8004134:	3301      	adds	r3, #1
 8004136:	6123      	str	r3, [r4, #16]
 8004138:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800413c:	2b00      	cmp	r3, #0
 800413e:	d09c      	beq.n	800407a <_printf_float+0xae>
 8004140:	232d      	movs	r3, #45	; 0x2d
 8004142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004146:	e798      	b.n	800407a <_printf_float+0xae>
 8004148:	9a06      	ldr	r2, [sp, #24]
 800414a:	2a47      	cmp	r2, #71	; 0x47
 800414c:	d1be      	bne.n	80040cc <_printf_float+0x100>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1bc      	bne.n	80040cc <_printf_float+0x100>
 8004152:	2301      	movs	r3, #1
 8004154:	e7b9      	b.n	80040ca <_printf_float+0xfe>
 8004156:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800415a:	d118      	bne.n	800418e <_printf_float+0x1c2>
 800415c:	2900      	cmp	r1, #0
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	dd0b      	ble.n	800417a <_printf_float+0x1ae>
 8004162:	6121      	str	r1, [r4, #16]
 8004164:	b913      	cbnz	r3, 800416c <_printf_float+0x1a0>
 8004166:	6822      	ldr	r2, [r4, #0]
 8004168:	07d0      	lsls	r0, r2, #31
 800416a:	d502      	bpl.n	8004172 <_printf_float+0x1a6>
 800416c:	3301      	adds	r3, #1
 800416e:	440b      	add	r3, r1
 8004170:	6123      	str	r3, [r4, #16]
 8004172:	65a1      	str	r1, [r4, #88]	; 0x58
 8004174:	f04f 0900 	mov.w	r9, #0
 8004178:	e7de      	b.n	8004138 <_printf_float+0x16c>
 800417a:	b913      	cbnz	r3, 8004182 <_printf_float+0x1b6>
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	07d2      	lsls	r2, r2, #31
 8004180:	d501      	bpl.n	8004186 <_printf_float+0x1ba>
 8004182:	3302      	adds	r3, #2
 8004184:	e7f4      	b.n	8004170 <_printf_float+0x1a4>
 8004186:	2301      	movs	r3, #1
 8004188:	e7f2      	b.n	8004170 <_printf_float+0x1a4>
 800418a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800418e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004190:	4299      	cmp	r1, r3
 8004192:	db05      	blt.n	80041a0 <_printf_float+0x1d4>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	6121      	str	r1, [r4, #16]
 8004198:	07d8      	lsls	r0, r3, #31
 800419a:	d5ea      	bpl.n	8004172 <_printf_float+0x1a6>
 800419c:	1c4b      	adds	r3, r1, #1
 800419e:	e7e7      	b.n	8004170 <_printf_float+0x1a4>
 80041a0:	2900      	cmp	r1, #0
 80041a2:	bfd4      	ite	le
 80041a4:	f1c1 0202 	rsble	r2, r1, #2
 80041a8:	2201      	movgt	r2, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	e7e0      	b.n	8004170 <_printf_float+0x1a4>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	055a      	lsls	r2, r3, #21
 80041b2:	d407      	bmi.n	80041c4 <_printf_float+0x1f8>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	4642      	mov	r2, r8
 80041b8:	4631      	mov	r1, r6
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b8      	blx	r7
 80041be:	3001      	adds	r0, #1
 80041c0:	d12c      	bne.n	800421c <_printf_float+0x250>
 80041c2:	e764      	b.n	800408e <_printf_float+0xc2>
 80041c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041c8:	f240 80e0 	bls.w	800438c <_printf_float+0x3c0>
 80041cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041d0:	2200      	movs	r2, #0
 80041d2:	2300      	movs	r3, #0
 80041d4:	f7fc fc98 	bl	8000b08 <__aeabi_dcmpeq>
 80041d8:	2800      	cmp	r0, #0
 80041da:	d034      	beq.n	8004246 <_printf_float+0x27a>
 80041dc:	4a37      	ldr	r2, [pc, #220]	; (80042bc <_printf_float+0x2f0>)
 80041de:	2301      	movs	r3, #1
 80041e0:	4631      	mov	r1, r6
 80041e2:	4628      	mov	r0, r5
 80041e4:	47b8      	blx	r7
 80041e6:	3001      	adds	r0, #1
 80041e8:	f43f af51 	beq.w	800408e <_printf_float+0xc2>
 80041ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041f0:	429a      	cmp	r2, r3
 80041f2:	db02      	blt.n	80041fa <_printf_float+0x22e>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	07d8      	lsls	r0, r3, #31
 80041f8:	d510      	bpl.n	800421c <_printf_float+0x250>
 80041fa:	ee18 3a10 	vmov	r3, s16
 80041fe:	4652      	mov	r2, sl
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	47b8      	blx	r7
 8004206:	3001      	adds	r0, #1
 8004208:	f43f af41 	beq.w	800408e <_printf_float+0xc2>
 800420c:	f04f 0800 	mov.w	r8, #0
 8004210:	f104 091a 	add.w	r9, r4, #26
 8004214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	4543      	cmp	r3, r8
 800421a:	dc09      	bgt.n	8004230 <_printf_float+0x264>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	079b      	lsls	r3, r3, #30
 8004220:	f100 8105 	bmi.w	800442e <_printf_float+0x462>
 8004224:	68e0      	ldr	r0, [r4, #12]
 8004226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004228:	4298      	cmp	r0, r3
 800422a:	bfb8      	it	lt
 800422c:	4618      	movlt	r0, r3
 800422e:	e730      	b.n	8004092 <_printf_float+0xc6>
 8004230:	2301      	movs	r3, #1
 8004232:	464a      	mov	r2, r9
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	f43f af27 	beq.w	800408e <_printf_float+0xc2>
 8004240:	f108 0801 	add.w	r8, r8, #1
 8004244:	e7e6      	b.n	8004214 <_printf_float+0x248>
 8004246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	dc39      	bgt.n	80042c0 <_printf_float+0x2f4>
 800424c:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <_printf_float+0x2f0>)
 800424e:	2301      	movs	r3, #1
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f43f af19 	beq.w	800408e <_printf_float+0xc2>
 800425c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004260:	4313      	orrs	r3, r2
 8004262:	d102      	bne.n	800426a <_printf_float+0x29e>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	07d9      	lsls	r1, r3, #31
 8004268:	d5d8      	bpl.n	800421c <_printf_float+0x250>
 800426a:	ee18 3a10 	vmov	r3, s16
 800426e:	4652      	mov	r2, sl
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f af09 	beq.w	800408e <_printf_float+0xc2>
 800427c:	f04f 0900 	mov.w	r9, #0
 8004280:	f104 0a1a 	add.w	sl, r4, #26
 8004284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004286:	425b      	negs	r3, r3
 8004288:	454b      	cmp	r3, r9
 800428a:	dc01      	bgt.n	8004290 <_printf_float+0x2c4>
 800428c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428e:	e792      	b.n	80041b6 <_printf_float+0x1ea>
 8004290:	2301      	movs	r3, #1
 8004292:	4652      	mov	r2, sl
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	f43f aef7 	beq.w	800408e <_printf_float+0xc2>
 80042a0:	f109 0901 	add.w	r9, r9, #1
 80042a4:	e7ee      	b.n	8004284 <_printf_float+0x2b8>
 80042a6:	bf00      	nop
 80042a8:	7fefffff 	.word	0x7fefffff
 80042ac:	080087d0 	.word	0x080087d0
 80042b0:	080087d4 	.word	0x080087d4
 80042b4:	080087dc 	.word	0x080087dc
 80042b8:	080087d8 	.word	0x080087d8
 80042bc:	080087e0 	.word	0x080087e0
 80042c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042c4:	429a      	cmp	r2, r3
 80042c6:	bfa8      	it	ge
 80042c8:	461a      	movge	r2, r3
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	4691      	mov	r9, r2
 80042ce:	dc37      	bgt.n	8004340 <_printf_float+0x374>
 80042d0:	f04f 0b00 	mov.w	fp, #0
 80042d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042d8:	f104 021a 	add.w	r2, r4, #26
 80042dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042de:	9305      	str	r3, [sp, #20]
 80042e0:	eba3 0309 	sub.w	r3, r3, r9
 80042e4:	455b      	cmp	r3, fp
 80042e6:	dc33      	bgt.n	8004350 <_printf_float+0x384>
 80042e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042ec:	429a      	cmp	r2, r3
 80042ee:	db3b      	blt.n	8004368 <_printf_float+0x39c>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07da      	lsls	r2, r3, #31
 80042f4:	d438      	bmi.n	8004368 <_printf_float+0x39c>
 80042f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f8:	9a05      	ldr	r2, [sp, #20]
 80042fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042fc:	1a9a      	subs	r2, r3, r2
 80042fe:	eba3 0901 	sub.w	r9, r3, r1
 8004302:	4591      	cmp	r9, r2
 8004304:	bfa8      	it	ge
 8004306:	4691      	movge	r9, r2
 8004308:	f1b9 0f00 	cmp.w	r9, #0
 800430c:	dc35      	bgt.n	800437a <_printf_float+0x3ae>
 800430e:	f04f 0800 	mov.w	r8, #0
 8004312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004316:	f104 0a1a 	add.w	sl, r4, #26
 800431a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	eba3 0309 	sub.w	r3, r3, r9
 8004324:	4543      	cmp	r3, r8
 8004326:	f77f af79 	ble.w	800421c <_printf_float+0x250>
 800432a:	2301      	movs	r3, #1
 800432c:	4652      	mov	r2, sl
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	47b8      	blx	r7
 8004334:	3001      	adds	r0, #1
 8004336:	f43f aeaa 	beq.w	800408e <_printf_float+0xc2>
 800433a:	f108 0801 	add.w	r8, r8, #1
 800433e:	e7ec      	b.n	800431a <_printf_float+0x34e>
 8004340:	4613      	mov	r3, r2
 8004342:	4631      	mov	r1, r6
 8004344:	4642      	mov	r2, r8
 8004346:	4628      	mov	r0, r5
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	d1c0      	bne.n	80042d0 <_printf_float+0x304>
 800434e:	e69e      	b.n	800408e <_printf_float+0xc2>
 8004350:	2301      	movs	r3, #1
 8004352:	4631      	mov	r1, r6
 8004354:	4628      	mov	r0, r5
 8004356:	9205      	str	r2, [sp, #20]
 8004358:	47b8      	blx	r7
 800435a:	3001      	adds	r0, #1
 800435c:	f43f ae97 	beq.w	800408e <_printf_float+0xc2>
 8004360:	9a05      	ldr	r2, [sp, #20]
 8004362:	f10b 0b01 	add.w	fp, fp, #1
 8004366:	e7b9      	b.n	80042dc <_printf_float+0x310>
 8004368:	ee18 3a10 	vmov	r3, s16
 800436c:	4652      	mov	r2, sl
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	d1be      	bne.n	80042f6 <_printf_float+0x32a>
 8004378:	e689      	b.n	800408e <_printf_float+0xc2>
 800437a:	9a05      	ldr	r2, [sp, #20]
 800437c:	464b      	mov	r3, r9
 800437e:	4442      	add	r2, r8
 8004380:	4631      	mov	r1, r6
 8004382:	4628      	mov	r0, r5
 8004384:	47b8      	blx	r7
 8004386:	3001      	adds	r0, #1
 8004388:	d1c1      	bne.n	800430e <_printf_float+0x342>
 800438a:	e680      	b.n	800408e <_printf_float+0xc2>
 800438c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800438e:	2a01      	cmp	r2, #1
 8004390:	dc01      	bgt.n	8004396 <_printf_float+0x3ca>
 8004392:	07db      	lsls	r3, r3, #31
 8004394:	d538      	bpl.n	8004408 <_printf_float+0x43c>
 8004396:	2301      	movs	r3, #1
 8004398:	4642      	mov	r2, r8
 800439a:	4631      	mov	r1, r6
 800439c:	4628      	mov	r0, r5
 800439e:	47b8      	blx	r7
 80043a0:	3001      	adds	r0, #1
 80043a2:	f43f ae74 	beq.w	800408e <_printf_float+0xc2>
 80043a6:	ee18 3a10 	vmov	r3, s16
 80043aa:	4652      	mov	r2, sl
 80043ac:	4631      	mov	r1, r6
 80043ae:	4628      	mov	r0, r5
 80043b0:	47b8      	blx	r7
 80043b2:	3001      	adds	r0, #1
 80043b4:	f43f ae6b 	beq.w	800408e <_printf_float+0xc2>
 80043b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043bc:	2200      	movs	r2, #0
 80043be:	2300      	movs	r3, #0
 80043c0:	f7fc fba2 	bl	8000b08 <__aeabi_dcmpeq>
 80043c4:	b9d8      	cbnz	r0, 80043fe <_printf_float+0x432>
 80043c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c8:	f108 0201 	add.w	r2, r8, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	47b8      	blx	r7
 80043d4:	3001      	adds	r0, #1
 80043d6:	d10e      	bne.n	80043f6 <_printf_float+0x42a>
 80043d8:	e659      	b.n	800408e <_printf_float+0xc2>
 80043da:	2301      	movs	r3, #1
 80043dc:	4652      	mov	r2, sl
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	47b8      	blx	r7
 80043e4:	3001      	adds	r0, #1
 80043e6:	f43f ae52 	beq.w	800408e <_printf_float+0xc2>
 80043ea:	f108 0801 	add.w	r8, r8, #1
 80043ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	4543      	cmp	r3, r8
 80043f4:	dcf1      	bgt.n	80043da <_printf_float+0x40e>
 80043f6:	464b      	mov	r3, r9
 80043f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043fc:	e6dc      	b.n	80041b8 <_printf_float+0x1ec>
 80043fe:	f04f 0800 	mov.w	r8, #0
 8004402:	f104 0a1a 	add.w	sl, r4, #26
 8004406:	e7f2      	b.n	80043ee <_printf_float+0x422>
 8004408:	2301      	movs	r3, #1
 800440a:	4642      	mov	r2, r8
 800440c:	e7df      	b.n	80043ce <_printf_float+0x402>
 800440e:	2301      	movs	r3, #1
 8004410:	464a      	mov	r2, r9
 8004412:	4631      	mov	r1, r6
 8004414:	4628      	mov	r0, r5
 8004416:	47b8      	blx	r7
 8004418:	3001      	adds	r0, #1
 800441a:	f43f ae38 	beq.w	800408e <_printf_float+0xc2>
 800441e:	f108 0801 	add.w	r8, r8, #1
 8004422:	68e3      	ldr	r3, [r4, #12]
 8004424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004426:	1a5b      	subs	r3, r3, r1
 8004428:	4543      	cmp	r3, r8
 800442a:	dcf0      	bgt.n	800440e <_printf_float+0x442>
 800442c:	e6fa      	b.n	8004224 <_printf_float+0x258>
 800442e:	f04f 0800 	mov.w	r8, #0
 8004432:	f104 0919 	add.w	r9, r4, #25
 8004436:	e7f4      	b.n	8004422 <_printf_float+0x456>

08004438 <_printf_common>:
 8004438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	4616      	mov	r6, r2
 800443e:	4699      	mov	r9, r3
 8004440:	688a      	ldr	r2, [r1, #8]
 8004442:	690b      	ldr	r3, [r1, #16]
 8004444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004448:	4293      	cmp	r3, r2
 800444a:	bfb8      	it	lt
 800444c:	4613      	movlt	r3, r2
 800444e:	6033      	str	r3, [r6, #0]
 8004450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004454:	4607      	mov	r7, r0
 8004456:	460c      	mov	r4, r1
 8004458:	b10a      	cbz	r2, 800445e <_printf_common+0x26>
 800445a:	3301      	adds	r3, #1
 800445c:	6033      	str	r3, [r6, #0]
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	0699      	lsls	r1, r3, #26
 8004462:	bf42      	ittt	mi
 8004464:	6833      	ldrmi	r3, [r6, #0]
 8004466:	3302      	addmi	r3, #2
 8004468:	6033      	strmi	r3, [r6, #0]
 800446a:	6825      	ldr	r5, [r4, #0]
 800446c:	f015 0506 	ands.w	r5, r5, #6
 8004470:	d106      	bne.n	8004480 <_printf_common+0x48>
 8004472:	f104 0a19 	add.w	sl, r4, #25
 8004476:	68e3      	ldr	r3, [r4, #12]
 8004478:	6832      	ldr	r2, [r6, #0]
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	42ab      	cmp	r3, r5
 800447e:	dc26      	bgt.n	80044ce <_printf_common+0x96>
 8004480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004484:	1e13      	subs	r3, r2, #0
 8004486:	6822      	ldr	r2, [r4, #0]
 8004488:	bf18      	it	ne
 800448a:	2301      	movne	r3, #1
 800448c:	0692      	lsls	r2, r2, #26
 800448e:	d42b      	bmi.n	80044e8 <_printf_common+0xb0>
 8004490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004494:	4649      	mov	r1, r9
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	3001      	adds	r0, #1
 800449c:	d01e      	beq.n	80044dc <_printf_common+0xa4>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	68e5      	ldr	r5, [r4, #12]
 80044a2:	6832      	ldr	r2, [r6, #0]
 80044a4:	f003 0306 	and.w	r3, r3, #6
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	bf08      	it	eq
 80044ac:	1aad      	subeq	r5, r5, r2
 80044ae:	68a3      	ldr	r3, [r4, #8]
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	bf0c      	ite	eq
 80044b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b8:	2500      	movne	r5, #0
 80044ba:	4293      	cmp	r3, r2
 80044bc:	bfc4      	itt	gt
 80044be:	1a9b      	subgt	r3, r3, r2
 80044c0:	18ed      	addgt	r5, r5, r3
 80044c2:	2600      	movs	r6, #0
 80044c4:	341a      	adds	r4, #26
 80044c6:	42b5      	cmp	r5, r6
 80044c8:	d11a      	bne.n	8004500 <_printf_common+0xc8>
 80044ca:	2000      	movs	r0, #0
 80044cc:	e008      	b.n	80044e0 <_printf_common+0xa8>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4652      	mov	r2, sl
 80044d2:	4649      	mov	r1, r9
 80044d4:	4638      	mov	r0, r7
 80044d6:	47c0      	blx	r8
 80044d8:	3001      	adds	r0, #1
 80044da:	d103      	bne.n	80044e4 <_printf_common+0xac>
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e4:	3501      	adds	r5, #1
 80044e6:	e7c6      	b.n	8004476 <_printf_common+0x3e>
 80044e8:	18e1      	adds	r1, r4, r3
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	2030      	movs	r0, #48	; 0x30
 80044ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044f2:	4422      	add	r2, r4
 80044f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044fc:	3302      	adds	r3, #2
 80044fe:	e7c7      	b.n	8004490 <_printf_common+0x58>
 8004500:	2301      	movs	r3, #1
 8004502:	4622      	mov	r2, r4
 8004504:	4649      	mov	r1, r9
 8004506:	4638      	mov	r0, r7
 8004508:	47c0      	blx	r8
 800450a:	3001      	adds	r0, #1
 800450c:	d0e6      	beq.n	80044dc <_printf_common+0xa4>
 800450e:	3601      	adds	r6, #1
 8004510:	e7d9      	b.n	80044c6 <_printf_common+0x8e>
	...

08004514 <_printf_i>:
 8004514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	7e0f      	ldrb	r7, [r1, #24]
 800451a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800451c:	2f78      	cmp	r7, #120	; 0x78
 800451e:	4691      	mov	r9, r2
 8004520:	4680      	mov	r8, r0
 8004522:	460c      	mov	r4, r1
 8004524:	469a      	mov	sl, r3
 8004526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800452a:	d807      	bhi.n	800453c <_printf_i+0x28>
 800452c:	2f62      	cmp	r7, #98	; 0x62
 800452e:	d80a      	bhi.n	8004546 <_printf_i+0x32>
 8004530:	2f00      	cmp	r7, #0
 8004532:	f000 80d8 	beq.w	80046e6 <_printf_i+0x1d2>
 8004536:	2f58      	cmp	r7, #88	; 0x58
 8004538:	f000 80a3 	beq.w	8004682 <_printf_i+0x16e>
 800453c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004544:	e03a      	b.n	80045bc <_printf_i+0xa8>
 8004546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800454a:	2b15      	cmp	r3, #21
 800454c:	d8f6      	bhi.n	800453c <_printf_i+0x28>
 800454e:	a101      	add	r1, pc, #4	; (adr r1, 8004554 <_printf_i+0x40>)
 8004550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004554:	080045ad 	.word	0x080045ad
 8004558:	080045c1 	.word	0x080045c1
 800455c:	0800453d 	.word	0x0800453d
 8004560:	0800453d 	.word	0x0800453d
 8004564:	0800453d 	.word	0x0800453d
 8004568:	0800453d 	.word	0x0800453d
 800456c:	080045c1 	.word	0x080045c1
 8004570:	0800453d 	.word	0x0800453d
 8004574:	0800453d 	.word	0x0800453d
 8004578:	0800453d 	.word	0x0800453d
 800457c:	0800453d 	.word	0x0800453d
 8004580:	080046cd 	.word	0x080046cd
 8004584:	080045f1 	.word	0x080045f1
 8004588:	080046af 	.word	0x080046af
 800458c:	0800453d 	.word	0x0800453d
 8004590:	0800453d 	.word	0x0800453d
 8004594:	080046ef 	.word	0x080046ef
 8004598:	0800453d 	.word	0x0800453d
 800459c:	080045f1 	.word	0x080045f1
 80045a0:	0800453d 	.word	0x0800453d
 80045a4:	0800453d 	.word	0x0800453d
 80045a8:	080046b7 	.word	0x080046b7
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	1d1a      	adds	r2, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	602a      	str	r2, [r5, #0]
 80045b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045bc:	2301      	movs	r3, #1
 80045be:	e0a3      	b.n	8004708 <_printf_i+0x1f4>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	6829      	ldr	r1, [r5, #0]
 80045c4:	0606      	lsls	r6, r0, #24
 80045c6:	f101 0304 	add.w	r3, r1, #4
 80045ca:	d50a      	bpl.n	80045e2 <_printf_i+0xce>
 80045cc:	680e      	ldr	r6, [r1, #0]
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	2e00      	cmp	r6, #0
 80045d2:	da03      	bge.n	80045dc <_printf_i+0xc8>
 80045d4:	232d      	movs	r3, #45	; 0x2d
 80045d6:	4276      	negs	r6, r6
 80045d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045dc:	485e      	ldr	r0, [pc, #376]	; (8004758 <_printf_i+0x244>)
 80045de:	230a      	movs	r3, #10
 80045e0:	e019      	b.n	8004616 <_printf_i+0x102>
 80045e2:	680e      	ldr	r6, [r1, #0]
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ea:	bf18      	it	ne
 80045ec:	b236      	sxthne	r6, r6
 80045ee:	e7ef      	b.n	80045d0 <_printf_i+0xbc>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	6820      	ldr	r0, [r4, #0]
 80045f4:	1d19      	adds	r1, r3, #4
 80045f6:	6029      	str	r1, [r5, #0]
 80045f8:	0601      	lsls	r1, r0, #24
 80045fa:	d501      	bpl.n	8004600 <_printf_i+0xec>
 80045fc:	681e      	ldr	r6, [r3, #0]
 80045fe:	e002      	b.n	8004606 <_printf_i+0xf2>
 8004600:	0646      	lsls	r6, r0, #25
 8004602:	d5fb      	bpl.n	80045fc <_printf_i+0xe8>
 8004604:	881e      	ldrh	r6, [r3, #0]
 8004606:	4854      	ldr	r0, [pc, #336]	; (8004758 <_printf_i+0x244>)
 8004608:	2f6f      	cmp	r7, #111	; 0x6f
 800460a:	bf0c      	ite	eq
 800460c:	2308      	moveq	r3, #8
 800460e:	230a      	movne	r3, #10
 8004610:	2100      	movs	r1, #0
 8004612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004616:	6865      	ldr	r5, [r4, #4]
 8004618:	60a5      	str	r5, [r4, #8]
 800461a:	2d00      	cmp	r5, #0
 800461c:	bfa2      	ittt	ge
 800461e:	6821      	ldrge	r1, [r4, #0]
 8004620:	f021 0104 	bicge.w	r1, r1, #4
 8004624:	6021      	strge	r1, [r4, #0]
 8004626:	b90e      	cbnz	r6, 800462c <_printf_i+0x118>
 8004628:	2d00      	cmp	r5, #0
 800462a:	d04d      	beq.n	80046c8 <_printf_i+0x1b4>
 800462c:	4615      	mov	r5, r2
 800462e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004632:	fb03 6711 	mls	r7, r3, r1, r6
 8004636:	5dc7      	ldrb	r7, [r0, r7]
 8004638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800463c:	4637      	mov	r7, r6
 800463e:	42bb      	cmp	r3, r7
 8004640:	460e      	mov	r6, r1
 8004642:	d9f4      	bls.n	800462e <_printf_i+0x11a>
 8004644:	2b08      	cmp	r3, #8
 8004646:	d10b      	bne.n	8004660 <_printf_i+0x14c>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	07de      	lsls	r6, r3, #31
 800464c:	d508      	bpl.n	8004660 <_printf_i+0x14c>
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	6861      	ldr	r1, [r4, #4]
 8004652:	4299      	cmp	r1, r3
 8004654:	bfde      	ittt	le
 8004656:	2330      	movle	r3, #48	; 0x30
 8004658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800465c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004660:	1b52      	subs	r2, r2, r5
 8004662:	6122      	str	r2, [r4, #16]
 8004664:	f8cd a000 	str.w	sl, [sp]
 8004668:	464b      	mov	r3, r9
 800466a:	aa03      	add	r2, sp, #12
 800466c:	4621      	mov	r1, r4
 800466e:	4640      	mov	r0, r8
 8004670:	f7ff fee2 	bl	8004438 <_printf_common>
 8004674:	3001      	adds	r0, #1
 8004676:	d14c      	bne.n	8004712 <_printf_i+0x1fe>
 8004678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800467c:	b004      	add	sp, #16
 800467e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004682:	4835      	ldr	r0, [pc, #212]	; (8004758 <_printf_i+0x244>)
 8004684:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004688:	6829      	ldr	r1, [r5, #0]
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004690:	6029      	str	r1, [r5, #0]
 8004692:	061d      	lsls	r5, r3, #24
 8004694:	d514      	bpl.n	80046c0 <_printf_i+0x1ac>
 8004696:	07df      	lsls	r7, r3, #31
 8004698:	bf44      	itt	mi
 800469a:	f043 0320 	orrmi.w	r3, r3, #32
 800469e:	6023      	strmi	r3, [r4, #0]
 80046a0:	b91e      	cbnz	r6, 80046aa <_printf_i+0x196>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	f023 0320 	bic.w	r3, r3, #32
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	2310      	movs	r3, #16
 80046ac:	e7b0      	b.n	8004610 <_printf_i+0xfc>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	f043 0320 	orr.w	r3, r3, #32
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	2378      	movs	r3, #120	; 0x78
 80046b8:	4828      	ldr	r0, [pc, #160]	; (800475c <_printf_i+0x248>)
 80046ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046be:	e7e3      	b.n	8004688 <_printf_i+0x174>
 80046c0:	0659      	lsls	r1, r3, #25
 80046c2:	bf48      	it	mi
 80046c4:	b2b6      	uxthmi	r6, r6
 80046c6:	e7e6      	b.n	8004696 <_printf_i+0x182>
 80046c8:	4615      	mov	r5, r2
 80046ca:	e7bb      	b.n	8004644 <_printf_i+0x130>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	6826      	ldr	r6, [r4, #0]
 80046d0:	6961      	ldr	r1, [r4, #20]
 80046d2:	1d18      	adds	r0, r3, #4
 80046d4:	6028      	str	r0, [r5, #0]
 80046d6:	0635      	lsls	r5, r6, #24
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	d501      	bpl.n	80046e0 <_printf_i+0x1cc>
 80046dc:	6019      	str	r1, [r3, #0]
 80046de:	e002      	b.n	80046e6 <_printf_i+0x1d2>
 80046e0:	0670      	lsls	r0, r6, #25
 80046e2:	d5fb      	bpl.n	80046dc <_printf_i+0x1c8>
 80046e4:	8019      	strh	r1, [r3, #0]
 80046e6:	2300      	movs	r3, #0
 80046e8:	6123      	str	r3, [r4, #16]
 80046ea:	4615      	mov	r5, r2
 80046ec:	e7ba      	b.n	8004664 <_printf_i+0x150>
 80046ee:	682b      	ldr	r3, [r5, #0]
 80046f0:	1d1a      	adds	r2, r3, #4
 80046f2:	602a      	str	r2, [r5, #0]
 80046f4:	681d      	ldr	r5, [r3, #0]
 80046f6:	6862      	ldr	r2, [r4, #4]
 80046f8:	2100      	movs	r1, #0
 80046fa:	4628      	mov	r0, r5
 80046fc:	f7fb fd90 	bl	8000220 <memchr>
 8004700:	b108      	cbz	r0, 8004706 <_printf_i+0x1f2>
 8004702:	1b40      	subs	r0, r0, r5
 8004704:	6060      	str	r0, [r4, #4]
 8004706:	6863      	ldr	r3, [r4, #4]
 8004708:	6123      	str	r3, [r4, #16]
 800470a:	2300      	movs	r3, #0
 800470c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004710:	e7a8      	b.n	8004664 <_printf_i+0x150>
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	462a      	mov	r2, r5
 8004716:	4649      	mov	r1, r9
 8004718:	4640      	mov	r0, r8
 800471a:	47d0      	blx	sl
 800471c:	3001      	adds	r0, #1
 800471e:	d0ab      	beq.n	8004678 <_printf_i+0x164>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	079b      	lsls	r3, r3, #30
 8004724:	d413      	bmi.n	800474e <_printf_i+0x23a>
 8004726:	68e0      	ldr	r0, [r4, #12]
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	4298      	cmp	r0, r3
 800472c:	bfb8      	it	lt
 800472e:	4618      	movlt	r0, r3
 8004730:	e7a4      	b.n	800467c <_printf_i+0x168>
 8004732:	2301      	movs	r3, #1
 8004734:	4632      	mov	r2, r6
 8004736:	4649      	mov	r1, r9
 8004738:	4640      	mov	r0, r8
 800473a:	47d0      	blx	sl
 800473c:	3001      	adds	r0, #1
 800473e:	d09b      	beq.n	8004678 <_printf_i+0x164>
 8004740:	3501      	adds	r5, #1
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	9903      	ldr	r1, [sp, #12]
 8004746:	1a5b      	subs	r3, r3, r1
 8004748:	42ab      	cmp	r3, r5
 800474a:	dcf2      	bgt.n	8004732 <_printf_i+0x21e>
 800474c:	e7eb      	b.n	8004726 <_printf_i+0x212>
 800474e:	2500      	movs	r5, #0
 8004750:	f104 0619 	add.w	r6, r4, #25
 8004754:	e7f5      	b.n	8004742 <_printf_i+0x22e>
 8004756:	bf00      	nop
 8004758:	080087e2 	.word	0x080087e2
 800475c:	080087f3 	.word	0x080087f3

08004760 <_scanf_float>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	b087      	sub	sp, #28
 8004766:	4617      	mov	r7, r2
 8004768:	9303      	str	r3, [sp, #12]
 800476a:	688b      	ldr	r3, [r1, #8]
 800476c:	1e5a      	subs	r2, r3, #1
 800476e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004772:	bf83      	ittte	hi
 8004774:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004778:	195b      	addhi	r3, r3, r5
 800477a:	9302      	strhi	r3, [sp, #8]
 800477c:	2300      	movls	r3, #0
 800477e:	bf86      	itte	hi
 8004780:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004784:	608b      	strhi	r3, [r1, #8]
 8004786:	9302      	strls	r3, [sp, #8]
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	468b      	mov	fp, r1
 800478c:	2500      	movs	r5, #0
 800478e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004792:	f84b 3b1c 	str.w	r3, [fp], #28
 8004796:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800479a:	4680      	mov	r8, r0
 800479c:	460c      	mov	r4, r1
 800479e:	465e      	mov	r6, fp
 80047a0:	46aa      	mov	sl, r5
 80047a2:	46a9      	mov	r9, r5
 80047a4:	9501      	str	r5, [sp, #4]
 80047a6:	68a2      	ldr	r2, [r4, #8]
 80047a8:	b152      	cbz	r2, 80047c0 <_scanf_float+0x60>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b4e      	cmp	r3, #78	; 0x4e
 80047b0:	d864      	bhi.n	800487c <_scanf_float+0x11c>
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d83c      	bhi.n	8004830 <_scanf_float+0xd0>
 80047b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80047ba:	b2c8      	uxtb	r0, r1
 80047bc:	280e      	cmp	r0, #14
 80047be:	d93a      	bls.n	8004836 <_scanf_float+0xd6>
 80047c0:	f1b9 0f00 	cmp.w	r9, #0
 80047c4:	d003      	beq.n	80047ce <_scanf_float+0x6e>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80047d2:	f1ba 0f01 	cmp.w	sl, #1
 80047d6:	f200 8113 	bhi.w	8004a00 <_scanf_float+0x2a0>
 80047da:	455e      	cmp	r6, fp
 80047dc:	f200 8105 	bhi.w	80049ea <_scanf_float+0x28a>
 80047e0:	2501      	movs	r5, #1
 80047e2:	4628      	mov	r0, r5
 80047e4:	b007      	add	sp, #28
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80047ee:	2a0d      	cmp	r2, #13
 80047f0:	d8e6      	bhi.n	80047c0 <_scanf_float+0x60>
 80047f2:	a101      	add	r1, pc, #4	; (adr r1, 80047f8 <_scanf_float+0x98>)
 80047f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047f8:	08004937 	.word	0x08004937
 80047fc:	080047c1 	.word	0x080047c1
 8004800:	080047c1 	.word	0x080047c1
 8004804:	080047c1 	.word	0x080047c1
 8004808:	08004997 	.word	0x08004997
 800480c:	0800496f 	.word	0x0800496f
 8004810:	080047c1 	.word	0x080047c1
 8004814:	080047c1 	.word	0x080047c1
 8004818:	08004945 	.word	0x08004945
 800481c:	080047c1 	.word	0x080047c1
 8004820:	080047c1 	.word	0x080047c1
 8004824:	080047c1 	.word	0x080047c1
 8004828:	080047c1 	.word	0x080047c1
 800482c:	080048fd 	.word	0x080048fd
 8004830:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004834:	e7db      	b.n	80047ee <_scanf_float+0x8e>
 8004836:	290e      	cmp	r1, #14
 8004838:	d8c2      	bhi.n	80047c0 <_scanf_float+0x60>
 800483a:	a001      	add	r0, pc, #4	; (adr r0, 8004840 <_scanf_float+0xe0>)
 800483c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004840:	080048ef 	.word	0x080048ef
 8004844:	080047c1 	.word	0x080047c1
 8004848:	080048ef 	.word	0x080048ef
 800484c:	08004983 	.word	0x08004983
 8004850:	080047c1 	.word	0x080047c1
 8004854:	0800489d 	.word	0x0800489d
 8004858:	080048d9 	.word	0x080048d9
 800485c:	080048d9 	.word	0x080048d9
 8004860:	080048d9 	.word	0x080048d9
 8004864:	080048d9 	.word	0x080048d9
 8004868:	080048d9 	.word	0x080048d9
 800486c:	080048d9 	.word	0x080048d9
 8004870:	080048d9 	.word	0x080048d9
 8004874:	080048d9 	.word	0x080048d9
 8004878:	080048d9 	.word	0x080048d9
 800487c:	2b6e      	cmp	r3, #110	; 0x6e
 800487e:	d809      	bhi.n	8004894 <_scanf_float+0x134>
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d8b2      	bhi.n	80047ea <_scanf_float+0x8a>
 8004884:	2b54      	cmp	r3, #84	; 0x54
 8004886:	d077      	beq.n	8004978 <_scanf_float+0x218>
 8004888:	2b59      	cmp	r3, #89	; 0x59
 800488a:	d199      	bne.n	80047c0 <_scanf_float+0x60>
 800488c:	2d07      	cmp	r5, #7
 800488e:	d197      	bne.n	80047c0 <_scanf_float+0x60>
 8004890:	2508      	movs	r5, #8
 8004892:	e029      	b.n	80048e8 <_scanf_float+0x188>
 8004894:	2b74      	cmp	r3, #116	; 0x74
 8004896:	d06f      	beq.n	8004978 <_scanf_float+0x218>
 8004898:	2b79      	cmp	r3, #121	; 0x79
 800489a:	e7f6      	b.n	800488a <_scanf_float+0x12a>
 800489c:	6821      	ldr	r1, [r4, #0]
 800489e:	05c8      	lsls	r0, r1, #23
 80048a0:	d51a      	bpl.n	80048d8 <_scanf_float+0x178>
 80048a2:	9b02      	ldr	r3, [sp, #8]
 80048a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80048a8:	6021      	str	r1, [r4, #0]
 80048aa:	f109 0901 	add.w	r9, r9, #1
 80048ae:	b11b      	cbz	r3, 80048b8 <_scanf_float+0x158>
 80048b0:	3b01      	subs	r3, #1
 80048b2:	3201      	adds	r2, #1
 80048b4:	9302      	str	r3, [sp, #8]
 80048b6:	60a2      	str	r2, [r4, #8]
 80048b8:	68a3      	ldr	r3, [r4, #8]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	6923      	ldr	r3, [r4, #16]
 80048c0:	3301      	adds	r3, #1
 80048c2:	6123      	str	r3, [r4, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	f340 8084 	ble.w	80049d8 <_scanf_float+0x278>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	e766      	b.n	80047a6 <_scanf_float+0x46>
 80048d8:	eb1a 0f05 	cmn.w	sl, r5
 80048dc:	f47f af70 	bne.w	80047c0 <_scanf_float+0x60>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	f806 3b01 	strb.w	r3, [r6], #1
 80048ec:	e7e4      	b.n	80048b8 <_scanf_float+0x158>
 80048ee:	6822      	ldr	r2, [r4, #0]
 80048f0:	0610      	lsls	r0, r2, #24
 80048f2:	f57f af65 	bpl.w	80047c0 <_scanf_float+0x60>
 80048f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fa:	e7f4      	b.n	80048e6 <_scanf_float+0x186>
 80048fc:	f1ba 0f00 	cmp.w	sl, #0
 8004900:	d10e      	bne.n	8004920 <_scanf_float+0x1c0>
 8004902:	f1b9 0f00 	cmp.w	r9, #0
 8004906:	d10e      	bne.n	8004926 <_scanf_float+0x1c6>
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800490e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004912:	d108      	bne.n	8004926 <_scanf_float+0x1c6>
 8004914:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004918:	6022      	str	r2, [r4, #0]
 800491a:	f04f 0a01 	mov.w	sl, #1
 800491e:	e7e3      	b.n	80048e8 <_scanf_float+0x188>
 8004920:	f1ba 0f02 	cmp.w	sl, #2
 8004924:	d055      	beq.n	80049d2 <_scanf_float+0x272>
 8004926:	2d01      	cmp	r5, #1
 8004928:	d002      	beq.n	8004930 <_scanf_float+0x1d0>
 800492a:	2d04      	cmp	r5, #4
 800492c:	f47f af48 	bne.w	80047c0 <_scanf_float+0x60>
 8004930:	3501      	adds	r5, #1
 8004932:	b2ed      	uxtb	r5, r5
 8004934:	e7d8      	b.n	80048e8 <_scanf_float+0x188>
 8004936:	f1ba 0f01 	cmp.w	sl, #1
 800493a:	f47f af41 	bne.w	80047c0 <_scanf_float+0x60>
 800493e:	f04f 0a02 	mov.w	sl, #2
 8004942:	e7d1      	b.n	80048e8 <_scanf_float+0x188>
 8004944:	b97d      	cbnz	r5, 8004966 <_scanf_float+0x206>
 8004946:	f1b9 0f00 	cmp.w	r9, #0
 800494a:	f47f af3c 	bne.w	80047c6 <_scanf_float+0x66>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004954:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004958:	f47f af39 	bne.w	80047ce <_scanf_float+0x6e>
 800495c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004960:	6022      	str	r2, [r4, #0]
 8004962:	2501      	movs	r5, #1
 8004964:	e7c0      	b.n	80048e8 <_scanf_float+0x188>
 8004966:	2d03      	cmp	r5, #3
 8004968:	d0e2      	beq.n	8004930 <_scanf_float+0x1d0>
 800496a:	2d05      	cmp	r5, #5
 800496c:	e7de      	b.n	800492c <_scanf_float+0x1cc>
 800496e:	2d02      	cmp	r5, #2
 8004970:	f47f af26 	bne.w	80047c0 <_scanf_float+0x60>
 8004974:	2503      	movs	r5, #3
 8004976:	e7b7      	b.n	80048e8 <_scanf_float+0x188>
 8004978:	2d06      	cmp	r5, #6
 800497a:	f47f af21 	bne.w	80047c0 <_scanf_float+0x60>
 800497e:	2507      	movs	r5, #7
 8004980:	e7b2      	b.n	80048e8 <_scanf_float+0x188>
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	0591      	lsls	r1, r2, #22
 8004986:	f57f af1b 	bpl.w	80047c0 <_scanf_float+0x60>
 800498a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800498e:	6022      	str	r2, [r4, #0]
 8004990:	f8cd 9004 	str.w	r9, [sp, #4]
 8004994:	e7a8      	b.n	80048e8 <_scanf_float+0x188>
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800499c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80049a0:	d006      	beq.n	80049b0 <_scanf_float+0x250>
 80049a2:	0550      	lsls	r0, r2, #21
 80049a4:	f57f af0c 	bpl.w	80047c0 <_scanf_float+0x60>
 80049a8:	f1b9 0f00 	cmp.w	r9, #0
 80049ac:	f43f af0f 	beq.w	80047ce <_scanf_float+0x6e>
 80049b0:	0591      	lsls	r1, r2, #22
 80049b2:	bf58      	it	pl
 80049b4:	9901      	ldrpl	r1, [sp, #4]
 80049b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049ba:	bf58      	it	pl
 80049bc:	eba9 0101 	subpl.w	r1, r9, r1
 80049c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80049c4:	bf58      	it	pl
 80049c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	f04f 0900 	mov.w	r9, #0
 80049d0:	e78a      	b.n	80048e8 <_scanf_float+0x188>
 80049d2:	f04f 0a03 	mov.w	sl, #3
 80049d6:	e787      	b.n	80048e8 <_scanf_float+0x188>
 80049d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049dc:	4639      	mov	r1, r7
 80049de:	4640      	mov	r0, r8
 80049e0:	4798      	blx	r3
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f43f aedf 	beq.w	80047a6 <_scanf_float+0x46>
 80049e8:	e6ea      	b.n	80047c0 <_scanf_float+0x60>
 80049ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049f2:	463a      	mov	r2, r7
 80049f4:	4640      	mov	r0, r8
 80049f6:	4798      	blx	r3
 80049f8:	6923      	ldr	r3, [r4, #16]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	e6ec      	b.n	80047da <_scanf_float+0x7a>
 8004a00:	1e6b      	subs	r3, r5, #1
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	d825      	bhi.n	8004a52 <_scanf_float+0x2f2>
 8004a06:	2d02      	cmp	r5, #2
 8004a08:	d836      	bhi.n	8004a78 <_scanf_float+0x318>
 8004a0a:	455e      	cmp	r6, fp
 8004a0c:	f67f aee8 	bls.w	80047e0 <_scanf_float+0x80>
 8004a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a18:	463a      	mov	r2, r7
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	4798      	blx	r3
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	e7f1      	b.n	8004a0a <_scanf_float+0x2aa>
 8004a26:	9802      	ldr	r0, [sp, #8]
 8004a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004a30:	9002      	str	r0, [sp, #8]
 8004a32:	463a      	mov	r2, r7
 8004a34:	4640      	mov	r0, r8
 8004a36:	4798      	blx	r3
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a42:	fa5f fa8a 	uxtb.w	sl, sl
 8004a46:	f1ba 0f02 	cmp.w	sl, #2
 8004a4a:	d1ec      	bne.n	8004a26 <_scanf_float+0x2c6>
 8004a4c:	3d03      	subs	r5, #3
 8004a4e:	b2ed      	uxtb	r5, r5
 8004a50:	1b76      	subs	r6, r6, r5
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	05da      	lsls	r2, r3, #23
 8004a56:	d52f      	bpl.n	8004ab8 <_scanf_float+0x358>
 8004a58:	055b      	lsls	r3, r3, #21
 8004a5a:	d510      	bpl.n	8004a7e <_scanf_float+0x31e>
 8004a5c:	455e      	cmp	r6, fp
 8004a5e:	f67f aebf 	bls.w	80047e0 <_scanf_float+0x80>
 8004a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a6a:	463a      	mov	r2, r7
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	4798      	blx	r3
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	6123      	str	r3, [r4, #16]
 8004a76:	e7f1      	b.n	8004a5c <_scanf_float+0x2fc>
 8004a78:	46aa      	mov	sl, r5
 8004a7a:	9602      	str	r6, [sp, #8]
 8004a7c:	e7df      	b.n	8004a3e <_scanf_float+0x2de>
 8004a7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	2965      	cmp	r1, #101	; 0x65
 8004a86:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004a8a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004a8e:	6123      	str	r3, [r4, #16]
 8004a90:	d00c      	beq.n	8004aac <_scanf_float+0x34c>
 8004a92:	2945      	cmp	r1, #69	; 0x45
 8004a94:	d00a      	beq.n	8004aac <_scanf_float+0x34c>
 8004a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a9a:	463a      	mov	r2, r7
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	4798      	blx	r3
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	1eb5      	subs	r5, r6, #2
 8004aaa:	6123      	str	r3, [r4, #16]
 8004aac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ab0:	463a      	mov	r2, r7
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	4798      	blx	r3
 8004ab6:	462e      	mov	r6, r5
 8004ab8:	6825      	ldr	r5, [r4, #0]
 8004aba:	f015 0510 	ands.w	r5, r5, #16
 8004abe:	d159      	bne.n	8004b74 <_scanf_float+0x414>
 8004ac0:	7035      	strb	r5, [r6, #0]
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	d11b      	bne.n	8004b06 <_scanf_float+0x3a6>
 8004ace:	9b01      	ldr	r3, [sp, #4]
 8004ad0:	454b      	cmp	r3, r9
 8004ad2:	eba3 0209 	sub.w	r2, r3, r9
 8004ad6:	d123      	bne.n	8004b20 <_scanf_float+0x3c0>
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4659      	mov	r1, fp
 8004adc:	4640      	mov	r0, r8
 8004ade:	f000 fe99 	bl	8005814 <_strtod_r>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	f012 0f02 	tst.w	r2, #2
 8004aea:	ec57 6b10 	vmov	r6, r7, d0
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	d021      	beq.n	8004b36 <_scanf_float+0x3d6>
 8004af2:	9903      	ldr	r1, [sp, #12]
 8004af4:	1d1a      	adds	r2, r3, #4
 8004af6:	600a      	str	r2, [r1, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	e9c3 6700 	strd	r6, r7, [r3]
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60e3      	str	r3, [r4, #12]
 8004b04:	e66d      	b.n	80047e2 <_scanf_float+0x82>
 8004b06:	9b04      	ldr	r3, [sp, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0e5      	beq.n	8004ad8 <_scanf_float+0x378>
 8004b0c:	9905      	ldr	r1, [sp, #20]
 8004b0e:	230a      	movs	r3, #10
 8004b10:	462a      	mov	r2, r5
 8004b12:	3101      	adds	r1, #1
 8004b14:	4640      	mov	r0, r8
 8004b16:	f000 ff05 	bl	8005924 <_strtol_r>
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	9e05      	ldr	r6, [sp, #20]
 8004b1e:	1ac2      	subs	r2, r0, r3
 8004b20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b24:	429e      	cmp	r6, r3
 8004b26:	bf28      	it	cs
 8004b28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004b2c:	4912      	ldr	r1, [pc, #72]	; (8004b78 <_scanf_float+0x418>)
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f000 f82c 	bl	8004b8c <siprintf>
 8004b34:	e7d0      	b.n	8004ad8 <_scanf_float+0x378>
 8004b36:	9903      	ldr	r1, [sp, #12]
 8004b38:	f012 0f04 	tst.w	r2, #4
 8004b3c:	f103 0204 	add.w	r2, r3, #4
 8004b40:	600a      	str	r2, [r1, #0]
 8004b42:	d1d9      	bne.n	8004af8 <_scanf_float+0x398>
 8004b44:	f8d3 8000 	ldr.w	r8, [r3]
 8004b48:	ee10 2a10 	vmov	r2, s0
 8004b4c:	ee10 0a10 	vmov	r0, s0
 8004b50:	463b      	mov	r3, r7
 8004b52:	4639      	mov	r1, r7
 8004b54:	f7fc f80a 	bl	8000b6c <__aeabi_dcmpun>
 8004b58:	b128      	cbz	r0, 8004b66 <_scanf_float+0x406>
 8004b5a:	4808      	ldr	r0, [pc, #32]	; (8004b7c <_scanf_float+0x41c>)
 8004b5c:	f000 f810 	bl	8004b80 <nanf>
 8004b60:	ed88 0a00 	vstr	s0, [r8]
 8004b64:	e7cb      	b.n	8004afe <_scanf_float+0x39e>
 8004b66:	4630      	mov	r0, r6
 8004b68:	4639      	mov	r1, r7
 8004b6a:	f7fc f85d 	bl	8000c28 <__aeabi_d2f>
 8004b6e:	f8c8 0000 	str.w	r0, [r8]
 8004b72:	e7c4      	b.n	8004afe <_scanf_float+0x39e>
 8004b74:	2500      	movs	r5, #0
 8004b76:	e634      	b.n	80047e2 <_scanf_float+0x82>
 8004b78:	08008804 	.word	0x08008804
 8004b7c:	08008c10 	.word	0x08008c10

08004b80 <nanf>:
 8004b80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004b88 <nanf+0x8>
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	7fc00000 	.word	0x7fc00000

08004b8c <siprintf>:
 8004b8c:	b40e      	push	{r1, r2, r3}
 8004b8e:	b500      	push	{lr}
 8004b90:	b09c      	sub	sp, #112	; 0x70
 8004b92:	ab1d      	add	r3, sp, #116	; 0x74
 8004b94:	9002      	str	r0, [sp, #8]
 8004b96:	9006      	str	r0, [sp, #24]
 8004b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b9c:	4809      	ldr	r0, [pc, #36]	; (8004bc4 <siprintf+0x38>)
 8004b9e:	9107      	str	r1, [sp, #28]
 8004ba0:	9104      	str	r1, [sp, #16]
 8004ba2:	4909      	ldr	r1, [pc, #36]	; (8004bc8 <siprintf+0x3c>)
 8004ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba8:	9105      	str	r1, [sp, #20]
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	a902      	add	r1, sp, #8
 8004bb0:	f002 fee4 	bl	800797c <_svfiprintf_r>
 8004bb4:	9b02      	ldr	r3, [sp, #8]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	b01c      	add	sp, #112	; 0x70
 8004bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc0:	b003      	add	sp, #12
 8004bc2:	4770      	bx	lr
 8004bc4:	20000010 	.word	0x20000010
 8004bc8:	ffff0208 	.word	0xffff0208

08004bcc <sulp>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4604      	mov	r4, r0
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	ec45 4b10 	vmov	d0, r4, r5
 8004bd6:	4616      	mov	r6, r2
 8004bd8:	f002 fc2e 	bl	8007438 <__ulp>
 8004bdc:	ec51 0b10 	vmov	r0, r1, d0
 8004be0:	b17e      	cbz	r6, 8004c02 <sulp+0x36>
 8004be2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004be6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dd09      	ble.n	8004c02 <sulp+0x36>
 8004bee:	051b      	lsls	r3, r3, #20
 8004bf0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004bf4:	2400      	movs	r4, #0
 8004bf6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	f7fb fd1b 	bl	8000638 <__aeabi_dmul>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	0000      	movs	r0, r0
	...

08004c08 <_strtod_l>:
 8004c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	ed2d 8b02 	vpush	{d8}
 8004c10:	b09d      	sub	sp, #116	; 0x74
 8004c12:	461f      	mov	r7, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	9318      	str	r3, [sp, #96]	; 0x60
 8004c18:	4ba2      	ldr	r3, [pc, #648]	; (8004ea4 <_strtod_l+0x29c>)
 8004c1a:	9213      	str	r2, [sp, #76]	; 0x4c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	9305      	str	r3, [sp, #20]
 8004c20:	4604      	mov	r4, r0
 8004c22:	4618      	mov	r0, r3
 8004c24:	4688      	mov	r8, r1
 8004c26:	f7fb faf3 	bl	8000210 <strlen>
 8004c2a:	f04f 0a00 	mov.w	sl, #0
 8004c2e:	4605      	mov	r5, r0
 8004c30:	f04f 0b00 	mov.w	fp, #0
 8004c34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	2a2b      	cmp	r2, #43	; 0x2b
 8004c3e:	d04e      	beq.n	8004cde <_strtod_l+0xd6>
 8004c40:	d83b      	bhi.n	8004cba <_strtod_l+0xb2>
 8004c42:	2a0d      	cmp	r2, #13
 8004c44:	d834      	bhi.n	8004cb0 <_strtod_l+0xa8>
 8004c46:	2a08      	cmp	r2, #8
 8004c48:	d834      	bhi.n	8004cb4 <_strtod_l+0xac>
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	d03e      	beq.n	8004ccc <_strtod_l+0xc4>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	930a      	str	r3, [sp, #40]	; 0x28
 8004c52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004c54:	7833      	ldrb	r3, [r6, #0]
 8004c56:	2b30      	cmp	r3, #48	; 0x30
 8004c58:	f040 80b0 	bne.w	8004dbc <_strtod_l+0x1b4>
 8004c5c:	7873      	ldrb	r3, [r6, #1]
 8004c5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c62:	2b58      	cmp	r3, #88	; 0x58
 8004c64:	d168      	bne.n	8004d38 <_strtod_l+0x130>
 8004c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	ab18      	add	r3, sp, #96	; 0x60
 8004c6c:	9702      	str	r7, [sp, #8]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4a8d      	ldr	r2, [pc, #564]	; (8004ea8 <_strtod_l+0x2a0>)
 8004c72:	ab19      	add	r3, sp, #100	; 0x64
 8004c74:	a917      	add	r1, sp, #92	; 0x5c
 8004c76:	4620      	mov	r0, r4
 8004c78:	f001 fd38 	bl	80066ec <__gethex>
 8004c7c:	f010 0707 	ands.w	r7, r0, #7
 8004c80:	4605      	mov	r5, r0
 8004c82:	d005      	beq.n	8004c90 <_strtod_l+0x88>
 8004c84:	2f06      	cmp	r7, #6
 8004c86:	d12c      	bne.n	8004ce2 <_strtod_l+0xda>
 8004c88:	3601      	adds	r6, #1
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9617      	str	r6, [sp, #92]	; 0x5c
 8004c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f040 8590 	bne.w	80057b8 <_strtod_l+0xbb0>
 8004c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c9a:	b1eb      	cbz	r3, 8004cd8 <_strtod_l+0xd0>
 8004c9c:	4652      	mov	r2, sl
 8004c9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004ca2:	ec43 2b10 	vmov	d0, r2, r3
 8004ca6:	b01d      	add	sp, #116	; 0x74
 8004ca8:	ecbd 8b02 	vpop	{d8}
 8004cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb0:	2a20      	cmp	r2, #32
 8004cb2:	d1cc      	bne.n	8004c4e <_strtod_l+0x46>
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cb8:	e7be      	b.n	8004c38 <_strtod_l+0x30>
 8004cba:	2a2d      	cmp	r2, #45	; 0x2d
 8004cbc:	d1c7      	bne.n	8004c4e <_strtod_l+0x46>
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	920a      	str	r2, [sp, #40]	; 0x28
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cc6:	785b      	ldrb	r3, [r3, #1]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1c2      	bne.n	8004c52 <_strtod_l+0x4a>
 8004ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 856e 	bne.w	80057b4 <_strtod_l+0xbac>
 8004cd8:	4652      	mov	r2, sl
 8004cda:	465b      	mov	r3, fp
 8004cdc:	e7e1      	b.n	8004ca2 <_strtod_l+0x9a>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	e7ee      	b.n	8004cc0 <_strtod_l+0xb8>
 8004ce2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004ce4:	b13a      	cbz	r2, 8004cf6 <_strtod_l+0xee>
 8004ce6:	2135      	movs	r1, #53	; 0x35
 8004ce8:	a81a      	add	r0, sp, #104	; 0x68
 8004cea:	f002 fcb0 	bl	800764e <__copybits>
 8004cee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f002 f86f 	bl	8006dd4 <_Bfree>
 8004cf6:	3f01      	subs	r7, #1
 8004cf8:	2f04      	cmp	r7, #4
 8004cfa:	d806      	bhi.n	8004d0a <_strtod_l+0x102>
 8004cfc:	e8df f007 	tbb	[pc, r7]
 8004d00:	1714030a 	.word	0x1714030a
 8004d04:	0a          	.byte	0x0a
 8004d05:	00          	.byte	0x00
 8004d06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004d0a:	0728      	lsls	r0, r5, #28
 8004d0c:	d5c0      	bpl.n	8004c90 <_strtod_l+0x88>
 8004d0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004d12:	e7bd      	b.n	8004c90 <_strtod_l+0x88>
 8004d14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004d18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d26:	e7f0      	b.n	8004d0a <_strtod_l+0x102>
 8004d28:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004eac <_strtod_l+0x2a4>
 8004d2c:	e7ed      	b.n	8004d0a <_strtod_l+0x102>
 8004d2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004d32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004d36:	e7e8      	b.n	8004d0a <_strtod_l+0x102>
 8004d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d0f9      	beq.n	8004d38 <_strtod_l+0x130>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0a3      	beq.n	8004c90 <_strtod_l+0x88>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f04f 0900 	mov.w	r9, #0
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d52:	9308      	str	r3, [sp, #32]
 8004d54:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d58:	464f      	mov	r7, r9
 8004d5a:	220a      	movs	r2, #10
 8004d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004d5e:	7806      	ldrb	r6, [r0, #0]
 8004d60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004d64:	b2d9      	uxtb	r1, r3
 8004d66:	2909      	cmp	r1, #9
 8004d68:	d92a      	bls.n	8004dc0 <_strtod_l+0x1b8>
 8004d6a:	9905      	ldr	r1, [sp, #20]
 8004d6c:	462a      	mov	r2, r5
 8004d6e:	f002 ff1f 	bl	8007bb0 <strncmp>
 8004d72:	b398      	cbz	r0, 8004ddc <_strtod_l+0x1d4>
 8004d74:	2000      	movs	r0, #0
 8004d76:	4632      	mov	r2, r6
 8004d78:	463d      	mov	r5, r7
 8004d7a:	9005      	str	r0, [sp, #20]
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2a65      	cmp	r2, #101	; 0x65
 8004d80:	d001      	beq.n	8004d86 <_strtod_l+0x17e>
 8004d82:	2a45      	cmp	r2, #69	; 0x45
 8004d84:	d118      	bne.n	8004db8 <_strtod_l+0x1b0>
 8004d86:	b91d      	cbnz	r5, 8004d90 <_strtod_l+0x188>
 8004d88:	9a04      	ldr	r2, [sp, #16]
 8004d8a:	4302      	orrs	r2, r0
 8004d8c:	d09e      	beq.n	8004ccc <_strtod_l+0xc4>
 8004d8e:	2500      	movs	r5, #0
 8004d90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004d94:	f108 0201 	add.w	r2, r8, #1
 8004d98:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004d9e:	2a2b      	cmp	r2, #43	; 0x2b
 8004da0:	d075      	beq.n	8004e8e <_strtod_l+0x286>
 8004da2:	2a2d      	cmp	r2, #45	; 0x2d
 8004da4:	d07b      	beq.n	8004e9e <_strtod_l+0x296>
 8004da6:	f04f 0c00 	mov.w	ip, #0
 8004daa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004dae:	2909      	cmp	r1, #9
 8004db0:	f240 8082 	bls.w	8004eb8 <_strtod_l+0x2b0>
 8004db4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004db8:	2600      	movs	r6, #0
 8004dba:	e09d      	b.n	8004ef8 <_strtod_l+0x2f0>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e7c4      	b.n	8004d4a <_strtod_l+0x142>
 8004dc0:	2f08      	cmp	r7, #8
 8004dc2:	bfd8      	it	le
 8004dc4:	9907      	ldrle	r1, [sp, #28]
 8004dc6:	f100 0001 	add.w	r0, r0, #1
 8004dca:	bfda      	itte	le
 8004dcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8004dd0:	9307      	strle	r3, [sp, #28]
 8004dd2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004dd6:	3701      	adds	r7, #1
 8004dd8:	9017      	str	r0, [sp, #92]	; 0x5c
 8004dda:	e7bf      	b.n	8004d5c <_strtod_l+0x154>
 8004ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dde:	195a      	adds	r2, r3, r5
 8004de0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004de2:	5d5a      	ldrb	r2, [r3, r5]
 8004de4:	2f00      	cmp	r7, #0
 8004de6:	d037      	beq.n	8004e58 <_strtod_l+0x250>
 8004de8:	9005      	str	r0, [sp, #20]
 8004dea:	463d      	mov	r5, r7
 8004dec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	d912      	bls.n	8004e1a <_strtod_l+0x212>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e7c2      	b.n	8004d7e <_strtod_l+0x176>
 8004df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8004dfe:	785a      	ldrb	r2, [r3, #1]
 8004e00:	3001      	adds	r0, #1
 8004e02:	2a30      	cmp	r2, #48	; 0x30
 8004e04:	d0f8      	beq.n	8004df8 <_strtod_l+0x1f0>
 8004e06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	f200 84d9 	bhi.w	80057c2 <_strtod_l+0xbba>
 8004e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e12:	9005      	str	r0, [sp, #20]
 8004e14:	2000      	movs	r0, #0
 8004e16:	9308      	str	r3, [sp, #32]
 8004e18:	4605      	mov	r5, r0
 8004e1a:	3a30      	subs	r2, #48	; 0x30
 8004e1c:	f100 0301 	add.w	r3, r0, #1
 8004e20:	d014      	beq.n	8004e4c <_strtod_l+0x244>
 8004e22:	9905      	ldr	r1, [sp, #20]
 8004e24:	4419      	add	r1, r3
 8004e26:	9105      	str	r1, [sp, #20]
 8004e28:	462b      	mov	r3, r5
 8004e2a:	eb00 0e05 	add.w	lr, r0, r5
 8004e2e:	210a      	movs	r1, #10
 8004e30:	4573      	cmp	r3, lr
 8004e32:	d113      	bne.n	8004e5c <_strtod_l+0x254>
 8004e34:	182b      	adds	r3, r5, r0
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	f105 0501 	add.w	r5, r5, #1
 8004e3c:	4405      	add	r5, r0
 8004e3e:	dc1c      	bgt.n	8004e7a <_strtod_l+0x272>
 8004e40:	9907      	ldr	r1, [sp, #28]
 8004e42:	230a      	movs	r3, #10
 8004e44:	fb03 2301 	mla	r3, r3, r1, r2
 8004e48:	9307      	str	r3, [sp, #28]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e4e:	1c51      	adds	r1, r2, #1
 8004e50:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e52:	7852      	ldrb	r2, [r2, #1]
 8004e54:	4618      	mov	r0, r3
 8004e56:	e7c9      	b.n	8004dec <_strtod_l+0x1e4>
 8004e58:	4638      	mov	r0, r7
 8004e5a:	e7d2      	b.n	8004e02 <_strtod_l+0x1fa>
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	dc04      	bgt.n	8004e6a <_strtod_l+0x262>
 8004e60:	9e07      	ldr	r6, [sp, #28]
 8004e62:	434e      	muls	r6, r1
 8004e64:	9607      	str	r6, [sp, #28]
 8004e66:	3301      	adds	r3, #1
 8004e68:	e7e2      	b.n	8004e30 <_strtod_l+0x228>
 8004e6a:	f103 0c01 	add.w	ip, r3, #1
 8004e6e:	f1bc 0f10 	cmp.w	ip, #16
 8004e72:	bfd8      	it	le
 8004e74:	fb01 f909 	mulle.w	r9, r1, r9
 8004e78:	e7f5      	b.n	8004e66 <_strtod_l+0x25e>
 8004e7a:	2d10      	cmp	r5, #16
 8004e7c:	bfdc      	itt	le
 8004e7e:	230a      	movle	r3, #10
 8004e80:	fb03 2909 	mlale	r9, r3, r9, r2
 8004e84:	e7e1      	b.n	8004e4a <_strtod_l+0x242>
 8004e86:	2300      	movs	r3, #0
 8004e88:	9305      	str	r3, [sp, #20]
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e77c      	b.n	8004d88 <_strtod_l+0x180>
 8004e8e:	f04f 0c00 	mov.w	ip, #0
 8004e92:	f108 0202 	add.w	r2, r8, #2
 8004e96:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e98:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004e9c:	e785      	b.n	8004daa <_strtod_l+0x1a2>
 8004e9e:	f04f 0c01 	mov.w	ip, #1
 8004ea2:	e7f6      	b.n	8004e92 <_strtod_l+0x28a>
 8004ea4:	08008a58 	.word	0x08008a58
 8004ea8:	0800880c 	.word	0x0800880c
 8004eac:	7ff00000 	.word	0x7ff00000
 8004eb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004eb2:	1c51      	adds	r1, r2, #1
 8004eb4:	9117      	str	r1, [sp, #92]	; 0x5c
 8004eb6:	7852      	ldrb	r2, [r2, #1]
 8004eb8:	2a30      	cmp	r2, #48	; 0x30
 8004eba:	d0f9      	beq.n	8004eb0 <_strtod_l+0x2a8>
 8004ebc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004ec0:	2908      	cmp	r1, #8
 8004ec2:	f63f af79 	bhi.w	8004db8 <_strtod_l+0x1b0>
 8004ec6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004eca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ecc:	9206      	str	r2, [sp, #24]
 8004ece:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ed0:	1c51      	adds	r1, r2, #1
 8004ed2:	9117      	str	r1, [sp, #92]	; 0x5c
 8004ed4:	7852      	ldrb	r2, [r2, #1]
 8004ed6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004eda:	2e09      	cmp	r6, #9
 8004edc:	d937      	bls.n	8004f4e <_strtod_l+0x346>
 8004ede:	9e06      	ldr	r6, [sp, #24]
 8004ee0:	1b89      	subs	r1, r1, r6
 8004ee2:	2908      	cmp	r1, #8
 8004ee4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004ee8:	dc02      	bgt.n	8004ef0 <_strtod_l+0x2e8>
 8004eea:	4576      	cmp	r6, lr
 8004eec:	bfa8      	it	ge
 8004eee:	4676      	movge	r6, lr
 8004ef0:	f1bc 0f00 	cmp.w	ip, #0
 8004ef4:	d000      	beq.n	8004ef8 <_strtod_l+0x2f0>
 8004ef6:	4276      	negs	r6, r6
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	d14d      	bne.n	8004f98 <_strtod_l+0x390>
 8004efc:	9904      	ldr	r1, [sp, #16]
 8004efe:	4301      	orrs	r1, r0
 8004f00:	f47f aec6 	bne.w	8004c90 <_strtod_l+0x88>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f aee1 	bne.w	8004ccc <_strtod_l+0xc4>
 8004f0a:	2a69      	cmp	r2, #105	; 0x69
 8004f0c:	d027      	beq.n	8004f5e <_strtod_l+0x356>
 8004f0e:	dc24      	bgt.n	8004f5a <_strtod_l+0x352>
 8004f10:	2a49      	cmp	r2, #73	; 0x49
 8004f12:	d024      	beq.n	8004f5e <_strtod_l+0x356>
 8004f14:	2a4e      	cmp	r2, #78	; 0x4e
 8004f16:	f47f aed9 	bne.w	8004ccc <_strtod_l+0xc4>
 8004f1a:	499f      	ldr	r1, [pc, #636]	; (8005198 <_strtod_l+0x590>)
 8004f1c:	a817      	add	r0, sp, #92	; 0x5c
 8004f1e:	f001 fe3d 	bl	8006b9c <__match>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f43f aed2 	beq.w	8004ccc <_strtod_l+0xc4>
 8004f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b28      	cmp	r3, #40	; 0x28
 8004f2e:	d12d      	bne.n	8004f8c <_strtod_l+0x384>
 8004f30:	499a      	ldr	r1, [pc, #616]	; (800519c <_strtod_l+0x594>)
 8004f32:	aa1a      	add	r2, sp, #104	; 0x68
 8004f34:	a817      	add	r0, sp, #92	; 0x5c
 8004f36:	f001 fe45 	bl	8006bc4 <__hexnan>
 8004f3a:	2805      	cmp	r0, #5
 8004f3c:	d126      	bne.n	8004f8c <_strtod_l+0x384>
 8004f3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004f44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004f48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004f4c:	e6a0      	b.n	8004c90 <_strtod_l+0x88>
 8004f4e:	210a      	movs	r1, #10
 8004f50:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004f54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004f58:	e7b9      	b.n	8004ece <_strtod_l+0x2c6>
 8004f5a:	2a6e      	cmp	r2, #110	; 0x6e
 8004f5c:	e7db      	b.n	8004f16 <_strtod_l+0x30e>
 8004f5e:	4990      	ldr	r1, [pc, #576]	; (80051a0 <_strtod_l+0x598>)
 8004f60:	a817      	add	r0, sp, #92	; 0x5c
 8004f62:	f001 fe1b 	bl	8006b9c <__match>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f43f aeb0 	beq.w	8004ccc <_strtod_l+0xc4>
 8004f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f6e:	498d      	ldr	r1, [pc, #564]	; (80051a4 <_strtod_l+0x59c>)
 8004f70:	3b01      	subs	r3, #1
 8004f72:	a817      	add	r0, sp, #92	; 0x5c
 8004f74:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f76:	f001 fe11 	bl	8006b9c <__match>
 8004f7a:	b910      	cbnz	r0, 8004f82 <_strtod_l+0x37a>
 8004f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f7e:	3301      	adds	r3, #1
 8004f80:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f82:	f8df b230 	ldr.w	fp, [pc, #560]	; 80051b4 <_strtod_l+0x5ac>
 8004f86:	f04f 0a00 	mov.w	sl, #0
 8004f8a:	e681      	b.n	8004c90 <_strtod_l+0x88>
 8004f8c:	4886      	ldr	r0, [pc, #536]	; (80051a8 <_strtod_l+0x5a0>)
 8004f8e:	f002 fdf7 	bl	8007b80 <nan>
 8004f92:	ec5b ab10 	vmov	sl, fp, d0
 8004f96:	e67b      	b.n	8004c90 <_strtod_l+0x88>
 8004f98:	9b05      	ldr	r3, [sp, #20]
 8004f9a:	9807      	ldr	r0, [sp, #28]
 8004f9c:	1af3      	subs	r3, r6, r3
 8004f9e:	2f00      	cmp	r7, #0
 8004fa0:	bf08      	it	eq
 8004fa2:	462f      	moveq	r7, r5
 8004fa4:	2d10      	cmp	r5, #16
 8004fa6:	9306      	str	r3, [sp, #24]
 8004fa8:	46a8      	mov	r8, r5
 8004faa:	bfa8      	it	ge
 8004fac:	f04f 0810 	movge.w	r8, #16
 8004fb0:	f7fb fac8 	bl	8000544 <__aeabi_ui2d>
 8004fb4:	2d09      	cmp	r5, #9
 8004fb6:	4682      	mov	sl, r0
 8004fb8:	468b      	mov	fp, r1
 8004fba:	dd13      	ble.n	8004fe4 <_strtod_l+0x3dc>
 8004fbc:	4b7b      	ldr	r3, [pc, #492]	; (80051ac <_strtod_l+0x5a4>)
 8004fbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004fc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004fc6:	f7fb fb37 	bl	8000638 <__aeabi_dmul>
 8004fca:	4682      	mov	sl, r0
 8004fcc:	4648      	mov	r0, r9
 8004fce:	468b      	mov	fp, r1
 8004fd0:	f7fb fab8 	bl	8000544 <__aeabi_ui2d>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4650      	mov	r0, sl
 8004fda:	4659      	mov	r1, fp
 8004fdc:	f7fb f976 	bl	80002cc <__adddf3>
 8004fe0:	4682      	mov	sl, r0
 8004fe2:	468b      	mov	fp, r1
 8004fe4:	2d0f      	cmp	r5, #15
 8004fe6:	dc38      	bgt.n	800505a <_strtod_l+0x452>
 8004fe8:	9b06      	ldr	r3, [sp, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f43f ae50 	beq.w	8004c90 <_strtod_l+0x88>
 8004ff0:	dd24      	ble.n	800503c <_strtod_l+0x434>
 8004ff2:	2b16      	cmp	r3, #22
 8004ff4:	dc0b      	bgt.n	800500e <_strtod_l+0x406>
 8004ff6:	496d      	ldr	r1, [pc, #436]	; (80051ac <_strtod_l+0x5a4>)
 8004ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005000:	4652      	mov	r2, sl
 8005002:	465b      	mov	r3, fp
 8005004:	f7fb fb18 	bl	8000638 <__aeabi_dmul>
 8005008:	4682      	mov	sl, r0
 800500a:	468b      	mov	fp, r1
 800500c:	e640      	b.n	8004c90 <_strtod_l+0x88>
 800500e:	9a06      	ldr	r2, [sp, #24]
 8005010:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005014:	4293      	cmp	r3, r2
 8005016:	db20      	blt.n	800505a <_strtod_l+0x452>
 8005018:	4c64      	ldr	r4, [pc, #400]	; (80051ac <_strtod_l+0x5a4>)
 800501a:	f1c5 050f 	rsb	r5, r5, #15
 800501e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005022:	4652      	mov	r2, sl
 8005024:	465b      	mov	r3, fp
 8005026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800502a:	f7fb fb05 	bl	8000638 <__aeabi_dmul>
 800502e:	9b06      	ldr	r3, [sp, #24]
 8005030:	1b5d      	subs	r5, r3, r5
 8005032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800503a:	e7e3      	b.n	8005004 <_strtod_l+0x3fc>
 800503c:	9b06      	ldr	r3, [sp, #24]
 800503e:	3316      	adds	r3, #22
 8005040:	db0b      	blt.n	800505a <_strtod_l+0x452>
 8005042:	9b05      	ldr	r3, [sp, #20]
 8005044:	1b9e      	subs	r6, r3, r6
 8005046:	4b59      	ldr	r3, [pc, #356]	; (80051ac <_strtod_l+0x5a4>)
 8005048:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800504c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb fc1a 	bl	800088c <__aeabi_ddiv>
 8005058:	e7d6      	b.n	8005008 <_strtod_l+0x400>
 800505a:	9b06      	ldr	r3, [sp, #24]
 800505c:	eba5 0808 	sub.w	r8, r5, r8
 8005060:	4498      	add	r8, r3
 8005062:	f1b8 0f00 	cmp.w	r8, #0
 8005066:	dd74      	ble.n	8005152 <_strtod_l+0x54a>
 8005068:	f018 030f 	ands.w	r3, r8, #15
 800506c:	d00a      	beq.n	8005084 <_strtod_l+0x47c>
 800506e:	494f      	ldr	r1, [pc, #316]	; (80051ac <_strtod_l+0x5a4>)
 8005070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005074:	4652      	mov	r2, sl
 8005076:	465b      	mov	r3, fp
 8005078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800507c:	f7fb fadc 	bl	8000638 <__aeabi_dmul>
 8005080:	4682      	mov	sl, r0
 8005082:	468b      	mov	fp, r1
 8005084:	f038 080f 	bics.w	r8, r8, #15
 8005088:	d04f      	beq.n	800512a <_strtod_l+0x522>
 800508a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800508e:	dd22      	ble.n	80050d6 <_strtod_l+0x4ce>
 8005090:	2500      	movs	r5, #0
 8005092:	462e      	mov	r6, r5
 8005094:	9507      	str	r5, [sp, #28]
 8005096:	9505      	str	r5, [sp, #20]
 8005098:	2322      	movs	r3, #34	; 0x22
 800509a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80051b4 <_strtod_l+0x5ac>
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	f04f 0a00 	mov.w	sl, #0
 80050a4:	9b07      	ldr	r3, [sp, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f43f adf2 	beq.w	8004c90 <_strtod_l+0x88>
 80050ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050ae:	4620      	mov	r0, r4
 80050b0:	f001 fe90 	bl	8006dd4 <_Bfree>
 80050b4:	9905      	ldr	r1, [sp, #20]
 80050b6:	4620      	mov	r0, r4
 80050b8:	f001 fe8c 	bl	8006dd4 <_Bfree>
 80050bc:	4631      	mov	r1, r6
 80050be:	4620      	mov	r0, r4
 80050c0:	f001 fe88 	bl	8006dd4 <_Bfree>
 80050c4:	9907      	ldr	r1, [sp, #28]
 80050c6:	4620      	mov	r0, r4
 80050c8:	f001 fe84 	bl	8006dd4 <_Bfree>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4620      	mov	r0, r4
 80050d0:	f001 fe80 	bl	8006dd4 <_Bfree>
 80050d4:	e5dc      	b.n	8004c90 <_strtod_l+0x88>
 80050d6:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <_strtod_l+0x5a8>)
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	2300      	movs	r3, #0
 80050dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80050e0:	4650      	mov	r0, sl
 80050e2:	4659      	mov	r1, fp
 80050e4:	4699      	mov	r9, r3
 80050e6:	f1b8 0f01 	cmp.w	r8, #1
 80050ea:	dc21      	bgt.n	8005130 <_strtod_l+0x528>
 80050ec:	b10b      	cbz	r3, 80050f2 <_strtod_l+0x4ea>
 80050ee:	4682      	mov	sl, r0
 80050f0:	468b      	mov	fp, r1
 80050f2:	4b2f      	ldr	r3, [pc, #188]	; (80051b0 <_strtod_l+0x5a8>)
 80050f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80050f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80050fc:	4652      	mov	r2, sl
 80050fe:	465b      	mov	r3, fp
 8005100:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005104:	f7fb fa98 	bl	8000638 <__aeabi_dmul>
 8005108:	4b2a      	ldr	r3, [pc, #168]	; (80051b4 <_strtod_l+0x5ac>)
 800510a:	460a      	mov	r2, r1
 800510c:	400b      	ands	r3, r1
 800510e:	492a      	ldr	r1, [pc, #168]	; (80051b8 <_strtod_l+0x5b0>)
 8005110:	428b      	cmp	r3, r1
 8005112:	4682      	mov	sl, r0
 8005114:	d8bc      	bhi.n	8005090 <_strtod_l+0x488>
 8005116:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800511a:	428b      	cmp	r3, r1
 800511c:	bf86      	itte	hi
 800511e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80051bc <_strtod_l+0x5b4>
 8005122:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005126:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800512a:	2300      	movs	r3, #0
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	e084      	b.n	800523a <_strtod_l+0x632>
 8005130:	f018 0f01 	tst.w	r8, #1
 8005134:	d005      	beq.n	8005142 <_strtod_l+0x53a>
 8005136:	9b04      	ldr	r3, [sp, #16]
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb fa7c 	bl	8000638 <__aeabi_dmul>
 8005140:	2301      	movs	r3, #1
 8005142:	9a04      	ldr	r2, [sp, #16]
 8005144:	3208      	adds	r2, #8
 8005146:	f109 0901 	add.w	r9, r9, #1
 800514a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800514e:	9204      	str	r2, [sp, #16]
 8005150:	e7c9      	b.n	80050e6 <_strtod_l+0x4de>
 8005152:	d0ea      	beq.n	800512a <_strtod_l+0x522>
 8005154:	f1c8 0800 	rsb	r8, r8, #0
 8005158:	f018 020f 	ands.w	r2, r8, #15
 800515c:	d00a      	beq.n	8005174 <_strtod_l+0x56c>
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <_strtod_l+0x5a4>)
 8005160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005164:	4650      	mov	r0, sl
 8005166:	4659      	mov	r1, fp
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f7fb fb8e 	bl	800088c <__aeabi_ddiv>
 8005170:	4682      	mov	sl, r0
 8005172:	468b      	mov	fp, r1
 8005174:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005178:	d0d7      	beq.n	800512a <_strtod_l+0x522>
 800517a:	f1b8 0f1f 	cmp.w	r8, #31
 800517e:	dd1f      	ble.n	80051c0 <_strtod_l+0x5b8>
 8005180:	2500      	movs	r5, #0
 8005182:	462e      	mov	r6, r5
 8005184:	9507      	str	r5, [sp, #28]
 8005186:	9505      	str	r5, [sp, #20]
 8005188:	2322      	movs	r3, #34	; 0x22
 800518a:	f04f 0a00 	mov.w	sl, #0
 800518e:	f04f 0b00 	mov.w	fp, #0
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	e786      	b.n	80050a4 <_strtod_l+0x49c>
 8005196:	bf00      	nop
 8005198:	080087dd 	.word	0x080087dd
 800519c:	08008820 	.word	0x08008820
 80051a0:	080087d5 	.word	0x080087d5
 80051a4:	08008964 	.word	0x08008964
 80051a8:	08008c10 	.word	0x08008c10
 80051ac:	08008af0 	.word	0x08008af0
 80051b0:	08008ac8 	.word	0x08008ac8
 80051b4:	7ff00000 	.word	0x7ff00000
 80051b8:	7ca00000 	.word	0x7ca00000
 80051bc:	7fefffff 	.word	0x7fefffff
 80051c0:	f018 0310 	ands.w	r3, r8, #16
 80051c4:	bf18      	it	ne
 80051c6:	236a      	movne	r3, #106	; 0x6a
 80051c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005578 <_strtod_l+0x970>
 80051cc:	9304      	str	r3, [sp, #16]
 80051ce:	4650      	mov	r0, sl
 80051d0:	4659      	mov	r1, fp
 80051d2:	2300      	movs	r3, #0
 80051d4:	f018 0f01 	tst.w	r8, #1
 80051d8:	d004      	beq.n	80051e4 <_strtod_l+0x5dc>
 80051da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80051de:	f7fb fa2b 	bl	8000638 <__aeabi_dmul>
 80051e2:	2301      	movs	r3, #1
 80051e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80051e8:	f109 0908 	add.w	r9, r9, #8
 80051ec:	d1f2      	bne.n	80051d4 <_strtod_l+0x5cc>
 80051ee:	b10b      	cbz	r3, 80051f4 <_strtod_l+0x5ec>
 80051f0:	4682      	mov	sl, r0
 80051f2:	468b      	mov	fp, r1
 80051f4:	9b04      	ldr	r3, [sp, #16]
 80051f6:	b1c3      	cbz	r3, 800522a <_strtod_l+0x622>
 80051f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80051fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005200:	2b00      	cmp	r3, #0
 8005202:	4659      	mov	r1, fp
 8005204:	dd11      	ble.n	800522a <_strtod_l+0x622>
 8005206:	2b1f      	cmp	r3, #31
 8005208:	f340 8124 	ble.w	8005454 <_strtod_l+0x84c>
 800520c:	2b34      	cmp	r3, #52	; 0x34
 800520e:	bfde      	ittt	le
 8005210:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005214:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005218:	fa03 f202 	lslle.w	r2, r3, r2
 800521c:	f04f 0a00 	mov.w	sl, #0
 8005220:	bfcc      	ite	gt
 8005222:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005226:	ea02 0b01 	andle.w	fp, r2, r1
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4650      	mov	r0, sl
 8005230:	4659      	mov	r1, fp
 8005232:	f7fb fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8005236:	2800      	cmp	r0, #0
 8005238:	d1a2      	bne.n	8005180 <_strtod_l+0x578>
 800523a:	9b07      	ldr	r3, [sp, #28]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	9908      	ldr	r1, [sp, #32]
 8005240:	462b      	mov	r3, r5
 8005242:	463a      	mov	r2, r7
 8005244:	4620      	mov	r0, r4
 8005246:	f001 fe2d 	bl	8006ea4 <__s2b>
 800524a:	9007      	str	r0, [sp, #28]
 800524c:	2800      	cmp	r0, #0
 800524e:	f43f af1f 	beq.w	8005090 <_strtod_l+0x488>
 8005252:	9b05      	ldr	r3, [sp, #20]
 8005254:	1b9e      	subs	r6, r3, r6
 8005256:	9b06      	ldr	r3, [sp, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	bfb4      	ite	lt
 800525c:	4633      	movlt	r3, r6
 800525e:	2300      	movge	r3, #0
 8005260:	930c      	str	r3, [sp, #48]	; 0x30
 8005262:	9b06      	ldr	r3, [sp, #24]
 8005264:	2500      	movs	r5, #0
 8005266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800526a:	9312      	str	r3, [sp, #72]	; 0x48
 800526c:	462e      	mov	r6, r5
 800526e:	9b07      	ldr	r3, [sp, #28]
 8005270:	4620      	mov	r0, r4
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	f001 fd6e 	bl	8006d54 <_Balloc>
 8005278:	9005      	str	r0, [sp, #20]
 800527a:	2800      	cmp	r0, #0
 800527c:	f43f af0c 	beq.w	8005098 <_strtod_l+0x490>
 8005280:	9b07      	ldr	r3, [sp, #28]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	3202      	adds	r2, #2
 8005286:	f103 010c 	add.w	r1, r3, #12
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	300c      	adds	r0, #12
 800528e:	f001 fd53 	bl	8006d38 <memcpy>
 8005292:	ec4b ab10 	vmov	d0, sl, fp
 8005296:	aa1a      	add	r2, sp, #104	; 0x68
 8005298:	a919      	add	r1, sp, #100	; 0x64
 800529a:	4620      	mov	r0, r4
 800529c:	f002 f948 	bl	8007530 <__d2b>
 80052a0:	ec4b ab18 	vmov	d8, sl, fp
 80052a4:	9018      	str	r0, [sp, #96]	; 0x60
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f43f aef6 	beq.w	8005098 <_strtod_l+0x490>
 80052ac:	2101      	movs	r1, #1
 80052ae:	4620      	mov	r0, r4
 80052b0:	f001 fe92 	bl	8006fd8 <__i2b>
 80052b4:	4606      	mov	r6, r0
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f43f aeee 	beq.w	8005098 <_strtod_l+0x490>
 80052bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052be:	9904      	ldr	r1, [sp, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bfab      	itete	ge
 80052c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80052c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80052c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80052ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80052ce:	bfac      	ite	ge
 80052d0:	eb03 0902 	addge.w	r9, r3, r2
 80052d4:	1ad7      	sublt	r7, r2, r3
 80052d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80052d8:	eba3 0801 	sub.w	r8, r3, r1
 80052dc:	4490      	add	r8, r2
 80052de:	4ba1      	ldr	r3, [pc, #644]	; (8005564 <_strtod_l+0x95c>)
 80052e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80052e4:	4598      	cmp	r8, r3
 80052e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80052ea:	f280 80c7 	bge.w	800547c <_strtod_l+0x874>
 80052ee:	eba3 0308 	sub.w	r3, r3, r8
 80052f2:	2b1f      	cmp	r3, #31
 80052f4:	eba2 0203 	sub.w	r2, r2, r3
 80052f8:	f04f 0101 	mov.w	r1, #1
 80052fc:	f300 80b1 	bgt.w	8005462 <_strtod_l+0x85a>
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	930d      	str	r3, [sp, #52]	; 0x34
 8005306:	2300      	movs	r3, #0
 8005308:	9308      	str	r3, [sp, #32]
 800530a:	eb09 0802 	add.w	r8, r9, r2
 800530e:	9b04      	ldr	r3, [sp, #16]
 8005310:	45c1      	cmp	r9, r8
 8005312:	4417      	add	r7, r2
 8005314:	441f      	add	r7, r3
 8005316:	464b      	mov	r3, r9
 8005318:	bfa8      	it	ge
 800531a:	4643      	movge	r3, r8
 800531c:	42bb      	cmp	r3, r7
 800531e:	bfa8      	it	ge
 8005320:	463b      	movge	r3, r7
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfc2      	ittt	gt
 8005326:	eba8 0803 	subgt.w	r8, r8, r3
 800532a:	1aff      	subgt	r7, r7, r3
 800532c:	eba9 0903 	subgt.w	r9, r9, r3
 8005330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005332:	2b00      	cmp	r3, #0
 8005334:	dd17      	ble.n	8005366 <_strtod_l+0x75e>
 8005336:	4631      	mov	r1, r6
 8005338:	461a      	mov	r2, r3
 800533a:	4620      	mov	r0, r4
 800533c:	f001 ff0c 	bl	8007158 <__pow5mult>
 8005340:	4606      	mov	r6, r0
 8005342:	2800      	cmp	r0, #0
 8005344:	f43f aea8 	beq.w	8005098 <_strtod_l+0x490>
 8005348:	4601      	mov	r1, r0
 800534a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800534c:	4620      	mov	r0, r4
 800534e:	f001 fe59 	bl	8007004 <__multiply>
 8005352:	900b      	str	r0, [sp, #44]	; 0x2c
 8005354:	2800      	cmp	r0, #0
 8005356:	f43f ae9f 	beq.w	8005098 <_strtod_l+0x490>
 800535a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800535c:	4620      	mov	r0, r4
 800535e:	f001 fd39 	bl	8006dd4 <_Bfree>
 8005362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005364:	9318      	str	r3, [sp, #96]	; 0x60
 8005366:	f1b8 0f00 	cmp.w	r8, #0
 800536a:	f300 808c 	bgt.w	8005486 <_strtod_l+0x87e>
 800536e:	9b06      	ldr	r3, [sp, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	dd08      	ble.n	8005386 <_strtod_l+0x77e>
 8005374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005376:	9905      	ldr	r1, [sp, #20]
 8005378:	4620      	mov	r0, r4
 800537a:	f001 feed 	bl	8007158 <__pow5mult>
 800537e:	9005      	str	r0, [sp, #20]
 8005380:	2800      	cmp	r0, #0
 8005382:	f43f ae89 	beq.w	8005098 <_strtod_l+0x490>
 8005386:	2f00      	cmp	r7, #0
 8005388:	dd08      	ble.n	800539c <_strtod_l+0x794>
 800538a:	9905      	ldr	r1, [sp, #20]
 800538c:	463a      	mov	r2, r7
 800538e:	4620      	mov	r0, r4
 8005390:	f001 ff3c 	bl	800720c <__lshift>
 8005394:	9005      	str	r0, [sp, #20]
 8005396:	2800      	cmp	r0, #0
 8005398:	f43f ae7e 	beq.w	8005098 <_strtod_l+0x490>
 800539c:	f1b9 0f00 	cmp.w	r9, #0
 80053a0:	dd08      	ble.n	80053b4 <_strtod_l+0x7ac>
 80053a2:	4631      	mov	r1, r6
 80053a4:	464a      	mov	r2, r9
 80053a6:	4620      	mov	r0, r4
 80053a8:	f001 ff30 	bl	800720c <__lshift>
 80053ac:	4606      	mov	r6, r0
 80053ae:	2800      	cmp	r0, #0
 80053b0:	f43f ae72 	beq.w	8005098 <_strtod_l+0x490>
 80053b4:	9a05      	ldr	r2, [sp, #20]
 80053b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80053b8:	4620      	mov	r0, r4
 80053ba:	f001 ffb3 	bl	8007324 <__mdiff>
 80053be:	4605      	mov	r5, r0
 80053c0:	2800      	cmp	r0, #0
 80053c2:	f43f ae69 	beq.w	8005098 <_strtod_l+0x490>
 80053c6:	68c3      	ldr	r3, [r0, #12]
 80053c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ca:	2300      	movs	r3, #0
 80053cc:	60c3      	str	r3, [r0, #12]
 80053ce:	4631      	mov	r1, r6
 80053d0:	f001 ff8c 	bl	80072ec <__mcmp>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	da60      	bge.n	800549a <_strtod_l+0x892>
 80053d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053da:	ea53 030a 	orrs.w	r3, r3, sl
 80053de:	f040 8082 	bne.w	80054e6 <_strtod_l+0x8de>
 80053e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d17d      	bne.n	80054e6 <_strtod_l+0x8de>
 80053ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053ee:	0d1b      	lsrs	r3, r3, #20
 80053f0:	051b      	lsls	r3, r3, #20
 80053f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80053f6:	d976      	bls.n	80054e6 <_strtod_l+0x8de>
 80053f8:	696b      	ldr	r3, [r5, #20]
 80053fa:	b913      	cbnz	r3, 8005402 <_strtod_l+0x7fa>
 80053fc:	692b      	ldr	r3, [r5, #16]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	dd71      	ble.n	80054e6 <_strtod_l+0x8de>
 8005402:	4629      	mov	r1, r5
 8005404:	2201      	movs	r2, #1
 8005406:	4620      	mov	r0, r4
 8005408:	f001 ff00 	bl	800720c <__lshift>
 800540c:	4631      	mov	r1, r6
 800540e:	4605      	mov	r5, r0
 8005410:	f001 ff6c 	bl	80072ec <__mcmp>
 8005414:	2800      	cmp	r0, #0
 8005416:	dd66      	ble.n	80054e6 <_strtod_l+0x8de>
 8005418:	9904      	ldr	r1, [sp, #16]
 800541a:	4a53      	ldr	r2, [pc, #332]	; (8005568 <_strtod_l+0x960>)
 800541c:	465b      	mov	r3, fp
 800541e:	2900      	cmp	r1, #0
 8005420:	f000 8081 	beq.w	8005526 <_strtod_l+0x91e>
 8005424:	ea02 010b 	and.w	r1, r2, fp
 8005428:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800542c:	dc7b      	bgt.n	8005526 <_strtod_l+0x91e>
 800542e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005432:	f77f aea9 	ble.w	8005188 <_strtod_l+0x580>
 8005436:	4b4d      	ldr	r3, [pc, #308]	; (800556c <_strtod_l+0x964>)
 8005438:	4650      	mov	r0, sl
 800543a:	4659      	mov	r1, fp
 800543c:	2200      	movs	r2, #0
 800543e:	f7fb f8fb 	bl	8000638 <__aeabi_dmul>
 8005442:	460b      	mov	r3, r1
 8005444:	4303      	orrs	r3, r0
 8005446:	bf08      	it	eq
 8005448:	2322      	moveq	r3, #34	; 0x22
 800544a:	4682      	mov	sl, r0
 800544c:	468b      	mov	fp, r1
 800544e:	bf08      	it	eq
 8005450:	6023      	streq	r3, [r4, #0]
 8005452:	e62b      	b.n	80050ac <_strtod_l+0x4a4>
 8005454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	ea03 0a0a 	and.w	sl, r3, sl
 8005460:	e6e3      	b.n	800522a <_strtod_l+0x622>
 8005462:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005466:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800546a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800546e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005472:	fa01 f308 	lsl.w	r3, r1, r8
 8005476:	9308      	str	r3, [sp, #32]
 8005478:	910d      	str	r1, [sp, #52]	; 0x34
 800547a:	e746      	b.n	800530a <_strtod_l+0x702>
 800547c:	2300      	movs	r3, #0
 800547e:	9308      	str	r3, [sp, #32]
 8005480:	2301      	movs	r3, #1
 8005482:	930d      	str	r3, [sp, #52]	; 0x34
 8005484:	e741      	b.n	800530a <_strtod_l+0x702>
 8005486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005488:	4642      	mov	r2, r8
 800548a:	4620      	mov	r0, r4
 800548c:	f001 febe 	bl	800720c <__lshift>
 8005490:	9018      	str	r0, [sp, #96]	; 0x60
 8005492:	2800      	cmp	r0, #0
 8005494:	f47f af6b 	bne.w	800536e <_strtod_l+0x766>
 8005498:	e5fe      	b.n	8005098 <_strtod_l+0x490>
 800549a:	465f      	mov	r7, fp
 800549c:	d16e      	bne.n	800557c <_strtod_l+0x974>
 800549e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054a4:	b342      	cbz	r2, 80054f8 <_strtod_l+0x8f0>
 80054a6:	4a32      	ldr	r2, [pc, #200]	; (8005570 <_strtod_l+0x968>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d128      	bne.n	80054fe <_strtod_l+0x8f6>
 80054ac:	9b04      	ldr	r3, [sp, #16]
 80054ae:	4651      	mov	r1, sl
 80054b0:	b1eb      	cbz	r3, 80054ee <_strtod_l+0x8e6>
 80054b2:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <_strtod_l+0x960>)
 80054b4:	403b      	ands	r3, r7
 80054b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054be:	d819      	bhi.n	80054f4 <_strtod_l+0x8ec>
 80054c0:	0d1b      	lsrs	r3, r3, #20
 80054c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	4299      	cmp	r1, r3
 80054cc:	d117      	bne.n	80054fe <_strtod_l+0x8f6>
 80054ce:	4b29      	ldr	r3, [pc, #164]	; (8005574 <_strtod_l+0x96c>)
 80054d0:	429f      	cmp	r7, r3
 80054d2:	d102      	bne.n	80054da <_strtod_l+0x8d2>
 80054d4:	3101      	adds	r1, #1
 80054d6:	f43f addf 	beq.w	8005098 <_strtod_l+0x490>
 80054da:	4b23      	ldr	r3, [pc, #140]	; (8005568 <_strtod_l+0x960>)
 80054dc:	403b      	ands	r3, r7
 80054de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80054e2:	f04f 0a00 	mov.w	sl, #0
 80054e6:	9b04      	ldr	r3, [sp, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1a4      	bne.n	8005436 <_strtod_l+0x82e>
 80054ec:	e5de      	b.n	80050ac <_strtod_l+0x4a4>
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f2:	e7ea      	b.n	80054ca <_strtod_l+0x8c2>
 80054f4:	4613      	mov	r3, r2
 80054f6:	e7e8      	b.n	80054ca <_strtod_l+0x8c2>
 80054f8:	ea53 030a 	orrs.w	r3, r3, sl
 80054fc:	d08c      	beq.n	8005418 <_strtod_l+0x810>
 80054fe:	9b08      	ldr	r3, [sp, #32]
 8005500:	b1db      	cbz	r3, 800553a <_strtod_l+0x932>
 8005502:	423b      	tst	r3, r7
 8005504:	d0ef      	beq.n	80054e6 <_strtod_l+0x8de>
 8005506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005508:	9a04      	ldr	r2, [sp, #16]
 800550a:	4650      	mov	r0, sl
 800550c:	4659      	mov	r1, fp
 800550e:	b1c3      	cbz	r3, 8005542 <_strtod_l+0x93a>
 8005510:	f7ff fb5c 	bl	8004bcc <sulp>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	ec51 0b18 	vmov	r0, r1, d8
 800551c:	f7fa fed6 	bl	80002cc <__adddf3>
 8005520:	4682      	mov	sl, r0
 8005522:	468b      	mov	fp, r1
 8005524:	e7df      	b.n	80054e6 <_strtod_l+0x8de>
 8005526:	4013      	ands	r3, r2
 8005528:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800552c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005530:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005534:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005538:	e7d5      	b.n	80054e6 <_strtod_l+0x8de>
 800553a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800553c:	ea13 0f0a 	tst.w	r3, sl
 8005540:	e7e0      	b.n	8005504 <_strtod_l+0x8fc>
 8005542:	f7ff fb43 	bl	8004bcc <sulp>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	ec51 0b18 	vmov	r0, r1, d8
 800554e:	f7fa febb 	bl	80002c8 <__aeabi_dsub>
 8005552:	2200      	movs	r2, #0
 8005554:	2300      	movs	r3, #0
 8005556:	4682      	mov	sl, r0
 8005558:	468b      	mov	fp, r1
 800555a:	f7fb fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800555e:	2800      	cmp	r0, #0
 8005560:	d0c1      	beq.n	80054e6 <_strtod_l+0x8de>
 8005562:	e611      	b.n	8005188 <_strtod_l+0x580>
 8005564:	fffffc02 	.word	0xfffffc02
 8005568:	7ff00000 	.word	0x7ff00000
 800556c:	39500000 	.word	0x39500000
 8005570:	000fffff 	.word	0x000fffff
 8005574:	7fefffff 	.word	0x7fefffff
 8005578:	08008838 	.word	0x08008838
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	f002 f832 	bl	80075e8 <__ratio>
 8005584:	ec59 8b10 	vmov	r8, r9, d0
 8005588:	ee10 0a10 	vmov	r0, s0
 800558c:	2200      	movs	r2, #0
 800558e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005592:	4649      	mov	r1, r9
 8005594:	f7fb facc 	bl	8000b30 <__aeabi_dcmple>
 8005598:	2800      	cmp	r0, #0
 800559a:	d07a      	beq.n	8005692 <_strtod_l+0xa8a>
 800559c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04a      	beq.n	8005638 <_strtod_l+0xa30>
 80055a2:	4b95      	ldr	r3, [pc, #596]	; (80057f8 <_strtod_l+0xbf0>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80055aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80057f8 <_strtod_l+0xbf0>
 80055ae:	f04f 0800 	mov.w	r8, #0
 80055b2:	4b92      	ldr	r3, [pc, #584]	; (80057fc <_strtod_l+0xbf4>)
 80055b4:	403b      	ands	r3, r7
 80055b6:	930d      	str	r3, [sp, #52]	; 0x34
 80055b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055ba:	4b91      	ldr	r3, [pc, #580]	; (8005800 <_strtod_l+0xbf8>)
 80055bc:	429a      	cmp	r2, r3
 80055be:	f040 80b0 	bne.w	8005722 <_strtod_l+0xb1a>
 80055c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80055ca:	ec4b ab10 	vmov	d0, sl, fp
 80055ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055d2:	f001 ff31 	bl	8007438 <__ulp>
 80055d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055da:	ec53 2b10 	vmov	r2, r3, d0
 80055de:	f7fb f82b 	bl	8000638 <__aeabi_dmul>
 80055e2:	4652      	mov	r2, sl
 80055e4:	465b      	mov	r3, fp
 80055e6:	f7fa fe71 	bl	80002cc <__adddf3>
 80055ea:	460b      	mov	r3, r1
 80055ec:	4983      	ldr	r1, [pc, #524]	; (80057fc <_strtod_l+0xbf4>)
 80055ee:	4a85      	ldr	r2, [pc, #532]	; (8005804 <_strtod_l+0xbfc>)
 80055f0:	4019      	ands	r1, r3
 80055f2:	4291      	cmp	r1, r2
 80055f4:	4682      	mov	sl, r0
 80055f6:	d960      	bls.n	80056ba <_strtod_l+0xab2>
 80055f8:	ee18 3a90 	vmov	r3, s17
 80055fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005600:	4293      	cmp	r3, r2
 8005602:	d104      	bne.n	800560e <_strtod_l+0xa06>
 8005604:	ee18 3a10 	vmov	r3, s16
 8005608:	3301      	adds	r3, #1
 800560a:	f43f ad45 	beq.w	8005098 <_strtod_l+0x490>
 800560e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005810 <_strtod_l+0xc08>
 8005612:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005616:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005618:	4620      	mov	r0, r4
 800561a:	f001 fbdb 	bl	8006dd4 <_Bfree>
 800561e:	9905      	ldr	r1, [sp, #20]
 8005620:	4620      	mov	r0, r4
 8005622:	f001 fbd7 	bl	8006dd4 <_Bfree>
 8005626:	4631      	mov	r1, r6
 8005628:	4620      	mov	r0, r4
 800562a:	f001 fbd3 	bl	8006dd4 <_Bfree>
 800562e:	4629      	mov	r1, r5
 8005630:	4620      	mov	r0, r4
 8005632:	f001 fbcf 	bl	8006dd4 <_Bfree>
 8005636:	e61a      	b.n	800526e <_strtod_l+0x666>
 8005638:	f1ba 0f00 	cmp.w	sl, #0
 800563c:	d11b      	bne.n	8005676 <_strtod_l+0xa6e>
 800563e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005642:	b9f3      	cbnz	r3, 8005682 <_strtod_l+0xa7a>
 8005644:	4b6c      	ldr	r3, [pc, #432]	; (80057f8 <_strtod_l+0xbf0>)
 8005646:	2200      	movs	r2, #0
 8005648:	4640      	mov	r0, r8
 800564a:	4649      	mov	r1, r9
 800564c:	f7fb fa66 	bl	8000b1c <__aeabi_dcmplt>
 8005650:	b9d0      	cbnz	r0, 8005688 <_strtod_l+0xa80>
 8005652:	4640      	mov	r0, r8
 8005654:	4649      	mov	r1, r9
 8005656:	4b6c      	ldr	r3, [pc, #432]	; (8005808 <_strtod_l+0xc00>)
 8005658:	2200      	movs	r2, #0
 800565a:	f7fa ffed 	bl	8000638 <__aeabi_dmul>
 800565e:	4680      	mov	r8, r0
 8005660:	4689      	mov	r9, r1
 8005662:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005666:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800566a:	9315      	str	r3, [sp, #84]	; 0x54
 800566c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005670:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005674:	e79d      	b.n	80055b2 <_strtod_l+0x9aa>
 8005676:	f1ba 0f01 	cmp.w	sl, #1
 800567a:	d102      	bne.n	8005682 <_strtod_l+0xa7a>
 800567c:	2f00      	cmp	r7, #0
 800567e:	f43f ad83 	beq.w	8005188 <_strtod_l+0x580>
 8005682:	4b62      	ldr	r3, [pc, #392]	; (800580c <_strtod_l+0xc04>)
 8005684:	2200      	movs	r2, #0
 8005686:	e78e      	b.n	80055a6 <_strtod_l+0x99e>
 8005688:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005808 <_strtod_l+0xc00>
 800568c:	f04f 0800 	mov.w	r8, #0
 8005690:	e7e7      	b.n	8005662 <_strtod_l+0xa5a>
 8005692:	4b5d      	ldr	r3, [pc, #372]	; (8005808 <_strtod_l+0xc00>)
 8005694:	4640      	mov	r0, r8
 8005696:	4649      	mov	r1, r9
 8005698:	2200      	movs	r2, #0
 800569a:	f7fa ffcd 	bl	8000638 <__aeabi_dmul>
 800569e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a0:	4680      	mov	r8, r0
 80056a2:	4689      	mov	r9, r1
 80056a4:	b933      	cbnz	r3, 80056b4 <_strtod_l+0xaac>
 80056a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056aa:	900e      	str	r0, [sp, #56]	; 0x38
 80056ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80056ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80056b2:	e7dd      	b.n	8005670 <_strtod_l+0xa68>
 80056b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80056b8:	e7f9      	b.n	80056ae <_strtod_l+0xaa6>
 80056ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80056be:	9b04      	ldr	r3, [sp, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1a8      	bne.n	8005616 <_strtod_l+0xa0e>
 80056c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056ca:	0d1b      	lsrs	r3, r3, #20
 80056cc:	051b      	lsls	r3, r3, #20
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d1a1      	bne.n	8005616 <_strtod_l+0xa0e>
 80056d2:	4640      	mov	r0, r8
 80056d4:	4649      	mov	r1, r9
 80056d6:	f7fb fb0f 	bl	8000cf8 <__aeabi_d2lz>
 80056da:	f7fa ff7f 	bl	80005dc <__aeabi_l2d>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4640      	mov	r0, r8
 80056e4:	4649      	mov	r1, r9
 80056e6:	f7fa fdef 	bl	80002c8 <__aeabi_dsub>
 80056ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056f0:	ea43 030a 	orr.w	r3, r3, sl
 80056f4:	4313      	orrs	r3, r2
 80056f6:	4680      	mov	r8, r0
 80056f8:	4689      	mov	r9, r1
 80056fa:	d055      	beq.n	80057a8 <_strtod_l+0xba0>
 80056fc:	a336      	add	r3, pc, #216	; (adr r3, 80057d8 <_strtod_l+0xbd0>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f7fb fa0b 	bl	8000b1c <__aeabi_dcmplt>
 8005706:	2800      	cmp	r0, #0
 8005708:	f47f acd0 	bne.w	80050ac <_strtod_l+0x4a4>
 800570c:	a334      	add	r3, pc, #208	; (adr r3, 80057e0 <_strtod_l+0xbd8>)
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f7fb fa1f 	bl	8000b58 <__aeabi_dcmpgt>
 800571a:	2800      	cmp	r0, #0
 800571c:	f43f af7b 	beq.w	8005616 <_strtod_l+0xa0e>
 8005720:	e4c4      	b.n	80050ac <_strtod_l+0x4a4>
 8005722:	9b04      	ldr	r3, [sp, #16]
 8005724:	b333      	cbz	r3, 8005774 <_strtod_l+0xb6c>
 8005726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005728:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800572c:	d822      	bhi.n	8005774 <_strtod_l+0xb6c>
 800572e:	a32e      	add	r3, pc, #184	; (adr r3, 80057e8 <_strtod_l+0xbe0>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	f7fb f9fa 	bl	8000b30 <__aeabi_dcmple>
 800573c:	b1a0      	cbz	r0, 8005768 <_strtod_l+0xb60>
 800573e:	4649      	mov	r1, r9
 8005740:	4640      	mov	r0, r8
 8005742:	f7fb fa51 	bl	8000be8 <__aeabi_d2uiz>
 8005746:	2801      	cmp	r0, #1
 8005748:	bf38      	it	cc
 800574a:	2001      	movcc	r0, #1
 800574c:	f7fa fefa 	bl	8000544 <__aeabi_ui2d>
 8005750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005752:	4680      	mov	r8, r0
 8005754:	4689      	mov	r9, r1
 8005756:	bb23      	cbnz	r3, 80057a2 <_strtod_l+0xb9a>
 8005758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800575c:	9010      	str	r0, [sp, #64]	; 0x40
 800575e:	9311      	str	r3, [sp, #68]	; 0x44
 8005760:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005764:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800576c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	9309      	str	r3, [sp, #36]	; 0x24
 8005774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005778:	eeb0 0a48 	vmov.f32	s0, s16
 800577c:	eef0 0a68 	vmov.f32	s1, s17
 8005780:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005784:	f001 fe58 	bl	8007438 <__ulp>
 8005788:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800578c:	ec53 2b10 	vmov	r2, r3, d0
 8005790:	f7fa ff52 	bl	8000638 <__aeabi_dmul>
 8005794:	ec53 2b18 	vmov	r2, r3, d8
 8005798:	f7fa fd98 	bl	80002cc <__adddf3>
 800579c:	4682      	mov	sl, r0
 800579e:	468b      	mov	fp, r1
 80057a0:	e78d      	b.n	80056be <_strtod_l+0xab6>
 80057a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80057a6:	e7db      	b.n	8005760 <_strtod_l+0xb58>
 80057a8:	a311      	add	r3, pc, #68	; (adr r3, 80057f0 <_strtod_l+0xbe8>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fb f9b5 	bl	8000b1c <__aeabi_dcmplt>
 80057b2:	e7b2      	b.n	800571a <_strtod_l+0xb12>
 80057b4:	2300      	movs	r3, #0
 80057b6:	930a      	str	r3, [sp, #40]	; 0x28
 80057b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	f7ff ba6b 	b.w	8004c98 <_strtod_l+0x90>
 80057c2:	2a65      	cmp	r2, #101	; 0x65
 80057c4:	f43f ab5f 	beq.w	8004e86 <_strtod_l+0x27e>
 80057c8:	2a45      	cmp	r2, #69	; 0x45
 80057ca:	f43f ab5c 	beq.w	8004e86 <_strtod_l+0x27e>
 80057ce:	2301      	movs	r3, #1
 80057d0:	f7ff bb94 	b.w	8004efc <_strtod_l+0x2f4>
 80057d4:	f3af 8000 	nop.w
 80057d8:	94a03595 	.word	0x94a03595
 80057dc:	3fdfffff 	.word	0x3fdfffff
 80057e0:	35afe535 	.word	0x35afe535
 80057e4:	3fe00000 	.word	0x3fe00000
 80057e8:	ffc00000 	.word	0xffc00000
 80057ec:	41dfffff 	.word	0x41dfffff
 80057f0:	94a03595 	.word	0x94a03595
 80057f4:	3fcfffff 	.word	0x3fcfffff
 80057f8:	3ff00000 	.word	0x3ff00000
 80057fc:	7ff00000 	.word	0x7ff00000
 8005800:	7fe00000 	.word	0x7fe00000
 8005804:	7c9fffff 	.word	0x7c9fffff
 8005808:	3fe00000 	.word	0x3fe00000
 800580c:	bff00000 	.word	0xbff00000
 8005810:	7fefffff 	.word	0x7fefffff

08005814 <_strtod_r>:
 8005814:	4b01      	ldr	r3, [pc, #4]	; (800581c <_strtod_r+0x8>)
 8005816:	f7ff b9f7 	b.w	8004c08 <_strtod_l>
 800581a:	bf00      	nop
 800581c:	20000078 	.word	0x20000078

08005820 <_strtol_l.constprop.0>:
 8005820:	2b01      	cmp	r3, #1
 8005822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005826:	d001      	beq.n	800582c <_strtol_l.constprop.0+0xc>
 8005828:	2b24      	cmp	r3, #36	; 0x24
 800582a:	d906      	bls.n	800583a <_strtol_l.constprop.0+0x1a>
 800582c:	f7fe fafc 	bl	8003e28 <__errno>
 8005830:	2316      	movs	r3, #22
 8005832:	6003      	str	r3, [r0, #0]
 8005834:	2000      	movs	r0, #0
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005920 <_strtol_l.constprop.0+0x100>
 800583e:	460d      	mov	r5, r1
 8005840:	462e      	mov	r6, r5
 8005842:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005846:	f814 700c 	ldrb.w	r7, [r4, ip]
 800584a:	f017 0708 	ands.w	r7, r7, #8
 800584e:	d1f7      	bne.n	8005840 <_strtol_l.constprop.0+0x20>
 8005850:	2c2d      	cmp	r4, #45	; 0x2d
 8005852:	d132      	bne.n	80058ba <_strtol_l.constprop.0+0x9a>
 8005854:	782c      	ldrb	r4, [r5, #0]
 8005856:	2701      	movs	r7, #1
 8005858:	1cb5      	adds	r5, r6, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d05b      	beq.n	8005916 <_strtol_l.constprop.0+0xf6>
 800585e:	2b10      	cmp	r3, #16
 8005860:	d109      	bne.n	8005876 <_strtol_l.constprop.0+0x56>
 8005862:	2c30      	cmp	r4, #48	; 0x30
 8005864:	d107      	bne.n	8005876 <_strtol_l.constprop.0+0x56>
 8005866:	782c      	ldrb	r4, [r5, #0]
 8005868:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800586c:	2c58      	cmp	r4, #88	; 0x58
 800586e:	d14d      	bne.n	800590c <_strtol_l.constprop.0+0xec>
 8005870:	786c      	ldrb	r4, [r5, #1]
 8005872:	2310      	movs	r3, #16
 8005874:	3502      	adds	r5, #2
 8005876:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800587a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800587e:	f04f 0c00 	mov.w	ip, #0
 8005882:	fbb8 f9f3 	udiv	r9, r8, r3
 8005886:	4666      	mov	r6, ip
 8005888:	fb03 8a19 	mls	sl, r3, r9, r8
 800588c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005890:	f1be 0f09 	cmp.w	lr, #9
 8005894:	d816      	bhi.n	80058c4 <_strtol_l.constprop.0+0xa4>
 8005896:	4674      	mov	r4, lr
 8005898:	42a3      	cmp	r3, r4
 800589a:	dd24      	ble.n	80058e6 <_strtol_l.constprop.0+0xc6>
 800589c:	f1bc 0f00 	cmp.w	ip, #0
 80058a0:	db1e      	blt.n	80058e0 <_strtol_l.constprop.0+0xc0>
 80058a2:	45b1      	cmp	r9, r6
 80058a4:	d31c      	bcc.n	80058e0 <_strtol_l.constprop.0+0xc0>
 80058a6:	d101      	bne.n	80058ac <_strtol_l.constprop.0+0x8c>
 80058a8:	45a2      	cmp	sl, r4
 80058aa:	db19      	blt.n	80058e0 <_strtol_l.constprop.0+0xc0>
 80058ac:	fb06 4603 	mla	r6, r6, r3, r4
 80058b0:	f04f 0c01 	mov.w	ip, #1
 80058b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058b8:	e7e8      	b.n	800588c <_strtol_l.constprop.0+0x6c>
 80058ba:	2c2b      	cmp	r4, #43	; 0x2b
 80058bc:	bf04      	itt	eq
 80058be:	782c      	ldrbeq	r4, [r5, #0]
 80058c0:	1cb5      	addeq	r5, r6, #2
 80058c2:	e7ca      	b.n	800585a <_strtol_l.constprop.0+0x3a>
 80058c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80058c8:	f1be 0f19 	cmp.w	lr, #25
 80058cc:	d801      	bhi.n	80058d2 <_strtol_l.constprop.0+0xb2>
 80058ce:	3c37      	subs	r4, #55	; 0x37
 80058d0:	e7e2      	b.n	8005898 <_strtol_l.constprop.0+0x78>
 80058d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80058d6:	f1be 0f19 	cmp.w	lr, #25
 80058da:	d804      	bhi.n	80058e6 <_strtol_l.constprop.0+0xc6>
 80058dc:	3c57      	subs	r4, #87	; 0x57
 80058de:	e7db      	b.n	8005898 <_strtol_l.constprop.0+0x78>
 80058e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80058e4:	e7e6      	b.n	80058b4 <_strtol_l.constprop.0+0x94>
 80058e6:	f1bc 0f00 	cmp.w	ip, #0
 80058ea:	da05      	bge.n	80058f8 <_strtol_l.constprop.0+0xd8>
 80058ec:	2322      	movs	r3, #34	; 0x22
 80058ee:	6003      	str	r3, [r0, #0]
 80058f0:	4646      	mov	r6, r8
 80058f2:	b942      	cbnz	r2, 8005906 <_strtol_l.constprop.0+0xe6>
 80058f4:	4630      	mov	r0, r6
 80058f6:	e79e      	b.n	8005836 <_strtol_l.constprop.0+0x16>
 80058f8:	b107      	cbz	r7, 80058fc <_strtol_l.constprop.0+0xdc>
 80058fa:	4276      	negs	r6, r6
 80058fc:	2a00      	cmp	r2, #0
 80058fe:	d0f9      	beq.n	80058f4 <_strtol_l.constprop.0+0xd4>
 8005900:	f1bc 0f00 	cmp.w	ip, #0
 8005904:	d000      	beq.n	8005908 <_strtol_l.constprop.0+0xe8>
 8005906:	1e69      	subs	r1, r5, #1
 8005908:	6011      	str	r1, [r2, #0]
 800590a:	e7f3      	b.n	80058f4 <_strtol_l.constprop.0+0xd4>
 800590c:	2430      	movs	r4, #48	; 0x30
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1b1      	bne.n	8005876 <_strtol_l.constprop.0+0x56>
 8005912:	2308      	movs	r3, #8
 8005914:	e7af      	b.n	8005876 <_strtol_l.constprop.0+0x56>
 8005916:	2c30      	cmp	r4, #48	; 0x30
 8005918:	d0a5      	beq.n	8005866 <_strtol_l.constprop.0+0x46>
 800591a:	230a      	movs	r3, #10
 800591c:	e7ab      	b.n	8005876 <_strtol_l.constprop.0+0x56>
 800591e:	bf00      	nop
 8005920:	08008861 	.word	0x08008861

08005924 <_strtol_r>:
 8005924:	f7ff bf7c 	b.w	8005820 <_strtol_l.constprop.0>

08005928 <quorem>:
 8005928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	6903      	ldr	r3, [r0, #16]
 800592e:	690c      	ldr	r4, [r1, #16]
 8005930:	42a3      	cmp	r3, r4
 8005932:	4607      	mov	r7, r0
 8005934:	f2c0 8081 	blt.w	8005a3a <quorem+0x112>
 8005938:	3c01      	subs	r4, #1
 800593a:	f101 0814 	add.w	r8, r1, #20
 800593e:	f100 0514 	add.w	r5, r0, #20
 8005942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800594c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005950:	3301      	adds	r3, #1
 8005952:	429a      	cmp	r2, r3
 8005954:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005958:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800595c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005960:	d331      	bcc.n	80059c6 <quorem+0x9e>
 8005962:	f04f 0e00 	mov.w	lr, #0
 8005966:	4640      	mov	r0, r8
 8005968:	46ac      	mov	ip, r5
 800596a:	46f2      	mov	sl, lr
 800596c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005970:	b293      	uxth	r3, r2
 8005972:	fb06 e303 	mla	r3, r6, r3, lr
 8005976:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800597a:	b29b      	uxth	r3, r3
 800597c:	ebaa 0303 	sub.w	r3, sl, r3
 8005980:	f8dc a000 	ldr.w	sl, [ip]
 8005984:	0c12      	lsrs	r2, r2, #16
 8005986:	fa13 f38a 	uxtah	r3, r3, sl
 800598a:	fb06 e202 	mla	r2, r6, r2, lr
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	9b00      	ldr	r3, [sp, #0]
 8005992:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005996:	b292      	uxth	r2, r2
 8005998:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800599c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80059a4:	4581      	cmp	r9, r0
 80059a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059aa:	f84c 3b04 	str.w	r3, [ip], #4
 80059ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059b2:	d2db      	bcs.n	800596c <quorem+0x44>
 80059b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80059b8:	b92b      	cbnz	r3, 80059c6 <quorem+0x9e>
 80059ba:	9b01      	ldr	r3, [sp, #4]
 80059bc:	3b04      	subs	r3, #4
 80059be:	429d      	cmp	r5, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	d32e      	bcc.n	8005a22 <quorem+0xfa>
 80059c4:	613c      	str	r4, [r7, #16]
 80059c6:	4638      	mov	r0, r7
 80059c8:	f001 fc90 	bl	80072ec <__mcmp>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	db24      	blt.n	8005a1a <quorem+0xf2>
 80059d0:	3601      	adds	r6, #1
 80059d2:	4628      	mov	r0, r5
 80059d4:	f04f 0c00 	mov.w	ip, #0
 80059d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80059dc:	f8d0 e000 	ldr.w	lr, [r0]
 80059e0:	b293      	uxth	r3, r2
 80059e2:	ebac 0303 	sub.w	r3, ip, r3
 80059e6:	0c12      	lsrs	r2, r2, #16
 80059e8:	fa13 f38e 	uxtah	r3, r3, lr
 80059ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059fa:	45c1      	cmp	r9, r8
 80059fc:	f840 3b04 	str.w	r3, [r0], #4
 8005a00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a04:	d2e8      	bcs.n	80059d8 <quorem+0xb0>
 8005a06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a0e:	b922      	cbnz	r2, 8005a1a <quorem+0xf2>
 8005a10:	3b04      	subs	r3, #4
 8005a12:	429d      	cmp	r5, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	d30a      	bcc.n	8005a2e <quorem+0x106>
 8005a18:	613c      	str	r4, [r7, #16]
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	b003      	add	sp, #12
 8005a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	3b04      	subs	r3, #4
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	d1cc      	bne.n	80059c4 <quorem+0x9c>
 8005a2a:	3c01      	subs	r4, #1
 8005a2c:	e7c7      	b.n	80059be <quorem+0x96>
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	d1f0      	bne.n	8005a18 <quorem+0xf0>
 8005a36:	3c01      	subs	r4, #1
 8005a38:	e7eb      	b.n	8005a12 <quorem+0xea>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e7ee      	b.n	8005a1c <quorem+0xf4>
	...

08005a40 <_dtoa_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	ed2d 8b04 	vpush	{d8-d9}
 8005a48:	ec57 6b10 	vmov	r6, r7, d0
 8005a4c:	b093      	sub	sp, #76	; 0x4c
 8005a4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a54:	9106      	str	r1, [sp, #24]
 8005a56:	ee10 aa10 	vmov	sl, s0
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a60:	46bb      	mov	fp, r7
 8005a62:	b975      	cbnz	r5, 8005a82 <_dtoa_r+0x42>
 8005a64:	2010      	movs	r0, #16
 8005a66:	f001 f94d 	bl	8006d04 <malloc>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	6260      	str	r0, [r4, #36]	; 0x24
 8005a6e:	b920      	cbnz	r0, 8005a7a <_dtoa_r+0x3a>
 8005a70:	4ba7      	ldr	r3, [pc, #668]	; (8005d10 <_dtoa_r+0x2d0>)
 8005a72:	21ea      	movs	r1, #234	; 0xea
 8005a74:	48a7      	ldr	r0, [pc, #668]	; (8005d14 <_dtoa_r+0x2d4>)
 8005a76:	f002 f8bd 	bl	8007bf4 <__assert_func>
 8005a7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a7e:	6005      	str	r5, [r0, #0]
 8005a80:	60c5      	str	r5, [r0, #12]
 8005a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	b151      	cbz	r1, 8005a9e <_dtoa_r+0x5e>
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	604a      	str	r2, [r1, #4]
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4093      	lsls	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
 8005a92:	4620      	mov	r0, r4
 8005a94:	f001 f99e 	bl	8006dd4 <_Bfree>
 8005a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	1e3b      	subs	r3, r7, #0
 8005aa0:	bfaa      	itet	ge
 8005aa2:	2300      	movge	r3, #0
 8005aa4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005aa8:	f8c8 3000 	strge.w	r3, [r8]
 8005aac:	4b9a      	ldr	r3, [pc, #616]	; (8005d18 <_dtoa_r+0x2d8>)
 8005aae:	bfbc      	itt	lt
 8005ab0:	2201      	movlt	r2, #1
 8005ab2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ab6:	ea33 030b 	bics.w	r3, r3, fp
 8005aba:	d11b      	bne.n	8005af4 <_dtoa_r+0xb4>
 8005abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005abe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ac8:	4333      	orrs	r3, r6
 8005aca:	f000 8592 	beq.w	80065f2 <_dtoa_r+0xbb2>
 8005ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ad0:	b963      	cbnz	r3, 8005aec <_dtoa_r+0xac>
 8005ad2:	4b92      	ldr	r3, [pc, #584]	; (8005d1c <_dtoa_r+0x2dc>)
 8005ad4:	e022      	b.n	8005b1c <_dtoa_r+0xdc>
 8005ad6:	4b92      	ldr	r3, [pc, #584]	; (8005d20 <_dtoa_r+0x2e0>)
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	3308      	adds	r3, #8
 8005adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	9801      	ldr	r0, [sp, #4]
 8005ae2:	b013      	add	sp, #76	; 0x4c
 8005ae4:	ecbd 8b04 	vpop	{d8-d9}
 8005ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aec:	4b8b      	ldr	r3, [pc, #556]	; (8005d1c <_dtoa_r+0x2dc>)
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	3303      	adds	r3, #3
 8005af2:	e7f3      	b.n	8005adc <_dtoa_r+0x9c>
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	4650      	mov	r0, sl
 8005afa:	4659      	mov	r1, fp
 8005afc:	f7fb f804 	bl	8000b08 <__aeabi_dcmpeq>
 8005b00:	ec4b ab19 	vmov	d9, sl, fp
 8005b04:	4680      	mov	r8, r0
 8005b06:	b158      	cbz	r0, 8005b20 <_dtoa_r+0xe0>
 8005b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 856b 	beq.w	80065ec <_dtoa_r+0xbac>
 8005b16:	4883      	ldr	r0, [pc, #524]	; (8005d24 <_dtoa_r+0x2e4>)
 8005b18:	6018      	str	r0, [r3, #0]
 8005b1a:	1e43      	subs	r3, r0, #1
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	e7df      	b.n	8005ae0 <_dtoa_r+0xa0>
 8005b20:	ec4b ab10 	vmov	d0, sl, fp
 8005b24:	aa10      	add	r2, sp, #64	; 0x40
 8005b26:	a911      	add	r1, sp, #68	; 0x44
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f001 fd01 	bl	8007530 <__d2b>
 8005b2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b32:	ee08 0a10 	vmov	s16, r0
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	f000 8084 	beq.w	8005c44 <_dtoa_r+0x204>
 8005b3c:	ee19 3a90 	vmov	r3, s19
 8005b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b48:	4656      	mov	r6, sl
 8005b4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b56:	4b74      	ldr	r3, [pc, #464]	; (8005d28 <_dtoa_r+0x2e8>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa fbb3 	bl	80002c8 <__aeabi_dsub>
 8005b62:	a365      	add	r3, pc, #404	; (adr r3, 8005cf8 <_dtoa_r+0x2b8>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fd66 	bl	8000638 <__aeabi_dmul>
 8005b6c:	a364      	add	r3, pc, #400	; (adr r3, 8005d00 <_dtoa_r+0x2c0>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f7fa fbab 	bl	80002cc <__adddf3>
 8005b76:	4606      	mov	r6, r0
 8005b78:	4628      	mov	r0, r5
 8005b7a:	460f      	mov	r7, r1
 8005b7c:	f7fa fcf2 	bl	8000564 <__aeabi_i2d>
 8005b80:	a361      	add	r3, pc, #388	; (adr r3, 8005d08 <_dtoa_r+0x2c8>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fd57 	bl	8000638 <__aeabi_dmul>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4630      	mov	r0, r6
 8005b90:	4639      	mov	r1, r7
 8005b92:	f7fa fb9b 	bl	80002cc <__adddf3>
 8005b96:	4606      	mov	r6, r0
 8005b98:	460f      	mov	r7, r1
 8005b9a:	f7fa fffd 	bl	8000b98 <__aeabi_d2iz>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	9000      	str	r0, [sp, #0]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	f7fa ffb8 	bl	8000b1c <__aeabi_dcmplt>
 8005bac:	b150      	cbz	r0, 8005bc4 <_dtoa_r+0x184>
 8005bae:	9800      	ldr	r0, [sp, #0]
 8005bb0:	f7fa fcd8 	bl	8000564 <__aeabi_i2d>
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	f7fa ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8005bbc:	b910      	cbnz	r0, 8005bc4 <_dtoa_r+0x184>
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	9b00      	ldr	r3, [sp, #0]
 8005bc6:	2b16      	cmp	r3, #22
 8005bc8:	d85a      	bhi.n	8005c80 <_dtoa_r+0x240>
 8005bca:	9a00      	ldr	r2, [sp, #0]
 8005bcc:	4b57      	ldr	r3, [pc, #348]	; (8005d2c <_dtoa_r+0x2ec>)
 8005bce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	ec51 0b19 	vmov	r0, r1, d9
 8005bda:	f7fa ff9f 	bl	8000b1c <__aeabi_dcmplt>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d050      	beq.n	8005c84 <_dtoa_r+0x244>
 8005be2:	9b00      	ldr	r3, [sp, #0]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	2300      	movs	r3, #0
 8005bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bee:	1b5d      	subs	r5, r3, r5
 8005bf0:	1e6b      	subs	r3, r5, #1
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	bf45      	ittet	mi
 8005bf6:	f1c5 0301 	rsbmi	r3, r5, #1
 8005bfa:	9304      	strmi	r3, [sp, #16]
 8005bfc:	2300      	movpl	r3, #0
 8005bfe:	2300      	movmi	r3, #0
 8005c00:	bf4c      	ite	mi
 8005c02:	9305      	strmi	r3, [sp, #20]
 8005c04:	9304      	strpl	r3, [sp, #16]
 8005c06:	9b00      	ldr	r3, [sp, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	db3d      	blt.n	8005c88 <_dtoa_r+0x248>
 8005c0c:	9b05      	ldr	r3, [sp, #20]
 8005c0e:	9a00      	ldr	r2, [sp, #0]
 8005c10:	920a      	str	r2, [sp, #40]	; 0x28
 8005c12:	4413      	add	r3, r2
 8005c14:	9305      	str	r3, [sp, #20]
 8005c16:	2300      	movs	r3, #0
 8005c18:	9307      	str	r3, [sp, #28]
 8005c1a:	9b06      	ldr	r3, [sp, #24]
 8005c1c:	2b09      	cmp	r3, #9
 8005c1e:	f200 8089 	bhi.w	8005d34 <_dtoa_r+0x2f4>
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	bfc4      	itt	gt
 8005c26:	3b04      	subgt	r3, #4
 8005c28:	9306      	strgt	r3, [sp, #24]
 8005c2a:	9b06      	ldr	r3, [sp, #24]
 8005c2c:	f1a3 0302 	sub.w	r3, r3, #2
 8005c30:	bfcc      	ite	gt
 8005c32:	2500      	movgt	r5, #0
 8005c34:	2501      	movle	r5, #1
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	f200 8087 	bhi.w	8005d4a <_dtoa_r+0x30a>
 8005c3c:	e8df f003 	tbb	[pc, r3]
 8005c40:	59383a2d 	.word	0x59383a2d
 8005c44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c48:	441d      	add	r5, r3
 8005c4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	bfc1      	itttt	gt
 8005c52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c62:	bfda      	itte	le
 8005c64:	f1c3 0320 	rsble	r3, r3, #32
 8005c68:	fa06 f003 	lslle.w	r0, r6, r3
 8005c6c:	4318      	orrgt	r0, r3
 8005c6e:	f7fa fc69 	bl	8000544 <__aeabi_ui2d>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4606      	mov	r6, r0
 8005c76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c7a:	3d01      	subs	r5, #1
 8005c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8005c7e:	e76a      	b.n	8005b56 <_dtoa_r+0x116>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e7b2      	b.n	8005bea <_dtoa_r+0x1aa>
 8005c84:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c86:	e7b1      	b.n	8005bec <_dtoa_r+0x1ac>
 8005c88:	9b04      	ldr	r3, [sp, #16]
 8005c8a:	9a00      	ldr	r2, [sp, #0]
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	4253      	negs	r3, r2
 8005c92:	9307      	str	r3, [sp, #28]
 8005c94:	2300      	movs	r3, #0
 8005c96:	930a      	str	r3, [sp, #40]	; 0x28
 8005c98:	e7bf      	b.n	8005c1a <_dtoa_r+0x1da>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9308      	str	r3, [sp, #32]
 8005c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	dc55      	bgt.n	8005d50 <_dtoa_r+0x310>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005caa:	461a      	mov	r2, r3
 8005cac:	9209      	str	r2, [sp, #36]	; 0x24
 8005cae:	e00c      	b.n	8005cca <_dtoa_r+0x28a>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e7f3      	b.n	8005c9c <_dtoa_r+0x25c>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cb8:	9308      	str	r3, [sp, #32]
 8005cba:	9b00      	ldr	r3, [sp, #0]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	9302      	str	r3, [sp, #8]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	9303      	str	r3, [sp, #12]
 8005cc6:	bfb8      	it	lt
 8005cc8:	2301      	movlt	r3, #1
 8005cca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ccc:	2200      	movs	r2, #0
 8005cce:	6042      	str	r2, [r0, #4]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	f102 0614 	add.w	r6, r2, #20
 8005cd6:	429e      	cmp	r6, r3
 8005cd8:	6841      	ldr	r1, [r0, #4]
 8005cda:	d93d      	bls.n	8005d58 <_dtoa_r+0x318>
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f001 f839 	bl	8006d54 <_Balloc>
 8005ce2:	9001      	str	r0, [sp, #4]
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d13b      	bne.n	8005d60 <_dtoa_r+0x320>
 8005ce8:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <_dtoa_r+0x2f0>)
 8005cea:	4602      	mov	r2, r0
 8005cec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cf0:	e6c0      	b.n	8005a74 <_dtoa_r+0x34>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e7df      	b.n	8005cb6 <_dtoa_r+0x276>
 8005cf6:	bf00      	nop
 8005cf8:	636f4361 	.word	0x636f4361
 8005cfc:	3fd287a7 	.word	0x3fd287a7
 8005d00:	8b60c8b3 	.word	0x8b60c8b3
 8005d04:	3fc68a28 	.word	0x3fc68a28
 8005d08:	509f79fb 	.word	0x509f79fb
 8005d0c:	3fd34413 	.word	0x3fd34413
 8005d10:	0800896e 	.word	0x0800896e
 8005d14:	08008985 	.word	0x08008985
 8005d18:	7ff00000 	.word	0x7ff00000
 8005d1c:	0800896a 	.word	0x0800896a
 8005d20:	08008961 	.word	0x08008961
 8005d24:	080087e1 	.word	0x080087e1
 8005d28:	3ff80000 	.word	0x3ff80000
 8005d2c:	08008af0 	.word	0x08008af0
 8005d30:	080089e0 	.word	0x080089e0
 8005d34:	2501      	movs	r5, #1
 8005d36:	2300      	movs	r3, #0
 8005d38:	9306      	str	r3, [sp, #24]
 8005d3a:	9508      	str	r5, [sp, #32]
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2312      	movs	r3, #18
 8005d48:	e7b0      	b.n	8005cac <_dtoa_r+0x26c>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	9308      	str	r3, [sp, #32]
 8005d4e:	e7f5      	b.n	8005d3c <_dtoa_r+0x2fc>
 8005d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d56:	e7b8      	b.n	8005cca <_dtoa_r+0x28a>
 8005d58:	3101      	adds	r1, #1
 8005d5a:	6041      	str	r1, [r0, #4]
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	e7b8      	b.n	8005cd2 <_dtoa_r+0x292>
 8005d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d62:	9a01      	ldr	r2, [sp, #4]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	2b0e      	cmp	r3, #14
 8005d6a:	f200 809d 	bhi.w	8005ea8 <_dtoa_r+0x468>
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	f000 809a 	beq.w	8005ea8 <_dtoa_r+0x468>
 8005d74:	9b00      	ldr	r3, [sp, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd32      	ble.n	8005de0 <_dtoa_r+0x3a0>
 8005d7a:	4ab7      	ldr	r2, [pc, #732]	; (8006058 <_dtoa_r+0x618>)
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d88:	9b00      	ldr	r3, [sp, #0]
 8005d8a:	05d8      	lsls	r0, r3, #23
 8005d8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005d90:	d516      	bpl.n	8005dc0 <_dtoa_r+0x380>
 8005d92:	4bb2      	ldr	r3, [pc, #712]	; (800605c <_dtoa_r+0x61c>)
 8005d94:	ec51 0b19 	vmov	r0, r1, d9
 8005d98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d9c:	f7fa fd76 	bl	800088c <__aeabi_ddiv>
 8005da0:	f007 070f 	and.w	r7, r7, #15
 8005da4:	4682      	mov	sl, r0
 8005da6:	468b      	mov	fp, r1
 8005da8:	2503      	movs	r5, #3
 8005daa:	4eac      	ldr	r6, [pc, #688]	; (800605c <_dtoa_r+0x61c>)
 8005dac:	b957      	cbnz	r7, 8005dc4 <_dtoa_r+0x384>
 8005dae:	4642      	mov	r2, r8
 8005db0:	464b      	mov	r3, r9
 8005db2:	4650      	mov	r0, sl
 8005db4:	4659      	mov	r1, fp
 8005db6:	f7fa fd69 	bl	800088c <__aeabi_ddiv>
 8005dba:	4682      	mov	sl, r0
 8005dbc:	468b      	mov	fp, r1
 8005dbe:	e028      	b.n	8005e12 <_dtoa_r+0x3d2>
 8005dc0:	2502      	movs	r5, #2
 8005dc2:	e7f2      	b.n	8005daa <_dtoa_r+0x36a>
 8005dc4:	07f9      	lsls	r1, r7, #31
 8005dc6:	d508      	bpl.n	8005dda <_dtoa_r+0x39a>
 8005dc8:	4640      	mov	r0, r8
 8005dca:	4649      	mov	r1, r9
 8005dcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005dd0:	f7fa fc32 	bl	8000638 <__aeabi_dmul>
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	4689      	mov	r9, r1
 8005dda:	107f      	asrs	r7, r7, #1
 8005ddc:	3608      	adds	r6, #8
 8005dde:	e7e5      	b.n	8005dac <_dtoa_r+0x36c>
 8005de0:	f000 809b 	beq.w	8005f1a <_dtoa_r+0x4da>
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	4f9d      	ldr	r7, [pc, #628]	; (800605c <_dtoa_r+0x61c>)
 8005de8:	425e      	negs	r6, r3
 8005dea:	4b9b      	ldr	r3, [pc, #620]	; (8006058 <_dtoa_r+0x618>)
 8005dec:	f006 020f 	and.w	r2, r6, #15
 8005df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	ec51 0b19 	vmov	r0, r1, d9
 8005dfc:	f7fa fc1c 	bl	8000638 <__aeabi_dmul>
 8005e00:	1136      	asrs	r6, r6, #4
 8005e02:	4682      	mov	sl, r0
 8005e04:	468b      	mov	fp, r1
 8005e06:	2300      	movs	r3, #0
 8005e08:	2502      	movs	r5, #2
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	d17a      	bne.n	8005f04 <_dtoa_r+0x4c4>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1d3      	bne.n	8005dba <_dtoa_r+0x37a>
 8005e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8082 	beq.w	8005f1e <_dtoa_r+0x4de>
 8005e1a:	4b91      	ldr	r3, [pc, #580]	; (8006060 <_dtoa_r+0x620>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4650      	mov	r0, sl
 8005e20:	4659      	mov	r1, fp
 8005e22:	f7fa fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d079      	beq.n	8005f1e <_dtoa_r+0x4de>
 8005e2a:	9b03      	ldr	r3, [sp, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d076      	beq.n	8005f1e <_dtoa_r+0x4de>
 8005e30:	9b02      	ldr	r3, [sp, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd36      	ble.n	8005ea4 <_dtoa_r+0x464>
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	4650      	mov	r0, sl
 8005e3a:	4659      	mov	r1, fp
 8005e3c:	1e5f      	subs	r7, r3, #1
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4b88      	ldr	r3, [pc, #544]	; (8006064 <_dtoa_r+0x624>)
 8005e42:	f7fa fbf9 	bl	8000638 <__aeabi_dmul>
 8005e46:	9e02      	ldr	r6, [sp, #8]
 8005e48:	4682      	mov	sl, r0
 8005e4a:	468b      	mov	fp, r1
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f7fa fb88 	bl	8000564 <__aeabi_i2d>
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	f7fa fbee 	bl	8000638 <__aeabi_dmul>
 8005e5c:	4b82      	ldr	r3, [pc, #520]	; (8006068 <_dtoa_r+0x628>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f7fa fa34 	bl	80002cc <__adddf3>
 8005e64:	46d0      	mov	r8, sl
 8005e66:	46d9      	mov	r9, fp
 8005e68:	4682      	mov	sl, r0
 8005e6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	d158      	bne.n	8005f24 <_dtoa_r+0x4e4>
 8005e72:	4b7e      	ldr	r3, [pc, #504]	; (800606c <_dtoa_r+0x62c>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	f7fa fa25 	bl	80002c8 <__aeabi_dsub>
 8005e7e:	4652      	mov	r2, sl
 8005e80:	465b      	mov	r3, fp
 8005e82:	4680      	mov	r8, r0
 8005e84:	4689      	mov	r9, r1
 8005e86:	f7fa fe67 	bl	8000b58 <__aeabi_dcmpgt>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	f040 8295 	bne.w	80063ba <_dtoa_r+0x97a>
 8005e90:	4652      	mov	r2, sl
 8005e92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f7fa fe3f 	bl	8000b1c <__aeabi_dcmplt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f040 8289 	bne.w	80063b6 <_dtoa_r+0x976>
 8005ea4:	ec5b ab19 	vmov	sl, fp, d9
 8005ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f2c0 8148 	blt.w	8006140 <_dtoa_r+0x700>
 8005eb0:	9a00      	ldr	r2, [sp, #0]
 8005eb2:	2a0e      	cmp	r2, #14
 8005eb4:	f300 8144 	bgt.w	8006140 <_dtoa_r+0x700>
 8005eb8:	4b67      	ldr	r3, [pc, #412]	; (8006058 <_dtoa_r+0x618>)
 8005eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f280 80d5 	bge.w	8006074 <_dtoa_r+0x634>
 8005eca:	9b03      	ldr	r3, [sp, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f300 80d1 	bgt.w	8006074 <_dtoa_r+0x634>
 8005ed2:	f040 826f 	bne.w	80063b4 <_dtoa_r+0x974>
 8005ed6:	4b65      	ldr	r3, [pc, #404]	; (800606c <_dtoa_r+0x62c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4640      	mov	r0, r8
 8005edc:	4649      	mov	r1, r9
 8005ede:	f7fa fbab 	bl	8000638 <__aeabi_dmul>
 8005ee2:	4652      	mov	r2, sl
 8005ee4:	465b      	mov	r3, fp
 8005ee6:	f7fa fe2d 	bl	8000b44 <__aeabi_dcmpge>
 8005eea:	9e03      	ldr	r6, [sp, #12]
 8005eec:	4637      	mov	r7, r6
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f040 8245 	bne.w	800637e <_dtoa_r+0x93e>
 8005ef4:	9d01      	ldr	r5, [sp, #4]
 8005ef6:	2331      	movs	r3, #49	; 0x31
 8005ef8:	f805 3b01 	strb.w	r3, [r5], #1
 8005efc:	9b00      	ldr	r3, [sp, #0]
 8005efe:	3301      	adds	r3, #1
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	e240      	b.n	8006386 <_dtoa_r+0x946>
 8005f04:	07f2      	lsls	r2, r6, #31
 8005f06:	d505      	bpl.n	8005f14 <_dtoa_r+0x4d4>
 8005f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0c:	f7fa fb94 	bl	8000638 <__aeabi_dmul>
 8005f10:	3501      	adds	r5, #1
 8005f12:	2301      	movs	r3, #1
 8005f14:	1076      	asrs	r6, r6, #1
 8005f16:	3708      	adds	r7, #8
 8005f18:	e777      	b.n	8005e0a <_dtoa_r+0x3ca>
 8005f1a:	2502      	movs	r5, #2
 8005f1c:	e779      	b.n	8005e12 <_dtoa_r+0x3d2>
 8005f1e:	9f00      	ldr	r7, [sp, #0]
 8005f20:	9e03      	ldr	r6, [sp, #12]
 8005f22:	e794      	b.n	8005e4e <_dtoa_r+0x40e>
 8005f24:	9901      	ldr	r1, [sp, #4]
 8005f26:	4b4c      	ldr	r3, [pc, #304]	; (8006058 <_dtoa_r+0x618>)
 8005f28:	4431      	add	r1, r6
 8005f2a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f2c:	9908      	ldr	r1, [sp, #32]
 8005f2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f36:	2900      	cmp	r1, #0
 8005f38:	d043      	beq.n	8005fc2 <_dtoa_r+0x582>
 8005f3a:	494d      	ldr	r1, [pc, #308]	; (8006070 <_dtoa_r+0x630>)
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f7fa fca5 	bl	800088c <__aeabi_ddiv>
 8005f42:	4652      	mov	r2, sl
 8005f44:	465b      	mov	r3, fp
 8005f46:	f7fa f9bf 	bl	80002c8 <__aeabi_dsub>
 8005f4a:	9d01      	ldr	r5, [sp, #4]
 8005f4c:	4682      	mov	sl, r0
 8005f4e:	468b      	mov	fp, r1
 8005f50:	4649      	mov	r1, r9
 8005f52:	4640      	mov	r0, r8
 8005f54:	f7fa fe20 	bl	8000b98 <__aeabi_d2iz>
 8005f58:	4606      	mov	r6, r0
 8005f5a:	f7fa fb03 	bl	8000564 <__aeabi_i2d>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4640      	mov	r0, r8
 8005f64:	4649      	mov	r1, r9
 8005f66:	f7fa f9af 	bl	80002c8 <__aeabi_dsub>
 8005f6a:	3630      	adds	r6, #48	; 0x30
 8005f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	465b      	mov	r3, fp
 8005f74:	4680      	mov	r8, r0
 8005f76:	4689      	mov	r9, r1
 8005f78:	f7fa fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d163      	bne.n	8006048 <_dtoa_r+0x608>
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	4936      	ldr	r1, [pc, #216]	; (8006060 <_dtoa_r+0x620>)
 8005f86:	2000      	movs	r0, #0
 8005f88:	f7fa f99e 	bl	80002c8 <__aeabi_dsub>
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	465b      	mov	r3, fp
 8005f90:	f7fa fdc4 	bl	8000b1c <__aeabi_dcmplt>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	f040 80b5 	bne.w	8006104 <_dtoa_r+0x6c4>
 8005f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f9c:	429d      	cmp	r5, r3
 8005f9e:	d081      	beq.n	8005ea4 <_dtoa_r+0x464>
 8005fa0:	4b30      	ldr	r3, [pc, #192]	; (8006064 <_dtoa_r+0x624>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	f7fa fb46 	bl	8000638 <__aeabi_dmul>
 8005fac:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <_dtoa_r+0x624>)
 8005fae:	4682      	mov	sl, r0
 8005fb0:	468b      	mov	fp, r1
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f7fa fb3e 	bl	8000638 <__aeabi_dmul>
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	e7c6      	b.n	8005f50 <_dtoa_r+0x510>
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	f7fa fb37 	bl	8000638 <__aeabi_dmul>
 8005fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fcc:	9d01      	ldr	r5, [sp, #4]
 8005fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	468b      	mov	fp, r1
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	f7fa fdde 	bl	8000b98 <__aeabi_d2iz>
 8005fdc:	4606      	mov	r6, r0
 8005fde:	f7fa fac1 	bl	8000564 <__aeabi_i2d>
 8005fe2:	3630      	adds	r6, #48	; 0x30
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa f96c 	bl	80002c8 <__aeabi_dsub>
 8005ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	4689      	mov	r9, r1
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	d124      	bne.n	800604c <_dtoa_r+0x60c>
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <_dtoa_r+0x630>)
 8006004:	4650      	mov	r0, sl
 8006006:	4659      	mov	r1, fp
 8006008:	f7fa f960 	bl	80002cc <__adddf3>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fda0 	bl	8000b58 <__aeabi_dcmpgt>
 8006018:	2800      	cmp	r0, #0
 800601a:	d173      	bne.n	8006104 <_dtoa_r+0x6c4>
 800601c:	4652      	mov	r2, sl
 800601e:	465b      	mov	r3, fp
 8006020:	4913      	ldr	r1, [pc, #76]	; (8006070 <_dtoa_r+0x630>)
 8006022:	2000      	movs	r0, #0
 8006024:	f7fa f950 	bl	80002c8 <__aeabi_dsub>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4640      	mov	r0, r8
 800602e:	4649      	mov	r1, r9
 8006030:	f7fa fd74 	bl	8000b1c <__aeabi_dcmplt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f43f af35 	beq.w	8005ea4 <_dtoa_r+0x464>
 800603a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800603c:	1e6b      	subs	r3, r5, #1
 800603e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006040:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006044:	2b30      	cmp	r3, #48	; 0x30
 8006046:	d0f8      	beq.n	800603a <_dtoa_r+0x5fa>
 8006048:	9700      	str	r7, [sp, #0]
 800604a:	e049      	b.n	80060e0 <_dtoa_r+0x6a0>
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <_dtoa_r+0x624>)
 800604e:	f7fa faf3 	bl	8000638 <__aeabi_dmul>
 8006052:	4680      	mov	r8, r0
 8006054:	4689      	mov	r9, r1
 8006056:	e7bd      	b.n	8005fd4 <_dtoa_r+0x594>
 8006058:	08008af0 	.word	0x08008af0
 800605c:	08008ac8 	.word	0x08008ac8
 8006060:	3ff00000 	.word	0x3ff00000
 8006064:	40240000 	.word	0x40240000
 8006068:	401c0000 	.word	0x401c0000
 800606c:	40140000 	.word	0x40140000
 8006070:	3fe00000 	.word	0x3fe00000
 8006074:	9d01      	ldr	r5, [sp, #4]
 8006076:	4656      	mov	r6, sl
 8006078:	465f      	mov	r7, fp
 800607a:	4642      	mov	r2, r8
 800607c:	464b      	mov	r3, r9
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa fc03 	bl	800088c <__aeabi_ddiv>
 8006086:	f7fa fd87 	bl	8000b98 <__aeabi_d2iz>
 800608a:	4682      	mov	sl, r0
 800608c:	f7fa fa6a 	bl	8000564 <__aeabi_i2d>
 8006090:	4642      	mov	r2, r8
 8006092:	464b      	mov	r3, r9
 8006094:	f7fa fad0 	bl	8000638 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80060a4:	f7fa f910 	bl	80002c8 <__aeabi_dsub>
 80060a8:	f805 6b01 	strb.w	r6, [r5], #1
 80060ac:	9e01      	ldr	r6, [sp, #4]
 80060ae:	9f03      	ldr	r7, [sp, #12]
 80060b0:	1bae      	subs	r6, r5, r6
 80060b2:	42b7      	cmp	r7, r6
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	d135      	bne.n	8006126 <_dtoa_r+0x6e6>
 80060ba:	f7fa f907 	bl	80002cc <__adddf3>
 80060be:	4642      	mov	r2, r8
 80060c0:	464b      	mov	r3, r9
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	f7fa fd47 	bl	8000b58 <__aeabi_dcmpgt>
 80060ca:	b9d0      	cbnz	r0, 8006102 <_dtoa_r+0x6c2>
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	4630      	mov	r0, r6
 80060d2:	4639      	mov	r1, r7
 80060d4:	f7fa fd18 	bl	8000b08 <__aeabi_dcmpeq>
 80060d8:	b110      	cbz	r0, 80060e0 <_dtoa_r+0x6a0>
 80060da:	f01a 0f01 	tst.w	sl, #1
 80060de:	d110      	bne.n	8006102 <_dtoa_r+0x6c2>
 80060e0:	4620      	mov	r0, r4
 80060e2:	ee18 1a10 	vmov	r1, s16
 80060e6:	f000 fe75 	bl	8006dd4 <_Bfree>
 80060ea:	2300      	movs	r3, #0
 80060ec:	9800      	ldr	r0, [sp, #0]
 80060ee:	702b      	strb	r3, [r5, #0]
 80060f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060f2:	3001      	adds	r0, #1
 80060f4:	6018      	str	r0, [r3, #0]
 80060f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f43f acf1 	beq.w	8005ae0 <_dtoa_r+0xa0>
 80060fe:	601d      	str	r5, [r3, #0]
 8006100:	e4ee      	b.n	8005ae0 <_dtoa_r+0xa0>
 8006102:	9f00      	ldr	r7, [sp, #0]
 8006104:	462b      	mov	r3, r5
 8006106:	461d      	mov	r5, r3
 8006108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800610c:	2a39      	cmp	r2, #57	; 0x39
 800610e:	d106      	bne.n	800611e <_dtoa_r+0x6de>
 8006110:	9a01      	ldr	r2, [sp, #4]
 8006112:	429a      	cmp	r2, r3
 8006114:	d1f7      	bne.n	8006106 <_dtoa_r+0x6c6>
 8006116:	9901      	ldr	r1, [sp, #4]
 8006118:	2230      	movs	r2, #48	; 0x30
 800611a:	3701      	adds	r7, #1
 800611c:	700a      	strb	r2, [r1, #0]
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	3201      	adds	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	e790      	b.n	8006048 <_dtoa_r+0x608>
 8006126:	4ba6      	ldr	r3, [pc, #664]	; (80063c0 <_dtoa_r+0x980>)
 8006128:	2200      	movs	r2, #0
 800612a:	f7fa fa85 	bl	8000638 <__aeabi_dmul>
 800612e:	2200      	movs	r2, #0
 8006130:	2300      	movs	r3, #0
 8006132:	4606      	mov	r6, r0
 8006134:	460f      	mov	r7, r1
 8006136:	f7fa fce7 	bl	8000b08 <__aeabi_dcmpeq>
 800613a:	2800      	cmp	r0, #0
 800613c:	d09d      	beq.n	800607a <_dtoa_r+0x63a>
 800613e:	e7cf      	b.n	80060e0 <_dtoa_r+0x6a0>
 8006140:	9a08      	ldr	r2, [sp, #32]
 8006142:	2a00      	cmp	r2, #0
 8006144:	f000 80d7 	beq.w	80062f6 <_dtoa_r+0x8b6>
 8006148:	9a06      	ldr	r2, [sp, #24]
 800614a:	2a01      	cmp	r2, #1
 800614c:	f300 80ba 	bgt.w	80062c4 <_dtoa_r+0x884>
 8006150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006152:	2a00      	cmp	r2, #0
 8006154:	f000 80b2 	beq.w	80062bc <_dtoa_r+0x87c>
 8006158:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800615c:	9e07      	ldr	r6, [sp, #28]
 800615e:	9d04      	ldr	r5, [sp, #16]
 8006160:	9a04      	ldr	r2, [sp, #16]
 8006162:	441a      	add	r2, r3
 8006164:	9204      	str	r2, [sp, #16]
 8006166:	9a05      	ldr	r2, [sp, #20]
 8006168:	2101      	movs	r1, #1
 800616a:	441a      	add	r2, r3
 800616c:	4620      	mov	r0, r4
 800616e:	9205      	str	r2, [sp, #20]
 8006170:	f000 ff32 	bl	8006fd8 <__i2b>
 8006174:	4607      	mov	r7, r0
 8006176:	2d00      	cmp	r5, #0
 8006178:	dd0c      	ble.n	8006194 <_dtoa_r+0x754>
 800617a:	9b05      	ldr	r3, [sp, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	dd09      	ble.n	8006194 <_dtoa_r+0x754>
 8006180:	42ab      	cmp	r3, r5
 8006182:	9a04      	ldr	r2, [sp, #16]
 8006184:	bfa8      	it	ge
 8006186:	462b      	movge	r3, r5
 8006188:	1ad2      	subs	r2, r2, r3
 800618a:	9204      	str	r2, [sp, #16]
 800618c:	9a05      	ldr	r2, [sp, #20]
 800618e:	1aed      	subs	r5, r5, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	9305      	str	r3, [sp, #20]
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	b31b      	cbz	r3, 80061e0 <_dtoa_r+0x7a0>
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80af 	beq.w	80062fe <_dtoa_r+0x8be>
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	dd13      	ble.n	80061cc <_dtoa_r+0x78c>
 80061a4:	4639      	mov	r1, r7
 80061a6:	4632      	mov	r2, r6
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 ffd5 	bl	8007158 <__pow5mult>
 80061ae:	ee18 2a10 	vmov	r2, s16
 80061b2:	4601      	mov	r1, r0
 80061b4:	4607      	mov	r7, r0
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 ff24 	bl	8007004 <__multiply>
 80061bc:	ee18 1a10 	vmov	r1, s16
 80061c0:	4680      	mov	r8, r0
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 fe06 	bl	8006dd4 <_Bfree>
 80061c8:	ee08 8a10 	vmov	s16, r8
 80061cc:	9b07      	ldr	r3, [sp, #28]
 80061ce:	1b9a      	subs	r2, r3, r6
 80061d0:	d006      	beq.n	80061e0 <_dtoa_r+0x7a0>
 80061d2:	ee18 1a10 	vmov	r1, s16
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 ffbe 	bl	8007158 <__pow5mult>
 80061dc:	ee08 0a10 	vmov	s16, r0
 80061e0:	2101      	movs	r1, #1
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fef8 	bl	8006fd8 <__i2b>
 80061e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	4606      	mov	r6, r0
 80061ee:	f340 8088 	ble.w	8006302 <_dtoa_r+0x8c2>
 80061f2:	461a      	mov	r2, r3
 80061f4:	4601      	mov	r1, r0
 80061f6:	4620      	mov	r0, r4
 80061f8:	f000 ffae 	bl	8007158 <__pow5mult>
 80061fc:	9b06      	ldr	r3, [sp, #24]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	4606      	mov	r6, r0
 8006202:	f340 8081 	ble.w	8006308 <_dtoa_r+0x8c8>
 8006206:	f04f 0800 	mov.w	r8, #0
 800620a:	6933      	ldr	r3, [r6, #16]
 800620c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006210:	6918      	ldr	r0, [r3, #16]
 8006212:	f000 fe91 	bl	8006f38 <__hi0bits>
 8006216:	f1c0 0020 	rsb	r0, r0, #32
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	4418      	add	r0, r3
 800621e:	f010 001f 	ands.w	r0, r0, #31
 8006222:	f000 8092 	beq.w	800634a <_dtoa_r+0x90a>
 8006226:	f1c0 0320 	rsb	r3, r0, #32
 800622a:	2b04      	cmp	r3, #4
 800622c:	f340 808a 	ble.w	8006344 <_dtoa_r+0x904>
 8006230:	f1c0 001c 	rsb	r0, r0, #28
 8006234:	9b04      	ldr	r3, [sp, #16]
 8006236:	4403      	add	r3, r0
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	9b05      	ldr	r3, [sp, #20]
 800623c:	4403      	add	r3, r0
 800623e:	4405      	add	r5, r0
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	9b04      	ldr	r3, [sp, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	dd07      	ble.n	8006258 <_dtoa_r+0x818>
 8006248:	ee18 1a10 	vmov	r1, s16
 800624c:	461a      	mov	r2, r3
 800624e:	4620      	mov	r0, r4
 8006250:	f000 ffdc 	bl	800720c <__lshift>
 8006254:	ee08 0a10 	vmov	s16, r0
 8006258:	9b05      	ldr	r3, [sp, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	dd05      	ble.n	800626a <_dtoa_r+0x82a>
 800625e:	4631      	mov	r1, r6
 8006260:	461a      	mov	r2, r3
 8006262:	4620      	mov	r0, r4
 8006264:	f000 ffd2 	bl	800720c <__lshift>
 8006268:	4606      	mov	r6, r0
 800626a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d06e      	beq.n	800634e <_dtoa_r+0x90e>
 8006270:	ee18 0a10 	vmov	r0, s16
 8006274:	4631      	mov	r1, r6
 8006276:	f001 f839 	bl	80072ec <__mcmp>
 800627a:	2800      	cmp	r0, #0
 800627c:	da67      	bge.n	800634e <_dtoa_r+0x90e>
 800627e:	9b00      	ldr	r3, [sp, #0]
 8006280:	3b01      	subs	r3, #1
 8006282:	ee18 1a10 	vmov	r1, s16
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	220a      	movs	r2, #10
 800628a:	2300      	movs	r3, #0
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fdc3 	bl	8006e18 <__multadd>
 8006292:	9b08      	ldr	r3, [sp, #32]
 8006294:	ee08 0a10 	vmov	s16, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 81b1 	beq.w	8006600 <_dtoa_r+0xbc0>
 800629e:	2300      	movs	r3, #0
 80062a0:	4639      	mov	r1, r7
 80062a2:	220a      	movs	r2, #10
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 fdb7 	bl	8006e18 <__multadd>
 80062aa:	9b02      	ldr	r3, [sp, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	4607      	mov	r7, r0
 80062b0:	f300 808e 	bgt.w	80063d0 <_dtoa_r+0x990>
 80062b4:	9b06      	ldr	r3, [sp, #24]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	dc51      	bgt.n	800635e <_dtoa_r+0x91e>
 80062ba:	e089      	b.n	80063d0 <_dtoa_r+0x990>
 80062bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062c2:	e74b      	b.n	800615c <_dtoa_r+0x71c>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	1e5e      	subs	r6, r3, #1
 80062c8:	9b07      	ldr	r3, [sp, #28]
 80062ca:	42b3      	cmp	r3, r6
 80062cc:	bfbf      	itttt	lt
 80062ce:	9b07      	ldrlt	r3, [sp, #28]
 80062d0:	9607      	strlt	r6, [sp, #28]
 80062d2:	1af2      	sublt	r2, r6, r3
 80062d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062d6:	bfb6      	itet	lt
 80062d8:	189b      	addlt	r3, r3, r2
 80062da:	1b9e      	subge	r6, r3, r6
 80062dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	bfb8      	it	lt
 80062e2:	2600      	movlt	r6, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bfb7      	itett	lt
 80062e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80062ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80062f0:	1a9d      	sublt	r5, r3, r2
 80062f2:	2300      	movlt	r3, #0
 80062f4:	e734      	b.n	8006160 <_dtoa_r+0x720>
 80062f6:	9e07      	ldr	r6, [sp, #28]
 80062f8:	9d04      	ldr	r5, [sp, #16]
 80062fa:	9f08      	ldr	r7, [sp, #32]
 80062fc:	e73b      	b.n	8006176 <_dtoa_r+0x736>
 80062fe:	9a07      	ldr	r2, [sp, #28]
 8006300:	e767      	b.n	80061d2 <_dtoa_r+0x792>
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	2b01      	cmp	r3, #1
 8006306:	dc18      	bgt.n	800633a <_dtoa_r+0x8fa>
 8006308:	f1ba 0f00 	cmp.w	sl, #0
 800630c:	d115      	bne.n	800633a <_dtoa_r+0x8fa>
 800630e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006312:	b993      	cbnz	r3, 800633a <_dtoa_r+0x8fa>
 8006314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006318:	0d1b      	lsrs	r3, r3, #20
 800631a:	051b      	lsls	r3, r3, #20
 800631c:	b183      	cbz	r3, 8006340 <_dtoa_r+0x900>
 800631e:	9b04      	ldr	r3, [sp, #16]
 8006320:	3301      	adds	r3, #1
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	9b05      	ldr	r3, [sp, #20]
 8006326:	3301      	adds	r3, #1
 8006328:	9305      	str	r3, [sp, #20]
 800632a:	f04f 0801 	mov.w	r8, #1
 800632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f af6a 	bne.w	800620a <_dtoa_r+0x7ca>
 8006336:	2001      	movs	r0, #1
 8006338:	e76f      	b.n	800621a <_dtoa_r+0x7da>
 800633a:	f04f 0800 	mov.w	r8, #0
 800633e:	e7f6      	b.n	800632e <_dtoa_r+0x8ee>
 8006340:	4698      	mov	r8, r3
 8006342:	e7f4      	b.n	800632e <_dtoa_r+0x8ee>
 8006344:	f43f af7d 	beq.w	8006242 <_dtoa_r+0x802>
 8006348:	4618      	mov	r0, r3
 800634a:	301c      	adds	r0, #28
 800634c:	e772      	b.n	8006234 <_dtoa_r+0x7f4>
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	dc37      	bgt.n	80063c4 <_dtoa_r+0x984>
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	2b02      	cmp	r3, #2
 8006358:	dd34      	ble.n	80063c4 <_dtoa_r+0x984>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	9b02      	ldr	r3, [sp, #8]
 8006360:	b96b      	cbnz	r3, 800637e <_dtoa_r+0x93e>
 8006362:	4631      	mov	r1, r6
 8006364:	2205      	movs	r2, #5
 8006366:	4620      	mov	r0, r4
 8006368:	f000 fd56 	bl	8006e18 <__multadd>
 800636c:	4601      	mov	r1, r0
 800636e:	4606      	mov	r6, r0
 8006370:	ee18 0a10 	vmov	r0, s16
 8006374:	f000 ffba 	bl	80072ec <__mcmp>
 8006378:	2800      	cmp	r0, #0
 800637a:	f73f adbb 	bgt.w	8005ef4 <_dtoa_r+0x4b4>
 800637e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006380:	9d01      	ldr	r5, [sp, #4]
 8006382:	43db      	mvns	r3, r3
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	f04f 0800 	mov.w	r8, #0
 800638a:	4631      	mov	r1, r6
 800638c:	4620      	mov	r0, r4
 800638e:	f000 fd21 	bl	8006dd4 <_Bfree>
 8006392:	2f00      	cmp	r7, #0
 8006394:	f43f aea4 	beq.w	80060e0 <_dtoa_r+0x6a0>
 8006398:	f1b8 0f00 	cmp.w	r8, #0
 800639c:	d005      	beq.n	80063aa <_dtoa_r+0x96a>
 800639e:	45b8      	cmp	r8, r7
 80063a0:	d003      	beq.n	80063aa <_dtoa_r+0x96a>
 80063a2:	4641      	mov	r1, r8
 80063a4:	4620      	mov	r0, r4
 80063a6:	f000 fd15 	bl	8006dd4 <_Bfree>
 80063aa:	4639      	mov	r1, r7
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 fd11 	bl	8006dd4 <_Bfree>
 80063b2:	e695      	b.n	80060e0 <_dtoa_r+0x6a0>
 80063b4:	2600      	movs	r6, #0
 80063b6:	4637      	mov	r7, r6
 80063b8:	e7e1      	b.n	800637e <_dtoa_r+0x93e>
 80063ba:	9700      	str	r7, [sp, #0]
 80063bc:	4637      	mov	r7, r6
 80063be:	e599      	b.n	8005ef4 <_dtoa_r+0x4b4>
 80063c0:	40240000 	.word	0x40240000
 80063c4:	9b08      	ldr	r3, [sp, #32]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80ca 	beq.w	8006560 <_dtoa_r+0xb20>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	9302      	str	r3, [sp, #8]
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	dd05      	ble.n	80063e0 <_dtoa_r+0x9a0>
 80063d4:	4639      	mov	r1, r7
 80063d6:	462a      	mov	r2, r5
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 ff17 	bl	800720c <__lshift>
 80063de:	4607      	mov	r7, r0
 80063e0:	f1b8 0f00 	cmp.w	r8, #0
 80063e4:	d05b      	beq.n	800649e <_dtoa_r+0xa5e>
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 fcb3 	bl	8006d54 <_Balloc>
 80063ee:	4605      	mov	r5, r0
 80063f0:	b928      	cbnz	r0, 80063fe <_dtoa_r+0x9be>
 80063f2:	4b87      	ldr	r3, [pc, #540]	; (8006610 <_dtoa_r+0xbd0>)
 80063f4:	4602      	mov	r2, r0
 80063f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063fa:	f7ff bb3b 	b.w	8005a74 <_dtoa_r+0x34>
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	3202      	adds	r2, #2
 8006402:	0092      	lsls	r2, r2, #2
 8006404:	f107 010c 	add.w	r1, r7, #12
 8006408:	300c      	adds	r0, #12
 800640a:	f000 fc95 	bl	8006d38 <memcpy>
 800640e:	2201      	movs	r2, #1
 8006410:	4629      	mov	r1, r5
 8006412:	4620      	mov	r0, r4
 8006414:	f000 fefa 	bl	800720c <__lshift>
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	f103 0901 	add.w	r9, r3, #1
 800641e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006422:	4413      	add	r3, r2
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f00a 0301 	and.w	r3, sl, #1
 800642a:	46b8      	mov	r8, r7
 800642c:	9304      	str	r3, [sp, #16]
 800642e:	4607      	mov	r7, r0
 8006430:	4631      	mov	r1, r6
 8006432:	ee18 0a10 	vmov	r0, s16
 8006436:	f7ff fa77 	bl	8005928 <quorem>
 800643a:	4641      	mov	r1, r8
 800643c:	9002      	str	r0, [sp, #8]
 800643e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006442:	ee18 0a10 	vmov	r0, s16
 8006446:	f000 ff51 	bl	80072ec <__mcmp>
 800644a:	463a      	mov	r2, r7
 800644c:	9003      	str	r0, [sp, #12]
 800644e:	4631      	mov	r1, r6
 8006450:	4620      	mov	r0, r4
 8006452:	f000 ff67 	bl	8007324 <__mdiff>
 8006456:	68c2      	ldr	r2, [r0, #12]
 8006458:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800645c:	4605      	mov	r5, r0
 800645e:	bb02      	cbnz	r2, 80064a2 <_dtoa_r+0xa62>
 8006460:	4601      	mov	r1, r0
 8006462:	ee18 0a10 	vmov	r0, s16
 8006466:	f000 ff41 	bl	80072ec <__mcmp>
 800646a:	4602      	mov	r2, r0
 800646c:	4629      	mov	r1, r5
 800646e:	4620      	mov	r0, r4
 8006470:	9207      	str	r2, [sp, #28]
 8006472:	f000 fcaf 	bl	8006dd4 <_Bfree>
 8006476:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800647a:	ea43 0102 	orr.w	r1, r3, r2
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	430b      	orrs	r3, r1
 8006482:	464d      	mov	r5, r9
 8006484:	d10f      	bne.n	80064a6 <_dtoa_r+0xa66>
 8006486:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800648a:	d02a      	beq.n	80064e2 <_dtoa_r+0xaa2>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	dd02      	ble.n	8006498 <_dtoa_r+0xa58>
 8006492:	9b02      	ldr	r3, [sp, #8]
 8006494:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006498:	f88b a000 	strb.w	sl, [fp]
 800649c:	e775      	b.n	800638a <_dtoa_r+0x94a>
 800649e:	4638      	mov	r0, r7
 80064a0:	e7ba      	b.n	8006418 <_dtoa_r+0x9d8>
 80064a2:	2201      	movs	r2, #1
 80064a4:	e7e2      	b.n	800646c <_dtoa_r+0xa2c>
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	db04      	blt.n	80064b6 <_dtoa_r+0xa76>
 80064ac:	9906      	ldr	r1, [sp, #24]
 80064ae:	430b      	orrs	r3, r1
 80064b0:	9904      	ldr	r1, [sp, #16]
 80064b2:	430b      	orrs	r3, r1
 80064b4:	d122      	bne.n	80064fc <_dtoa_r+0xabc>
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	ddee      	ble.n	8006498 <_dtoa_r+0xa58>
 80064ba:	ee18 1a10 	vmov	r1, s16
 80064be:	2201      	movs	r2, #1
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fea3 	bl	800720c <__lshift>
 80064c6:	4631      	mov	r1, r6
 80064c8:	ee08 0a10 	vmov	s16, r0
 80064cc:	f000 ff0e 	bl	80072ec <__mcmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	dc03      	bgt.n	80064dc <_dtoa_r+0xa9c>
 80064d4:	d1e0      	bne.n	8006498 <_dtoa_r+0xa58>
 80064d6:	f01a 0f01 	tst.w	sl, #1
 80064da:	d0dd      	beq.n	8006498 <_dtoa_r+0xa58>
 80064dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064e0:	d1d7      	bne.n	8006492 <_dtoa_r+0xa52>
 80064e2:	2339      	movs	r3, #57	; 0x39
 80064e4:	f88b 3000 	strb.w	r3, [fp]
 80064e8:	462b      	mov	r3, r5
 80064ea:	461d      	mov	r5, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064f2:	2a39      	cmp	r2, #57	; 0x39
 80064f4:	d071      	beq.n	80065da <_dtoa_r+0xb9a>
 80064f6:	3201      	adds	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e746      	b.n	800638a <_dtoa_r+0x94a>
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	dd07      	ble.n	8006510 <_dtoa_r+0xad0>
 8006500:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006504:	d0ed      	beq.n	80064e2 <_dtoa_r+0xaa2>
 8006506:	f10a 0301 	add.w	r3, sl, #1
 800650a:	f88b 3000 	strb.w	r3, [fp]
 800650e:	e73c      	b.n	800638a <_dtoa_r+0x94a>
 8006510:	9b05      	ldr	r3, [sp, #20]
 8006512:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006516:	4599      	cmp	r9, r3
 8006518:	d047      	beq.n	80065aa <_dtoa_r+0xb6a>
 800651a:	ee18 1a10 	vmov	r1, s16
 800651e:	2300      	movs	r3, #0
 8006520:	220a      	movs	r2, #10
 8006522:	4620      	mov	r0, r4
 8006524:	f000 fc78 	bl	8006e18 <__multadd>
 8006528:	45b8      	cmp	r8, r7
 800652a:	ee08 0a10 	vmov	s16, r0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	f04f 020a 	mov.w	r2, #10
 8006536:	4641      	mov	r1, r8
 8006538:	4620      	mov	r0, r4
 800653a:	d106      	bne.n	800654a <_dtoa_r+0xb0a>
 800653c:	f000 fc6c 	bl	8006e18 <__multadd>
 8006540:	4680      	mov	r8, r0
 8006542:	4607      	mov	r7, r0
 8006544:	f109 0901 	add.w	r9, r9, #1
 8006548:	e772      	b.n	8006430 <_dtoa_r+0x9f0>
 800654a:	f000 fc65 	bl	8006e18 <__multadd>
 800654e:	4639      	mov	r1, r7
 8006550:	4680      	mov	r8, r0
 8006552:	2300      	movs	r3, #0
 8006554:	220a      	movs	r2, #10
 8006556:	4620      	mov	r0, r4
 8006558:	f000 fc5e 	bl	8006e18 <__multadd>
 800655c:	4607      	mov	r7, r0
 800655e:	e7f1      	b.n	8006544 <_dtoa_r+0xb04>
 8006560:	9b03      	ldr	r3, [sp, #12]
 8006562:	9302      	str	r3, [sp, #8]
 8006564:	9d01      	ldr	r5, [sp, #4]
 8006566:	ee18 0a10 	vmov	r0, s16
 800656a:	4631      	mov	r1, r6
 800656c:	f7ff f9dc 	bl	8005928 <quorem>
 8006570:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	f805 ab01 	strb.w	sl, [r5], #1
 800657a:	1aea      	subs	r2, r5, r3
 800657c:	9b02      	ldr	r3, [sp, #8]
 800657e:	4293      	cmp	r3, r2
 8006580:	dd09      	ble.n	8006596 <_dtoa_r+0xb56>
 8006582:	ee18 1a10 	vmov	r1, s16
 8006586:	2300      	movs	r3, #0
 8006588:	220a      	movs	r2, #10
 800658a:	4620      	mov	r0, r4
 800658c:	f000 fc44 	bl	8006e18 <__multadd>
 8006590:	ee08 0a10 	vmov	s16, r0
 8006594:	e7e7      	b.n	8006566 <_dtoa_r+0xb26>
 8006596:	9b02      	ldr	r3, [sp, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfc8      	it	gt
 800659c:	461d      	movgt	r5, r3
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	bfd8      	it	le
 80065a2:	2501      	movle	r5, #1
 80065a4:	441d      	add	r5, r3
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	ee18 1a10 	vmov	r1, s16
 80065ae:	2201      	movs	r2, #1
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 fe2b 	bl	800720c <__lshift>
 80065b6:	4631      	mov	r1, r6
 80065b8:	ee08 0a10 	vmov	s16, r0
 80065bc:	f000 fe96 	bl	80072ec <__mcmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	dc91      	bgt.n	80064e8 <_dtoa_r+0xaa8>
 80065c4:	d102      	bne.n	80065cc <_dtoa_r+0xb8c>
 80065c6:	f01a 0f01 	tst.w	sl, #1
 80065ca:	d18d      	bne.n	80064e8 <_dtoa_r+0xaa8>
 80065cc:	462b      	mov	r3, r5
 80065ce:	461d      	mov	r5, r3
 80065d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065d4:	2a30      	cmp	r2, #48	; 0x30
 80065d6:	d0fa      	beq.n	80065ce <_dtoa_r+0xb8e>
 80065d8:	e6d7      	b.n	800638a <_dtoa_r+0x94a>
 80065da:	9a01      	ldr	r2, [sp, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d184      	bne.n	80064ea <_dtoa_r+0xaaa>
 80065e0:	9b00      	ldr	r3, [sp, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	2331      	movs	r3, #49	; 0x31
 80065e8:	7013      	strb	r3, [r2, #0]
 80065ea:	e6ce      	b.n	800638a <_dtoa_r+0x94a>
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <_dtoa_r+0xbd4>)
 80065ee:	f7ff ba95 	b.w	8005b1c <_dtoa_r+0xdc>
 80065f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f47f aa6e 	bne.w	8005ad6 <_dtoa_r+0x96>
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <_dtoa_r+0xbd8>)
 80065fc:	f7ff ba8e 	b.w	8005b1c <_dtoa_r+0xdc>
 8006600:	9b02      	ldr	r3, [sp, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	dcae      	bgt.n	8006564 <_dtoa_r+0xb24>
 8006606:	9b06      	ldr	r3, [sp, #24]
 8006608:	2b02      	cmp	r3, #2
 800660a:	f73f aea8 	bgt.w	800635e <_dtoa_r+0x91e>
 800660e:	e7a9      	b.n	8006564 <_dtoa_r+0xb24>
 8006610:	080089e0 	.word	0x080089e0
 8006614:	080087e0 	.word	0x080087e0
 8006618:	08008961 	.word	0x08008961

0800661c <rshift>:
 800661c:	6903      	ldr	r3, [r0, #16]
 800661e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006626:	ea4f 1261 	mov.w	r2, r1, asr #5
 800662a:	f100 0414 	add.w	r4, r0, #20
 800662e:	dd45      	ble.n	80066bc <rshift+0xa0>
 8006630:	f011 011f 	ands.w	r1, r1, #31
 8006634:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006638:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800663c:	d10c      	bne.n	8006658 <rshift+0x3c>
 800663e:	f100 0710 	add.w	r7, r0, #16
 8006642:	4629      	mov	r1, r5
 8006644:	42b1      	cmp	r1, r6
 8006646:	d334      	bcc.n	80066b2 <rshift+0x96>
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	1eea      	subs	r2, r5, #3
 800664e:	4296      	cmp	r6, r2
 8006650:	bf38      	it	cc
 8006652:	2300      	movcc	r3, #0
 8006654:	4423      	add	r3, r4
 8006656:	e015      	b.n	8006684 <rshift+0x68>
 8006658:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800665c:	f1c1 0820 	rsb	r8, r1, #32
 8006660:	40cf      	lsrs	r7, r1
 8006662:	f105 0e04 	add.w	lr, r5, #4
 8006666:	46a1      	mov	r9, r4
 8006668:	4576      	cmp	r6, lr
 800666a:	46f4      	mov	ip, lr
 800666c:	d815      	bhi.n	800669a <rshift+0x7e>
 800666e:	1a9a      	subs	r2, r3, r2
 8006670:	0092      	lsls	r2, r2, #2
 8006672:	3a04      	subs	r2, #4
 8006674:	3501      	adds	r5, #1
 8006676:	42ae      	cmp	r6, r5
 8006678:	bf38      	it	cc
 800667a:	2200      	movcc	r2, #0
 800667c:	18a3      	adds	r3, r4, r2
 800667e:	50a7      	str	r7, [r4, r2]
 8006680:	b107      	cbz	r7, 8006684 <rshift+0x68>
 8006682:	3304      	adds	r3, #4
 8006684:	1b1a      	subs	r2, r3, r4
 8006686:	42a3      	cmp	r3, r4
 8006688:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800668c:	bf08      	it	eq
 800668e:	2300      	moveq	r3, #0
 8006690:	6102      	str	r2, [r0, #16]
 8006692:	bf08      	it	eq
 8006694:	6143      	streq	r3, [r0, #20]
 8006696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800669a:	f8dc c000 	ldr.w	ip, [ip]
 800669e:	fa0c fc08 	lsl.w	ip, ip, r8
 80066a2:	ea4c 0707 	orr.w	r7, ip, r7
 80066a6:	f849 7b04 	str.w	r7, [r9], #4
 80066aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066ae:	40cf      	lsrs	r7, r1
 80066b0:	e7da      	b.n	8006668 <rshift+0x4c>
 80066b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80066b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80066ba:	e7c3      	b.n	8006644 <rshift+0x28>
 80066bc:	4623      	mov	r3, r4
 80066be:	e7e1      	b.n	8006684 <rshift+0x68>

080066c0 <__hexdig_fun>:
 80066c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	d802      	bhi.n	80066ce <__hexdig_fun+0xe>
 80066c8:	3820      	subs	r0, #32
 80066ca:	b2c0      	uxtb	r0, r0
 80066cc:	4770      	bx	lr
 80066ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066d2:	2b05      	cmp	r3, #5
 80066d4:	d801      	bhi.n	80066da <__hexdig_fun+0x1a>
 80066d6:	3847      	subs	r0, #71	; 0x47
 80066d8:	e7f7      	b.n	80066ca <__hexdig_fun+0xa>
 80066da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d801      	bhi.n	80066e6 <__hexdig_fun+0x26>
 80066e2:	3827      	subs	r0, #39	; 0x27
 80066e4:	e7f1      	b.n	80066ca <__hexdig_fun+0xa>
 80066e6:	2000      	movs	r0, #0
 80066e8:	4770      	bx	lr
	...

080066ec <__gethex>:
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	ed2d 8b02 	vpush	{d8}
 80066f4:	b089      	sub	sp, #36	; 0x24
 80066f6:	ee08 0a10 	vmov	s16, r0
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	4bb4      	ldr	r3, [pc, #720]	; (80069d0 <__gethex+0x2e4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	4618      	mov	r0, r3
 8006704:	468b      	mov	fp, r1
 8006706:	4690      	mov	r8, r2
 8006708:	f7f9 fd82 	bl	8000210 <strlen>
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	f8db 2000 	ldr.w	r2, [fp]
 8006712:	4403      	add	r3, r0
 8006714:	4682      	mov	sl, r0
 8006716:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800671a:	9305      	str	r3, [sp, #20]
 800671c:	1c93      	adds	r3, r2, #2
 800671e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006722:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006726:	32fe      	adds	r2, #254	; 0xfe
 8006728:	18d1      	adds	r1, r2, r3
 800672a:	461f      	mov	r7, r3
 800672c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006730:	9100      	str	r1, [sp, #0]
 8006732:	2830      	cmp	r0, #48	; 0x30
 8006734:	d0f8      	beq.n	8006728 <__gethex+0x3c>
 8006736:	f7ff ffc3 	bl	80066c0 <__hexdig_fun>
 800673a:	4604      	mov	r4, r0
 800673c:	2800      	cmp	r0, #0
 800673e:	d13a      	bne.n	80067b6 <__gethex+0xca>
 8006740:	9901      	ldr	r1, [sp, #4]
 8006742:	4652      	mov	r2, sl
 8006744:	4638      	mov	r0, r7
 8006746:	f001 fa33 	bl	8007bb0 <strncmp>
 800674a:	4605      	mov	r5, r0
 800674c:	2800      	cmp	r0, #0
 800674e:	d168      	bne.n	8006822 <__gethex+0x136>
 8006750:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006754:	eb07 060a 	add.w	r6, r7, sl
 8006758:	f7ff ffb2 	bl	80066c0 <__hexdig_fun>
 800675c:	2800      	cmp	r0, #0
 800675e:	d062      	beq.n	8006826 <__gethex+0x13a>
 8006760:	4633      	mov	r3, r6
 8006762:	7818      	ldrb	r0, [r3, #0]
 8006764:	2830      	cmp	r0, #48	; 0x30
 8006766:	461f      	mov	r7, r3
 8006768:	f103 0301 	add.w	r3, r3, #1
 800676c:	d0f9      	beq.n	8006762 <__gethex+0x76>
 800676e:	f7ff ffa7 	bl	80066c0 <__hexdig_fun>
 8006772:	2301      	movs	r3, #1
 8006774:	fab0 f480 	clz	r4, r0
 8006778:	0964      	lsrs	r4, r4, #5
 800677a:	4635      	mov	r5, r6
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	463a      	mov	r2, r7
 8006780:	4616      	mov	r6, r2
 8006782:	3201      	adds	r2, #1
 8006784:	7830      	ldrb	r0, [r6, #0]
 8006786:	f7ff ff9b 	bl	80066c0 <__hexdig_fun>
 800678a:	2800      	cmp	r0, #0
 800678c:	d1f8      	bne.n	8006780 <__gethex+0x94>
 800678e:	9901      	ldr	r1, [sp, #4]
 8006790:	4652      	mov	r2, sl
 8006792:	4630      	mov	r0, r6
 8006794:	f001 fa0c 	bl	8007bb0 <strncmp>
 8006798:	b980      	cbnz	r0, 80067bc <__gethex+0xd0>
 800679a:	b94d      	cbnz	r5, 80067b0 <__gethex+0xc4>
 800679c:	eb06 050a 	add.w	r5, r6, sl
 80067a0:	462a      	mov	r2, r5
 80067a2:	4616      	mov	r6, r2
 80067a4:	3201      	adds	r2, #1
 80067a6:	7830      	ldrb	r0, [r6, #0]
 80067a8:	f7ff ff8a 	bl	80066c0 <__hexdig_fun>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d1f8      	bne.n	80067a2 <__gethex+0xb6>
 80067b0:	1bad      	subs	r5, r5, r6
 80067b2:	00ad      	lsls	r5, r5, #2
 80067b4:	e004      	b.n	80067c0 <__gethex+0xd4>
 80067b6:	2400      	movs	r4, #0
 80067b8:	4625      	mov	r5, r4
 80067ba:	e7e0      	b.n	800677e <__gethex+0x92>
 80067bc:	2d00      	cmp	r5, #0
 80067be:	d1f7      	bne.n	80067b0 <__gethex+0xc4>
 80067c0:	7833      	ldrb	r3, [r6, #0]
 80067c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067c6:	2b50      	cmp	r3, #80	; 0x50
 80067c8:	d13b      	bne.n	8006842 <__gethex+0x156>
 80067ca:	7873      	ldrb	r3, [r6, #1]
 80067cc:	2b2b      	cmp	r3, #43	; 0x2b
 80067ce:	d02c      	beq.n	800682a <__gethex+0x13e>
 80067d0:	2b2d      	cmp	r3, #45	; 0x2d
 80067d2:	d02e      	beq.n	8006832 <__gethex+0x146>
 80067d4:	1c71      	adds	r1, r6, #1
 80067d6:	f04f 0900 	mov.w	r9, #0
 80067da:	7808      	ldrb	r0, [r1, #0]
 80067dc:	f7ff ff70 	bl	80066c0 <__hexdig_fun>
 80067e0:	1e43      	subs	r3, r0, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b18      	cmp	r3, #24
 80067e6:	d82c      	bhi.n	8006842 <__gethex+0x156>
 80067e8:	f1a0 0210 	sub.w	r2, r0, #16
 80067ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80067f0:	f7ff ff66 	bl	80066c0 <__hexdig_fun>
 80067f4:	1e43      	subs	r3, r0, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b18      	cmp	r3, #24
 80067fa:	d91d      	bls.n	8006838 <__gethex+0x14c>
 80067fc:	f1b9 0f00 	cmp.w	r9, #0
 8006800:	d000      	beq.n	8006804 <__gethex+0x118>
 8006802:	4252      	negs	r2, r2
 8006804:	4415      	add	r5, r2
 8006806:	f8cb 1000 	str.w	r1, [fp]
 800680a:	b1e4      	cbz	r4, 8006846 <__gethex+0x15a>
 800680c:	9b00      	ldr	r3, [sp, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	bf14      	ite	ne
 8006812:	2700      	movne	r7, #0
 8006814:	2706      	moveq	r7, #6
 8006816:	4638      	mov	r0, r7
 8006818:	b009      	add	sp, #36	; 0x24
 800681a:	ecbd 8b02 	vpop	{d8}
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	463e      	mov	r6, r7
 8006824:	4625      	mov	r5, r4
 8006826:	2401      	movs	r4, #1
 8006828:	e7ca      	b.n	80067c0 <__gethex+0xd4>
 800682a:	f04f 0900 	mov.w	r9, #0
 800682e:	1cb1      	adds	r1, r6, #2
 8006830:	e7d3      	b.n	80067da <__gethex+0xee>
 8006832:	f04f 0901 	mov.w	r9, #1
 8006836:	e7fa      	b.n	800682e <__gethex+0x142>
 8006838:	230a      	movs	r3, #10
 800683a:	fb03 0202 	mla	r2, r3, r2, r0
 800683e:	3a10      	subs	r2, #16
 8006840:	e7d4      	b.n	80067ec <__gethex+0x100>
 8006842:	4631      	mov	r1, r6
 8006844:	e7df      	b.n	8006806 <__gethex+0x11a>
 8006846:	1bf3      	subs	r3, r6, r7
 8006848:	3b01      	subs	r3, #1
 800684a:	4621      	mov	r1, r4
 800684c:	2b07      	cmp	r3, #7
 800684e:	dc0b      	bgt.n	8006868 <__gethex+0x17c>
 8006850:	ee18 0a10 	vmov	r0, s16
 8006854:	f000 fa7e 	bl	8006d54 <_Balloc>
 8006858:	4604      	mov	r4, r0
 800685a:	b940      	cbnz	r0, 800686e <__gethex+0x182>
 800685c:	4b5d      	ldr	r3, [pc, #372]	; (80069d4 <__gethex+0x2e8>)
 800685e:	4602      	mov	r2, r0
 8006860:	21de      	movs	r1, #222	; 0xde
 8006862:	485d      	ldr	r0, [pc, #372]	; (80069d8 <__gethex+0x2ec>)
 8006864:	f001 f9c6 	bl	8007bf4 <__assert_func>
 8006868:	3101      	adds	r1, #1
 800686a:	105b      	asrs	r3, r3, #1
 800686c:	e7ee      	b.n	800684c <__gethex+0x160>
 800686e:	f100 0914 	add.w	r9, r0, #20
 8006872:	f04f 0b00 	mov.w	fp, #0
 8006876:	f1ca 0301 	rsb	r3, sl, #1
 800687a:	f8cd 9008 	str.w	r9, [sp, #8]
 800687e:	f8cd b000 	str.w	fp, [sp]
 8006882:	9306      	str	r3, [sp, #24]
 8006884:	42b7      	cmp	r7, r6
 8006886:	d340      	bcc.n	800690a <__gethex+0x21e>
 8006888:	9802      	ldr	r0, [sp, #8]
 800688a:	9b00      	ldr	r3, [sp, #0]
 800688c:	f840 3b04 	str.w	r3, [r0], #4
 8006890:	eba0 0009 	sub.w	r0, r0, r9
 8006894:	1080      	asrs	r0, r0, #2
 8006896:	0146      	lsls	r6, r0, #5
 8006898:	6120      	str	r0, [r4, #16]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb4c 	bl	8006f38 <__hi0bits>
 80068a0:	1a30      	subs	r0, r6, r0
 80068a2:	f8d8 6000 	ldr.w	r6, [r8]
 80068a6:	42b0      	cmp	r0, r6
 80068a8:	dd63      	ble.n	8006972 <__gethex+0x286>
 80068aa:	1b87      	subs	r7, r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fef0 	bl	8007694 <__any_on>
 80068b4:	4682      	mov	sl, r0
 80068b6:	b1a8      	cbz	r0, 80068e4 <__gethex+0x1f8>
 80068b8:	1e7b      	subs	r3, r7, #1
 80068ba:	1159      	asrs	r1, r3, #5
 80068bc:	f003 021f 	and.w	r2, r3, #31
 80068c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80068c4:	f04f 0a01 	mov.w	sl, #1
 80068c8:	fa0a f202 	lsl.w	r2, sl, r2
 80068cc:	420a      	tst	r2, r1
 80068ce:	d009      	beq.n	80068e4 <__gethex+0x1f8>
 80068d0:	4553      	cmp	r3, sl
 80068d2:	dd05      	ble.n	80068e0 <__gethex+0x1f4>
 80068d4:	1eb9      	subs	r1, r7, #2
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fedc 	bl	8007694 <__any_on>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d145      	bne.n	800696c <__gethex+0x280>
 80068e0:	f04f 0a02 	mov.w	sl, #2
 80068e4:	4639      	mov	r1, r7
 80068e6:	4620      	mov	r0, r4
 80068e8:	f7ff fe98 	bl	800661c <rshift>
 80068ec:	443d      	add	r5, r7
 80068ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068f2:	42ab      	cmp	r3, r5
 80068f4:	da4c      	bge.n	8006990 <__gethex+0x2a4>
 80068f6:	ee18 0a10 	vmov	r0, s16
 80068fa:	4621      	mov	r1, r4
 80068fc:	f000 fa6a 	bl	8006dd4 <_Bfree>
 8006900:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006902:	2300      	movs	r3, #0
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	27a3      	movs	r7, #163	; 0xa3
 8006908:	e785      	b.n	8006816 <__gethex+0x12a>
 800690a:	1e73      	subs	r3, r6, #1
 800690c:	9a05      	ldr	r2, [sp, #20]
 800690e:	9303      	str	r3, [sp, #12]
 8006910:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006914:	4293      	cmp	r3, r2
 8006916:	d019      	beq.n	800694c <__gethex+0x260>
 8006918:	f1bb 0f20 	cmp.w	fp, #32
 800691c:	d107      	bne.n	800692e <__gethex+0x242>
 800691e:	9b02      	ldr	r3, [sp, #8]
 8006920:	9a00      	ldr	r2, [sp, #0]
 8006922:	f843 2b04 	str.w	r2, [r3], #4
 8006926:	9302      	str	r3, [sp, #8]
 8006928:	2300      	movs	r3, #0
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	469b      	mov	fp, r3
 800692e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006932:	f7ff fec5 	bl	80066c0 <__hexdig_fun>
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	f000 000f 	and.w	r0, r0, #15
 800693c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006940:	4303      	orrs	r3, r0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	f10b 0b04 	add.w	fp, fp, #4
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	e00d      	b.n	8006968 <__gethex+0x27c>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	9a06      	ldr	r2, [sp, #24]
 8006950:	4413      	add	r3, r2
 8006952:	42bb      	cmp	r3, r7
 8006954:	d3e0      	bcc.n	8006918 <__gethex+0x22c>
 8006956:	4618      	mov	r0, r3
 8006958:	9901      	ldr	r1, [sp, #4]
 800695a:	9307      	str	r3, [sp, #28]
 800695c:	4652      	mov	r2, sl
 800695e:	f001 f927 	bl	8007bb0 <strncmp>
 8006962:	9b07      	ldr	r3, [sp, #28]
 8006964:	2800      	cmp	r0, #0
 8006966:	d1d7      	bne.n	8006918 <__gethex+0x22c>
 8006968:	461e      	mov	r6, r3
 800696a:	e78b      	b.n	8006884 <__gethex+0x198>
 800696c:	f04f 0a03 	mov.w	sl, #3
 8006970:	e7b8      	b.n	80068e4 <__gethex+0x1f8>
 8006972:	da0a      	bge.n	800698a <__gethex+0x29e>
 8006974:	1a37      	subs	r7, r6, r0
 8006976:	4621      	mov	r1, r4
 8006978:	ee18 0a10 	vmov	r0, s16
 800697c:	463a      	mov	r2, r7
 800697e:	f000 fc45 	bl	800720c <__lshift>
 8006982:	1bed      	subs	r5, r5, r7
 8006984:	4604      	mov	r4, r0
 8006986:	f100 0914 	add.w	r9, r0, #20
 800698a:	f04f 0a00 	mov.w	sl, #0
 800698e:	e7ae      	b.n	80068ee <__gethex+0x202>
 8006990:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006994:	42a8      	cmp	r0, r5
 8006996:	dd72      	ble.n	8006a7e <__gethex+0x392>
 8006998:	1b45      	subs	r5, r0, r5
 800699a:	42ae      	cmp	r6, r5
 800699c:	dc36      	bgt.n	8006a0c <__gethex+0x320>
 800699e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d02a      	beq.n	80069fc <__gethex+0x310>
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d02c      	beq.n	8006a04 <__gethex+0x318>
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d11c      	bne.n	80069e8 <__gethex+0x2fc>
 80069ae:	42ae      	cmp	r6, r5
 80069b0:	d11a      	bne.n	80069e8 <__gethex+0x2fc>
 80069b2:	2e01      	cmp	r6, #1
 80069b4:	d112      	bne.n	80069dc <__gethex+0x2f0>
 80069b6:	9a04      	ldr	r2, [sp, #16]
 80069b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	2301      	movs	r3, #1
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	f8c9 3000 	str.w	r3, [r9]
 80069c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069c8:	2762      	movs	r7, #98	; 0x62
 80069ca:	601c      	str	r4, [r3, #0]
 80069cc:	e723      	b.n	8006816 <__gethex+0x12a>
 80069ce:	bf00      	nop
 80069d0:	08008a58 	.word	0x08008a58
 80069d4:	080089e0 	.word	0x080089e0
 80069d8:	080089f1 	.word	0x080089f1
 80069dc:	1e71      	subs	r1, r6, #1
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 fe58 	bl	8007694 <__any_on>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d1e6      	bne.n	80069b6 <__gethex+0x2ca>
 80069e8:	ee18 0a10 	vmov	r0, s16
 80069ec:	4621      	mov	r1, r4
 80069ee:	f000 f9f1 	bl	8006dd4 <_Bfree>
 80069f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069f4:	2300      	movs	r3, #0
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	2750      	movs	r7, #80	; 0x50
 80069fa:	e70c      	b.n	8006816 <__gethex+0x12a>
 80069fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f2      	bne.n	80069e8 <__gethex+0x2fc>
 8006a02:	e7d8      	b.n	80069b6 <__gethex+0x2ca>
 8006a04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1d5      	bne.n	80069b6 <__gethex+0x2ca>
 8006a0a:	e7ed      	b.n	80069e8 <__gethex+0x2fc>
 8006a0c:	1e6f      	subs	r7, r5, #1
 8006a0e:	f1ba 0f00 	cmp.w	sl, #0
 8006a12:	d131      	bne.n	8006a78 <__gethex+0x38c>
 8006a14:	b127      	cbz	r7, 8006a20 <__gethex+0x334>
 8006a16:	4639      	mov	r1, r7
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fe3b 	bl	8007694 <__any_on>
 8006a1e:	4682      	mov	sl, r0
 8006a20:	117b      	asrs	r3, r7, #5
 8006a22:	2101      	movs	r1, #1
 8006a24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a28:	f007 071f 	and.w	r7, r7, #31
 8006a2c:	fa01 f707 	lsl.w	r7, r1, r7
 8006a30:	421f      	tst	r7, r3
 8006a32:	4629      	mov	r1, r5
 8006a34:	4620      	mov	r0, r4
 8006a36:	bf18      	it	ne
 8006a38:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a3c:	1b76      	subs	r6, r6, r5
 8006a3e:	f7ff fded 	bl	800661c <rshift>
 8006a42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a46:	2702      	movs	r7, #2
 8006a48:	f1ba 0f00 	cmp.w	sl, #0
 8006a4c:	d048      	beq.n	8006ae0 <__gethex+0x3f4>
 8006a4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d015      	beq.n	8006a82 <__gethex+0x396>
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d017      	beq.n	8006a8a <__gethex+0x39e>
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d109      	bne.n	8006a72 <__gethex+0x386>
 8006a5e:	f01a 0f02 	tst.w	sl, #2
 8006a62:	d006      	beq.n	8006a72 <__gethex+0x386>
 8006a64:	f8d9 0000 	ldr.w	r0, [r9]
 8006a68:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a6c:	f01a 0f01 	tst.w	sl, #1
 8006a70:	d10e      	bne.n	8006a90 <__gethex+0x3a4>
 8006a72:	f047 0710 	orr.w	r7, r7, #16
 8006a76:	e033      	b.n	8006ae0 <__gethex+0x3f4>
 8006a78:	f04f 0a01 	mov.w	sl, #1
 8006a7c:	e7d0      	b.n	8006a20 <__gethex+0x334>
 8006a7e:	2701      	movs	r7, #1
 8006a80:	e7e2      	b.n	8006a48 <__gethex+0x35c>
 8006a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a84:	f1c3 0301 	rsb	r3, r3, #1
 8006a88:	9315      	str	r3, [sp, #84]	; 0x54
 8006a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f0      	beq.n	8006a72 <__gethex+0x386>
 8006a90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006a94:	f104 0314 	add.w	r3, r4, #20
 8006a98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006a9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006aa0:	f04f 0c00 	mov.w	ip, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aaa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006aae:	d01c      	beq.n	8006aea <__gethex+0x3fe>
 8006ab0:	3201      	adds	r2, #1
 8006ab2:	6002      	str	r2, [r0, #0]
 8006ab4:	2f02      	cmp	r7, #2
 8006ab6:	f104 0314 	add.w	r3, r4, #20
 8006aba:	d13f      	bne.n	8006b3c <__gethex+0x450>
 8006abc:	f8d8 2000 	ldr.w	r2, [r8]
 8006ac0:	3a01      	subs	r2, #1
 8006ac2:	42b2      	cmp	r2, r6
 8006ac4:	d10a      	bne.n	8006adc <__gethex+0x3f0>
 8006ac6:	1171      	asrs	r1, r6, #5
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ace:	f006 061f 	and.w	r6, r6, #31
 8006ad2:	fa02 f606 	lsl.w	r6, r2, r6
 8006ad6:	421e      	tst	r6, r3
 8006ad8:	bf18      	it	ne
 8006ada:	4617      	movne	r7, r2
 8006adc:	f047 0720 	orr.w	r7, r7, #32
 8006ae0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ae2:	601c      	str	r4, [r3, #0]
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	601d      	str	r5, [r3, #0]
 8006ae8:	e695      	b.n	8006816 <__gethex+0x12a>
 8006aea:	4299      	cmp	r1, r3
 8006aec:	f843 cc04 	str.w	ip, [r3, #-4]
 8006af0:	d8d8      	bhi.n	8006aa4 <__gethex+0x3b8>
 8006af2:	68a3      	ldr	r3, [r4, #8]
 8006af4:	459b      	cmp	fp, r3
 8006af6:	db19      	blt.n	8006b2c <__gethex+0x440>
 8006af8:	6861      	ldr	r1, [r4, #4]
 8006afa:	ee18 0a10 	vmov	r0, s16
 8006afe:	3101      	adds	r1, #1
 8006b00:	f000 f928 	bl	8006d54 <_Balloc>
 8006b04:	4681      	mov	r9, r0
 8006b06:	b918      	cbnz	r0, 8006b10 <__gethex+0x424>
 8006b08:	4b1a      	ldr	r3, [pc, #104]	; (8006b74 <__gethex+0x488>)
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	2184      	movs	r1, #132	; 0x84
 8006b0e:	e6a8      	b.n	8006862 <__gethex+0x176>
 8006b10:	6922      	ldr	r2, [r4, #16]
 8006b12:	3202      	adds	r2, #2
 8006b14:	f104 010c 	add.w	r1, r4, #12
 8006b18:	0092      	lsls	r2, r2, #2
 8006b1a:	300c      	adds	r0, #12
 8006b1c:	f000 f90c 	bl	8006d38 <memcpy>
 8006b20:	4621      	mov	r1, r4
 8006b22:	ee18 0a10 	vmov	r0, s16
 8006b26:	f000 f955 	bl	8006dd4 <_Bfree>
 8006b2a:	464c      	mov	r4, r9
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b34:	6122      	str	r2, [r4, #16]
 8006b36:	2201      	movs	r2, #1
 8006b38:	615a      	str	r2, [r3, #20]
 8006b3a:	e7bb      	b.n	8006ab4 <__gethex+0x3c8>
 8006b3c:	6922      	ldr	r2, [r4, #16]
 8006b3e:	455a      	cmp	r2, fp
 8006b40:	dd0b      	ble.n	8006b5a <__gethex+0x46e>
 8006b42:	2101      	movs	r1, #1
 8006b44:	4620      	mov	r0, r4
 8006b46:	f7ff fd69 	bl	800661c <rshift>
 8006b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b4e:	3501      	adds	r5, #1
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	f6ff aed0 	blt.w	80068f6 <__gethex+0x20a>
 8006b56:	2701      	movs	r7, #1
 8006b58:	e7c0      	b.n	8006adc <__gethex+0x3f0>
 8006b5a:	f016 061f 	ands.w	r6, r6, #31
 8006b5e:	d0fa      	beq.n	8006b56 <__gethex+0x46a>
 8006b60:	4453      	add	r3, sl
 8006b62:	f1c6 0620 	rsb	r6, r6, #32
 8006b66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006b6a:	f000 f9e5 	bl	8006f38 <__hi0bits>
 8006b6e:	42b0      	cmp	r0, r6
 8006b70:	dbe7      	blt.n	8006b42 <__gethex+0x456>
 8006b72:	e7f0      	b.n	8006b56 <__gethex+0x46a>
 8006b74:	080089e0 	.word	0x080089e0

08006b78 <L_shift>:
 8006b78:	f1c2 0208 	rsb	r2, r2, #8
 8006b7c:	0092      	lsls	r2, r2, #2
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	f1c2 0620 	rsb	r6, r2, #32
 8006b84:	6843      	ldr	r3, [r0, #4]
 8006b86:	6804      	ldr	r4, [r0, #0]
 8006b88:	fa03 f506 	lsl.w	r5, r3, r6
 8006b8c:	432c      	orrs	r4, r5
 8006b8e:	40d3      	lsrs	r3, r2
 8006b90:	6004      	str	r4, [r0, #0]
 8006b92:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b96:	4288      	cmp	r0, r1
 8006b98:	d3f4      	bcc.n	8006b84 <L_shift+0xc>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}

08006b9c <__match>:
 8006b9c:	b530      	push	{r4, r5, lr}
 8006b9e:	6803      	ldr	r3, [r0, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba6:	b914      	cbnz	r4, 8006bae <__match+0x12>
 8006ba8:	6003      	str	r3, [r0, #0]
 8006baa:	2001      	movs	r0, #1
 8006bac:	bd30      	pop	{r4, r5, pc}
 8006bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006bb6:	2d19      	cmp	r5, #25
 8006bb8:	bf98      	it	ls
 8006bba:	3220      	addls	r2, #32
 8006bbc:	42a2      	cmp	r2, r4
 8006bbe:	d0f0      	beq.n	8006ba2 <__match+0x6>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e7f3      	b.n	8006bac <__match+0x10>

08006bc4 <__hexnan>:
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	680b      	ldr	r3, [r1, #0]
 8006bca:	115e      	asrs	r6, r3, #5
 8006bcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006bd0:	f013 031f 	ands.w	r3, r3, #31
 8006bd4:	b087      	sub	sp, #28
 8006bd6:	bf18      	it	ne
 8006bd8:	3604      	addne	r6, #4
 8006bda:	2500      	movs	r5, #0
 8006bdc:	1f37      	subs	r7, r6, #4
 8006bde:	4690      	mov	r8, r2
 8006be0:	6802      	ldr	r2, [r0, #0]
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	4682      	mov	sl, r0
 8006be6:	f846 5c04 	str.w	r5, [r6, #-4]
 8006bea:	46b9      	mov	r9, r7
 8006bec:	463c      	mov	r4, r7
 8006bee:	9502      	str	r5, [sp, #8]
 8006bf0:	46ab      	mov	fp, r5
 8006bf2:	7851      	ldrb	r1, [r2, #1]
 8006bf4:	1c53      	adds	r3, r2, #1
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	b341      	cbz	r1, 8006c4c <__hexnan+0x88>
 8006bfa:	4608      	mov	r0, r1
 8006bfc:	9205      	str	r2, [sp, #20]
 8006bfe:	9104      	str	r1, [sp, #16]
 8006c00:	f7ff fd5e 	bl	80066c0 <__hexdig_fun>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d14f      	bne.n	8006ca8 <__hexnan+0xe4>
 8006c08:	9904      	ldr	r1, [sp, #16]
 8006c0a:	9a05      	ldr	r2, [sp, #20]
 8006c0c:	2920      	cmp	r1, #32
 8006c0e:	d818      	bhi.n	8006c42 <__hexnan+0x7e>
 8006c10:	9b02      	ldr	r3, [sp, #8]
 8006c12:	459b      	cmp	fp, r3
 8006c14:	dd13      	ble.n	8006c3e <__hexnan+0x7a>
 8006c16:	454c      	cmp	r4, r9
 8006c18:	d206      	bcs.n	8006c28 <__hexnan+0x64>
 8006c1a:	2d07      	cmp	r5, #7
 8006c1c:	dc04      	bgt.n	8006c28 <__hexnan+0x64>
 8006c1e:	462a      	mov	r2, r5
 8006c20:	4649      	mov	r1, r9
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff ffa8 	bl	8006b78 <L_shift>
 8006c28:	4544      	cmp	r4, r8
 8006c2a:	d950      	bls.n	8006cce <__hexnan+0x10a>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f1a4 0904 	sub.w	r9, r4, #4
 8006c32:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c36:	f8cd b008 	str.w	fp, [sp, #8]
 8006c3a:	464c      	mov	r4, r9
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	9a03      	ldr	r2, [sp, #12]
 8006c40:	e7d7      	b.n	8006bf2 <__hexnan+0x2e>
 8006c42:	2929      	cmp	r1, #41	; 0x29
 8006c44:	d156      	bne.n	8006cf4 <__hexnan+0x130>
 8006c46:	3202      	adds	r2, #2
 8006c48:	f8ca 2000 	str.w	r2, [sl]
 8006c4c:	f1bb 0f00 	cmp.w	fp, #0
 8006c50:	d050      	beq.n	8006cf4 <__hexnan+0x130>
 8006c52:	454c      	cmp	r4, r9
 8006c54:	d206      	bcs.n	8006c64 <__hexnan+0xa0>
 8006c56:	2d07      	cmp	r5, #7
 8006c58:	dc04      	bgt.n	8006c64 <__hexnan+0xa0>
 8006c5a:	462a      	mov	r2, r5
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7ff ff8a 	bl	8006b78 <L_shift>
 8006c64:	4544      	cmp	r4, r8
 8006c66:	d934      	bls.n	8006cd2 <__hexnan+0x10e>
 8006c68:	f1a8 0204 	sub.w	r2, r8, #4
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c72:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c76:	429f      	cmp	r7, r3
 8006c78:	d2f9      	bcs.n	8006c6e <__hexnan+0xaa>
 8006c7a:	1b3b      	subs	r3, r7, r4
 8006c7c:	f023 0303 	bic.w	r3, r3, #3
 8006c80:	3304      	adds	r3, #4
 8006c82:	3401      	adds	r4, #1
 8006c84:	3e03      	subs	r6, #3
 8006c86:	42b4      	cmp	r4, r6
 8006c88:	bf88      	it	hi
 8006c8a:	2304      	movhi	r3, #4
 8006c8c:	4443      	add	r3, r8
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f843 2b04 	str.w	r2, [r3], #4
 8006c94:	429f      	cmp	r7, r3
 8006c96:	d2fb      	bcs.n	8006c90 <__hexnan+0xcc>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	b91b      	cbnz	r3, 8006ca4 <__hexnan+0xe0>
 8006c9c:	4547      	cmp	r7, r8
 8006c9e:	d127      	bne.n	8006cf0 <__hexnan+0x12c>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	2005      	movs	r0, #5
 8006ca6:	e026      	b.n	8006cf6 <__hexnan+0x132>
 8006ca8:	3501      	adds	r5, #1
 8006caa:	2d08      	cmp	r5, #8
 8006cac:	f10b 0b01 	add.w	fp, fp, #1
 8006cb0:	dd06      	ble.n	8006cc0 <__hexnan+0xfc>
 8006cb2:	4544      	cmp	r4, r8
 8006cb4:	d9c3      	bls.n	8006c3e <__hexnan+0x7a>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cbc:	2501      	movs	r5, #1
 8006cbe:	3c04      	subs	r4, #4
 8006cc0:	6822      	ldr	r2, [r4, #0]
 8006cc2:	f000 000f 	and.w	r0, r0, #15
 8006cc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006cca:	6022      	str	r2, [r4, #0]
 8006ccc:	e7b7      	b.n	8006c3e <__hexnan+0x7a>
 8006cce:	2508      	movs	r5, #8
 8006cd0:	e7b5      	b.n	8006c3e <__hexnan+0x7a>
 8006cd2:	9b01      	ldr	r3, [sp, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0df      	beq.n	8006c98 <__hexnan+0xd4>
 8006cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cdc:	f1c3 0320 	rsb	r3, r3, #32
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ce8:	401a      	ands	r2, r3
 8006cea:	f846 2c04 	str.w	r2, [r6, #-4]
 8006cee:	e7d3      	b.n	8006c98 <__hexnan+0xd4>
 8006cf0:	3f04      	subs	r7, #4
 8006cf2:	e7d1      	b.n	8006c98 <__hexnan+0xd4>
 8006cf4:	2004      	movs	r0, #4
 8006cf6:	b007      	add	sp, #28
 8006cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cfc <_localeconv_r>:
 8006cfc:	4800      	ldr	r0, [pc, #0]	; (8006d00 <_localeconv_r+0x4>)
 8006cfe:	4770      	bx	lr
 8006d00:	20000168 	.word	0x20000168

08006d04 <malloc>:
 8006d04:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <malloc+0xc>)
 8006d06:	4601      	mov	r1, r0
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	f000 bd67 	b.w	80077dc <_malloc_r>
 8006d0e:	bf00      	nop
 8006d10:	20000010 	.word	0x20000010

08006d14 <__ascii_mbtowc>:
 8006d14:	b082      	sub	sp, #8
 8006d16:	b901      	cbnz	r1, 8006d1a <__ascii_mbtowc+0x6>
 8006d18:	a901      	add	r1, sp, #4
 8006d1a:	b142      	cbz	r2, 8006d2e <__ascii_mbtowc+0x1a>
 8006d1c:	b14b      	cbz	r3, 8006d32 <__ascii_mbtowc+0x1e>
 8006d1e:	7813      	ldrb	r3, [r2, #0]
 8006d20:	600b      	str	r3, [r1, #0]
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	1e10      	subs	r0, r2, #0
 8006d26:	bf18      	it	ne
 8006d28:	2001      	movne	r0, #1
 8006d2a:	b002      	add	sp, #8
 8006d2c:	4770      	bx	lr
 8006d2e:	4610      	mov	r0, r2
 8006d30:	e7fb      	b.n	8006d2a <__ascii_mbtowc+0x16>
 8006d32:	f06f 0001 	mvn.w	r0, #1
 8006d36:	e7f8      	b.n	8006d2a <__ascii_mbtowc+0x16>

08006d38 <memcpy>:
 8006d38:	440a      	add	r2, r1
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d40:	d100      	bne.n	8006d44 <memcpy+0xc>
 8006d42:	4770      	bx	lr
 8006d44:	b510      	push	{r4, lr}
 8006d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d4e:	4291      	cmp	r1, r2
 8006d50:	d1f9      	bne.n	8006d46 <memcpy+0xe>
 8006d52:	bd10      	pop	{r4, pc}

08006d54 <_Balloc>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	b976      	cbnz	r6, 8006d7c <_Balloc+0x28>
 8006d5e:	2010      	movs	r0, #16
 8006d60:	f7ff ffd0 	bl	8006d04 <malloc>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6260      	str	r0, [r4, #36]	; 0x24
 8006d68:	b920      	cbnz	r0, 8006d74 <_Balloc+0x20>
 8006d6a:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <_Balloc+0x78>)
 8006d6c:	4818      	ldr	r0, [pc, #96]	; (8006dd0 <_Balloc+0x7c>)
 8006d6e:	2166      	movs	r1, #102	; 0x66
 8006d70:	f000 ff40 	bl	8007bf4 <__assert_func>
 8006d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d78:	6006      	str	r6, [r0, #0]
 8006d7a:	60c6      	str	r6, [r0, #12]
 8006d7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d7e:	68f3      	ldr	r3, [r6, #12]
 8006d80:	b183      	cbz	r3, 8006da4 <_Balloc+0x50>
 8006d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d8a:	b9b8      	cbnz	r0, 8006dbc <_Balloc+0x68>
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006d92:	1d72      	adds	r2, r6, #5
 8006d94:	0092      	lsls	r2, r2, #2
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 fc9d 	bl	80076d6 <_calloc_r>
 8006d9c:	b160      	cbz	r0, 8006db8 <_Balloc+0x64>
 8006d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006da2:	e00e      	b.n	8006dc2 <_Balloc+0x6e>
 8006da4:	2221      	movs	r2, #33	; 0x21
 8006da6:	2104      	movs	r1, #4
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fc94 	bl	80076d6 <_calloc_r>
 8006dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db0:	60f0      	str	r0, [r6, #12]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e4      	bne.n	8006d82 <_Balloc+0x2e>
 8006db8:	2000      	movs	r0, #0
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	6802      	ldr	r2, [r0, #0]
 8006dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dc8:	e7f7      	b.n	8006dba <_Balloc+0x66>
 8006dca:	bf00      	nop
 8006dcc:	0800896e 	.word	0x0800896e
 8006dd0:	08008a6c 	.word	0x08008a6c

08006dd4 <_Bfree>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	b976      	cbnz	r6, 8006dfc <_Bfree+0x28>
 8006dde:	2010      	movs	r0, #16
 8006de0:	f7ff ff90 	bl	8006d04 <malloc>
 8006de4:	4602      	mov	r2, r0
 8006de6:	6268      	str	r0, [r5, #36]	; 0x24
 8006de8:	b920      	cbnz	r0, 8006df4 <_Bfree+0x20>
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <_Bfree+0x3c>)
 8006dec:	4809      	ldr	r0, [pc, #36]	; (8006e14 <_Bfree+0x40>)
 8006dee:	218a      	movs	r1, #138	; 0x8a
 8006df0:	f000 ff00 	bl	8007bf4 <__assert_func>
 8006df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006df8:	6006      	str	r6, [r0, #0]
 8006dfa:	60c6      	str	r6, [r0, #12]
 8006dfc:	b13c      	cbz	r4, 8006e0e <_Bfree+0x3a>
 8006dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e00:	6862      	ldr	r2, [r4, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e08:	6021      	str	r1, [r4, #0]
 8006e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	0800896e 	.word	0x0800896e
 8006e14:	08008a6c 	.word	0x08008a6c

08006e18 <__multadd>:
 8006e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1c:	690d      	ldr	r5, [r1, #16]
 8006e1e:	4607      	mov	r7, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	461e      	mov	r6, r3
 8006e24:	f101 0c14 	add.w	ip, r1, #20
 8006e28:	2000      	movs	r0, #0
 8006e2a:	f8dc 3000 	ldr.w	r3, [ip]
 8006e2e:	b299      	uxth	r1, r3
 8006e30:	fb02 6101 	mla	r1, r2, r1, r6
 8006e34:	0c1e      	lsrs	r6, r3, #16
 8006e36:	0c0b      	lsrs	r3, r1, #16
 8006e38:	fb02 3306 	mla	r3, r2, r6, r3
 8006e3c:	b289      	uxth	r1, r1
 8006e3e:	3001      	adds	r0, #1
 8006e40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e44:	4285      	cmp	r5, r0
 8006e46:	f84c 1b04 	str.w	r1, [ip], #4
 8006e4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e4e:	dcec      	bgt.n	8006e2a <__multadd+0x12>
 8006e50:	b30e      	cbz	r6, 8006e96 <__multadd+0x7e>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dc19      	bgt.n	8006e8c <__multadd+0x74>
 8006e58:	6861      	ldr	r1, [r4, #4]
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	f7ff ff79 	bl	8006d54 <_Balloc>
 8006e62:	4680      	mov	r8, r0
 8006e64:	b928      	cbnz	r0, 8006e72 <__multadd+0x5a>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <__multadd+0x84>)
 8006e6a:	480d      	ldr	r0, [pc, #52]	; (8006ea0 <__multadd+0x88>)
 8006e6c:	21b5      	movs	r1, #181	; 0xb5
 8006e6e:	f000 fec1 	bl	8007bf4 <__assert_func>
 8006e72:	6922      	ldr	r2, [r4, #16]
 8006e74:	3202      	adds	r2, #2
 8006e76:	f104 010c 	add.w	r1, r4, #12
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	300c      	adds	r0, #12
 8006e7e:	f7ff ff5b 	bl	8006d38 <memcpy>
 8006e82:	4621      	mov	r1, r4
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff ffa5 	bl	8006dd4 <_Bfree>
 8006e8a:	4644      	mov	r4, r8
 8006e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e90:	3501      	adds	r5, #1
 8006e92:	615e      	str	r6, [r3, #20]
 8006e94:	6125      	str	r5, [r4, #16]
 8006e96:	4620      	mov	r0, r4
 8006e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9c:	080089e0 	.word	0x080089e0
 8006ea0:	08008a6c 	.word	0x08008a6c

08006ea4 <__s2b>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	4615      	mov	r5, r2
 8006eac:	461f      	mov	r7, r3
 8006eae:	2209      	movs	r2, #9
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eb8:	2100      	movs	r1, #0
 8006eba:	2201      	movs	r2, #1
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	db09      	blt.n	8006ed4 <__s2b+0x30>
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7ff ff47 	bl	8006d54 <_Balloc>
 8006ec6:	b940      	cbnz	r0, 8006eda <__s2b+0x36>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <__s2b+0x8c>)
 8006ecc:	4819      	ldr	r0, [pc, #100]	; (8006f34 <__s2b+0x90>)
 8006ece:	21ce      	movs	r1, #206	; 0xce
 8006ed0:	f000 fe90 	bl	8007bf4 <__assert_func>
 8006ed4:	0052      	lsls	r2, r2, #1
 8006ed6:	3101      	adds	r1, #1
 8006ed8:	e7f0      	b.n	8006ebc <__s2b+0x18>
 8006eda:	9b08      	ldr	r3, [sp, #32]
 8006edc:	6143      	str	r3, [r0, #20]
 8006ede:	2d09      	cmp	r5, #9
 8006ee0:	f04f 0301 	mov.w	r3, #1
 8006ee4:	6103      	str	r3, [r0, #16]
 8006ee6:	dd16      	ble.n	8006f16 <__s2b+0x72>
 8006ee8:	f104 0909 	add.w	r9, r4, #9
 8006eec:	46c8      	mov	r8, r9
 8006eee:	442c      	add	r4, r5
 8006ef0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	3b30      	subs	r3, #48	; 0x30
 8006ef8:	220a      	movs	r2, #10
 8006efa:	4630      	mov	r0, r6
 8006efc:	f7ff ff8c 	bl	8006e18 <__multadd>
 8006f00:	45a0      	cmp	r8, r4
 8006f02:	d1f5      	bne.n	8006ef0 <__s2b+0x4c>
 8006f04:	f1a5 0408 	sub.w	r4, r5, #8
 8006f08:	444c      	add	r4, r9
 8006f0a:	1b2d      	subs	r5, r5, r4
 8006f0c:	1963      	adds	r3, r4, r5
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	db04      	blt.n	8006f1c <__s2b+0x78>
 8006f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f16:	340a      	adds	r4, #10
 8006f18:	2509      	movs	r5, #9
 8006f1a:	e7f6      	b.n	8006f0a <__s2b+0x66>
 8006f1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f20:	4601      	mov	r1, r0
 8006f22:	3b30      	subs	r3, #48	; 0x30
 8006f24:	220a      	movs	r2, #10
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ff76 	bl	8006e18 <__multadd>
 8006f2c:	e7ee      	b.n	8006f0c <__s2b+0x68>
 8006f2e:	bf00      	nop
 8006f30:	080089e0 	.word	0x080089e0
 8006f34:	08008a6c 	.word	0x08008a6c

08006f38 <__hi0bits>:
 8006f38:	0c03      	lsrs	r3, r0, #16
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	b9d3      	cbnz	r3, 8006f74 <__hi0bits+0x3c>
 8006f3e:	0400      	lsls	r0, r0, #16
 8006f40:	2310      	movs	r3, #16
 8006f42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f46:	bf04      	itt	eq
 8006f48:	0200      	lsleq	r0, r0, #8
 8006f4a:	3308      	addeq	r3, #8
 8006f4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f50:	bf04      	itt	eq
 8006f52:	0100      	lsleq	r0, r0, #4
 8006f54:	3304      	addeq	r3, #4
 8006f56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f5a:	bf04      	itt	eq
 8006f5c:	0080      	lsleq	r0, r0, #2
 8006f5e:	3302      	addeq	r3, #2
 8006f60:	2800      	cmp	r0, #0
 8006f62:	db05      	blt.n	8006f70 <__hi0bits+0x38>
 8006f64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f68:	f103 0301 	add.w	r3, r3, #1
 8006f6c:	bf08      	it	eq
 8006f6e:	2320      	moveq	r3, #32
 8006f70:	4618      	mov	r0, r3
 8006f72:	4770      	bx	lr
 8006f74:	2300      	movs	r3, #0
 8006f76:	e7e4      	b.n	8006f42 <__hi0bits+0xa>

08006f78 <__lo0bits>:
 8006f78:	6803      	ldr	r3, [r0, #0]
 8006f7a:	f013 0207 	ands.w	r2, r3, #7
 8006f7e:	4601      	mov	r1, r0
 8006f80:	d00b      	beq.n	8006f9a <__lo0bits+0x22>
 8006f82:	07da      	lsls	r2, r3, #31
 8006f84:	d423      	bmi.n	8006fce <__lo0bits+0x56>
 8006f86:	0798      	lsls	r0, r3, #30
 8006f88:	bf49      	itett	mi
 8006f8a:	085b      	lsrmi	r3, r3, #1
 8006f8c:	089b      	lsrpl	r3, r3, #2
 8006f8e:	2001      	movmi	r0, #1
 8006f90:	600b      	strmi	r3, [r1, #0]
 8006f92:	bf5c      	itt	pl
 8006f94:	600b      	strpl	r3, [r1, #0]
 8006f96:	2002      	movpl	r0, #2
 8006f98:	4770      	bx	lr
 8006f9a:	b298      	uxth	r0, r3
 8006f9c:	b9a8      	cbnz	r0, 8006fca <__lo0bits+0x52>
 8006f9e:	0c1b      	lsrs	r3, r3, #16
 8006fa0:	2010      	movs	r0, #16
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	b90a      	cbnz	r2, 8006faa <__lo0bits+0x32>
 8006fa6:	3008      	adds	r0, #8
 8006fa8:	0a1b      	lsrs	r3, r3, #8
 8006faa:	071a      	lsls	r2, r3, #28
 8006fac:	bf04      	itt	eq
 8006fae:	091b      	lsreq	r3, r3, #4
 8006fb0:	3004      	addeq	r0, #4
 8006fb2:	079a      	lsls	r2, r3, #30
 8006fb4:	bf04      	itt	eq
 8006fb6:	089b      	lsreq	r3, r3, #2
 8006fb8:	3002      	addeq	r0, #2
 8006fba:	07da      	lsls	r2, r3, #31
 8006fbc:	d403      	bmi.n	8006fc6 <__lo0bits+0x4e>
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	f100 0001 	add.w	r0, r0, #1
 8006fc4:	d005      	beq.n	8006fd2 <__lo0bits+0x5a>
 8006fc6:	600b      	str	r3, [r1, #0]
 8006fc8:	4770      	bx	lr
 8006fca:	4610      	mov	r0, r2
 8006fcc:	e7e9      	b.n	8006fa2 <__lo0bits+0x2a>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	4770      	bx	lr
 8006fd2:	2020      	movs	r0, #32
 8006fd4:	4770      	bx	lr
	...

08006fd8 <__i2b>:
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	460c      	mov	r4, r1
 8006fdc:	2101      	movs	r1, #1
 8006fde:	f7ff feb9 	bl	8006d54 <_Balloc>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	b928      	cbnz	r0, 8006ff2 <__i2b+0x1a>
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <__i2b+0x24>)
 8006fe8:	4805      	ldr	r0, [pc, #20]	; (8007000 <__i2b+0x28>)
 8006fea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fee:	f000 fe01 	bl	8007bf4 <__assert_func>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	6144      	str	r4, [r0, #20]
 8006ff6:	6103      	str	r3, [r0, #16]
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080089e0 	.word	0x080089e0
 8007000:	08008a6c 	.word	0x08008a6c

08007004 <__multiply>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	4691      	mov	r9, r2
 800700a:	690a      	ldr	r2, [r1, #16]
 800700c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007010:	429a      	cmp	r2, r3
 8007012:	bfb8      	it	lt
 8007014:	460b      	movlt	r3, r1
 8007016:	460c      	mov	r4, r1
 8007018:	bfbc      	itt	lt
 800701a:	464c      	movlt	r4, r9
 800701c:	4699      	movlt	r9, r3
 800701e:	6927      	ldr	r7, [r4, #16]
 8007020:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007024:	68a3      	ldr	r3, [r4, #8]
 8007026:	6861      	ldr	r1, [r4, #4]
 8007028:	eb07 060a 	add.w	r6, r7, sl
 800702c:	42b3      	cmp	r3, r6
 800702e:	b085      	sub	sp, #20
 8007030:	bfb8      	it	lt
 8007032:	3101      	addlt	r1, #1
 8007034:	f7ff fe8e 	bl	8006d54 <_Balloc>
 8007038:	b930      	cbnz	r0, 8007048 <__multiply+0x44>
 800703a:	4602      	mov	r2, r0
 800703c:	4b44      	ldr	r3, [pc, #272]	; (8007150 <__multiply+0x14c>)
 800703e:	4845      	ldr	r0, [pc, #276]	; (8007154 <__multiply+0x150>)
 8007040:	f240 115d 	movw	r1, #349	; 0x15d
 8007044:	f000 fdd6 	bl	8007bf4 <__assert_func>
 8007048:	f100 0514 	add.w	r5, r0, #20
 800704c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007050:	462b      	mov	r3, r5
 8007052:	2200      	movs	r2, #0
 8007054:	4543      	cmp	r3, r8
 8007056:	d321      	bcc.n	800709c <__multiply+0x98>
 8007058:	f104 0314 	add.w	r3, r4, #20
 800705c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007060:	f109 0314 	add.w	r3, r9, #20
 8007064:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007068:	9202      	str	r2, [sp, #8]
 800706a:	1b3a      	subs	r2, r7, r4
 800706c:	3a15      	subs	r2, #21
 800706e:	f022 0203 	bic.w	r2, r2, #3
 8007072:	3204      	adds	r2, #4
 8007074:	f104 0115 	add.w	r1, r4, #21
 8007078:	428f      	cmp	r7, r1
 800707a:	bf38      	it	cc
 800707c:	2204      	movcc	r2, #4
 800707e:	9201      	str	r2, [sp, #4]
 8007080:	9a02      	ldr	r2, [sp, #8]
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d80c      	bhi.n	80070a2 <__multiply+0x9e>
 8007088:	2e00      	cmp	r6, #0
 800708a:	dd03      	ble.n	8007094 <__multiply+0x90>
 800708c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007090:	2b00      	cmp	r3, #0
 8007092:	d05a      	beq.n	800714a <__multiply+0x146>
 8007094:	6106      	str	r6, [r0, #16]
 8007096:	b005      	add	sp, #20
 8007098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709c:	f843 2b04 	str.w	r2, [r3], #4
 80070a0:	e7d8      	b.n	8007054 <__multiply+0x50>
 80070a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80070a6:	f1ba 0f00 	cmp.w	sl, #0
 80070aa:	d024      	beq.n	80070f6 <__multiply+0xf2>
 80070ac:	f104 0e14 	add.w	lr, r4, #20
 80070b0:	46a9      	mov	r9, r5
 80070b2:	f04f 0c00 	mov.w	ip, #0
 80070b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070ba:	f8d9 1000 	ldr.w	r1, [r9]
 80070be:	fa1f fb82 	uxth.w	fp, r2
 80070c2:	b289      	uxth	r1, r1
 80070c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80070c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070cc:	f8d9 2000 	ldr.w	r2, [r9]
 80070d0:	4461      	add	r1, ip
 80070d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80070da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070de:	b289      	uxth	r1, r1
 80070e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070e4:	4577      	cmp	r7, lr
 80070e6:	f849 1b04 	str.w	r1, [r9], #4
 80070ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070ee:	d8e2      	bhi.n	80070b6 <__multiply+0xb2>
 80070f0:	9a01      	ldr	r2, [sp, #4]
 80070f2:	f845 c002 	str.w	ip, [r5, r2]
 80070f6:	9a03      	ldr	r2, [sp, #12]
 80070f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070fc:	3304      	adds	r3, #4
 80070fe:	f1b9 0f00 	cmp.w	r9, #0
 8007102:	d020      	beq.n	8007146 <__multiply+0x142>
 8007104:	6829      	ldr	r1, [r5, #0]
 8007106:	f104 0c14 	add.w	ip, r4, #20
 800710a:	46ae      	mov	lr, r5
 800710c:	f04f 0a00 	mov.w	sl, #0
 8007110:	f8bc b000 	ldrh.w	fp, [ip]
 8007114:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007118:	fb09 220b 	mla	r2, r9, fp, r2
 800711c:	4492      	add	sl, r2
 800711e:	b289      	uxth	r1, r1
 8007120:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007124:	f84e 1b04 	str.w	r1, [lr], #4
 8007128:	f85c 2b04 	ldr.w	r2, [ip], #4
 800712c:	f8be 1000 	ldrh.w	r1, [lr]
 8007130:	0c12      	lsrs	r2, r2, #16
 8007132:	fb09 1102 	mla	r1, r9, r2, r1
 8007136:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800713a:	4567      	cmp	r7, ip
 800713c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007140:	d8e6      	bhi.n	8007110 <__multiply+0x10c>
 8007142:	9a01      	ldr	r2, [sp, #4]
 8007144:	50a9      	str	r1, [r5, r2]
 8007146:	3504      	adds	r5, #4
 8007148:	e79a      	b.n	8007080 <__multiply+0x7c>
 800714a:	3e01      	subs	r6, #1
 800714c:	e79c      	b.n	8007088 <__multiply+0x84>
 800714e:	bf00      	nop
 8007150:	080089e0 	.word	0x080089e0
 8007154:	08008a6c 	.word	0x08008a6c

08007158 <__pow5mult>:
 8007158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800715c:	4615      	mov	r5, r2
 800715e:	f012 0203 	ands.w	r2, r2, #3
 8007162:	4606      	mov	r6, r0
 8007164:	460f      	mov	r7, r1
 8007166:	d007      	beq.n	8007178 <__pow5mult+0x20>
 8007168:	4c25      	ldr	r4, [pc, #148]	; (8007200 <__pow5mult+0xa8>)
 800716a:	3a01      	subs	r2, #1
 800716c:	2300      	movs	r3, #0
 800716e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007172:	f7ff fe51 	bl	8006e18 <__multadd>
 8007176:	4607      	mov	r7, r0
 8007178:	10ad      	asrs	r5, r5, #2
 800717a:	d03d      	beq.n	80071f8 <__pow5mult+0xa0>
 800717c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800717e:	b97c      	cbnz	r4, 80071a0 <__pow5mult+0x48>
 8007180:	2010      	movs	r0, #16
 8007182:	f7ff fdbf 	bl	8006d04 <malloc>
 8007186:	4602      	mov	r2, r0
 8007188:	6270      	str	r0, [r6, #36]	; 0x24
 800718a:	b928      	cbnz	r0, 8007198 <__pow5mult+0x40>
 800718c:	4b1d      	ldr	r3, [pc, #116]	; (8007204 <__pow5mult+0xac>)
 800718e:	481e      	ldr	r0, [pc, #120]	; (8007208 <__pow5mult+0xb0>)
 8007190:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007194:	f000 fd2e 	bl	8007bf4 <__assert_func>
 8007198:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800719c:	6004      	str	r4, [r0, #0]
 800719e:	60c4      	str	r4, [r0, #12]
 80071a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071a8:	b94c      	cbnz	r4, 80071be <__pow5mult+0x66>
 80071aa:	f240 2171 	movw	r1, #625	; 0x271
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7ff ff12 	bl	8006fd8 <__i2b>
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80071ba:	4604      	mov	r4, r0
 80071bc:	6003      	str	r3, [r0, #0]
 80071be:	f04f 0900 	mov.w	r9, #0
 80071c2:	07eb      	lsls	r3, r5, #31
 80071c4:	d50a      	bpl.n	80071dc <__pow5mult+0x84>
 80071c6:	4639      	mov	r1, r7
 80071c8:	4622      	mov	r2, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ff1a 	bl	8007004 <__multiply>
 80071d0:	4639      	mov	r1, r7
 80071d2:	4680      	mov	r8, r0
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff fdfd 	bl	8006dd4 <_Bfree>
 80071da:	4647      	mov	r7, r8
 80071dc:	106d      	asrs	r5, r5, #1
 80071de:	d00b      	beq.n	80071f8 <__pow5mult+0xa0>
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	b938      	cbnz	r0, 80071f4 <__pow5mult+0x9c>
 80071e4:	4622      	mov	r2, r4
 80071e6:	4621      	mov	r1, r4
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7ff ff0b 	bl	8007004 <__multiply>
 80071ee:	6020      	str	r0, [r4, #0]
 80071f0:	f8c0 9000 	str.w	r9, [r0]
 80071f4:	4604      	mov	r4, r0
 80071f6:	e7e4      	b.n	80071c2 <__pow5mult+0x6a>
 80071f8:	4638      	mov	r0, r7
 80071fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fe:	bf00      	nop
 8007200:	08008bb8 	.word	0x08008bb8
 8007204:	0800896e 	.word	0x0800896e
 8007208:	08008a6c 	.word	0x08008a6c

0800720c <__lshift>:
 800720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	460c      	mov	r4, r1
 8007212:	6849      	ldr	r1, [r1, #4]
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800721a:	68a3      	ldr	r3, [r4, #8]
 800721c:	4607      	mov	r7, r0
 800721e:	4691      	mov	r9, r2
 8007220:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007224:	f108 0601 	add.w	r6, r8, #1
 8007228:	42b3      	cmp	r3, r6
 800722a:	db0b      	blt.n	8007244 <__lshift+0x38>
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff fd91 	bl	8006d54 <_Balloc>
 8007232:	4605      	mov	r5, r0
 8007234:	b948      	cbnz	r0, 800724a <__lshift+0x3e>
 8007236:	4602      	mov	r2, r0
 8007238:	4b2a      	ldr	r3, [pc, #168]	; (80072e4 <__lshift+0xd8>)
 800723a:	482b      	ldr	r0, [pc, #172]	; (80072e8 <__lshift+0xdc>)
 800723c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007240:	f000 fcd8 	bl	8007bf4 <__assert_func>
 8007244:	3101      	adds	r1, #1
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	e7ee      	b.n	8007228 <__lshift+0x1c>
 800724a:	2300      	movs	r3, #0
 800724c:	f100 0114 	add.w	r1, r0, #20
 8007250:	f100 0210 	add.w	r2, r0, #16
 8007254:	4618      	mov	r0, r3
 8007256:	4553      	cmp	r3, sl
 8007258:	db37      	blt.n	80072ca <__lshift+0xbe>
 800725a:	6920      	ldr	r0, [r4, #16]
 800725c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007260:	f104 0314 	add.w	r3, r4, #20
 8007264:	f019 091f 	ands.w	r9, r9, #31
 8007268:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800726c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007270:	d02f      	beq.n	80072d2 <__lshift+0xc6>
 8007272:	f1c9 0e20 	rsb	lr, r9, #32
 8007276:	468a      	mov	sl, r1
 8007278:	f04f 0c00 	mov.w	ip, #0
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	fa02 f209 	lsl.w	r2, r2, r9
 8007282:	ea42 020c 	orr.w	r2, r2, ip
 8007286:	f84a 2b04 	str.w	r2, [sl], #4
 800728a:	f853 2b04 	ldr.w	r2, [r3], #4
 800728e:	4298      	cmp	r0, r3
 8007290:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007294:	d8f2      	bhi.n	800727c <__lshift+0x70>
 8007296:	1b03      	subs	r3, r0, r4
 8007298:	3b15      	subs	r3, #21
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	3304      	adds	r3, #4
 80072a0:	f104 0215 	add.w	r2, r4, #21
 80072a4:	4290      	cmp	r0, r2
 80072a6:	bf38      	it	cc
 80072a8:	2304      	movcc	r3, #4
 80072aa:	f841 c003 	str.w	ip, [r1, r3]
 80072ae:	f1bc 0f00 	cmp.w	ip, #0
 80072b2:	d001      	beq.n	80072b8 <__lshift+0xac>
 80072b4:	f108 0602 	add.w	r6, r8, #2
 80072b8:	3e01      	subs	r6, #1
 80072ba:	4638      	mov	r0, r7
 80072bc:	612e      	str	r6, [r5, #16]
 80072be:	4621      	mov	r1, r4
 80072c0:	f7ff fd88 	bl	8006dd4 <_Bfree>
 80072c4:	4628      	mov	r0, r5
 80072c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80072ce:	3301      	adds	r3, #1
 80072d0:	e7c1      	b.n	8007256 <__lshift+0x4a>
 80072d2:	3904      	subs	r1, #4
 80072d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80072dc:	4298      	cmp	r0, r3
 80072de:	d8f9      	bhi.n	80072d4 <__lshift+0xc8>
 80072e0:	e7ea      	b.n	80072b8 <__lshift+0xac>
 80072e2:	bf00      	nop
 80072e4:	080089e0 	.word	0x080089e0
 80072e8:	08008a6c 	.word	0x08008a6c

080072ec <__mcmp>:
 80072ec:	b530      	push	{r4, r5, lr}
 80072ee:	6902      	ldr	r2, [r0, #16]
 80072f0:	690c      	ldr	r4, [r1, #16]
 80072f2:	1b12      	subs	r2, r2, r4
 80072f4:	d10e      	bne.n	8007314 <__mcmp+0x28>
 80072f6:	f100 0314 	add.w	r3, r0, #20
 80072fa:	3114      	adds	r1, #20
 80072fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007300:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007304:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007308:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800730c:	42a5      	cmp	r5, r4
 800730e:	d003      	beq.n	8007318 <__mcmp+0x2c>
 8007310:	d305      	bcc.n	800731e <__mcmp+0x32>
 8007312:	2201      	movs	r2, #1
 8007314:	4610      	mov	r0, r2
 8007316:	bd30      	pop	{r4, r5, pc}
 8007318:	4283      	cmp	r3, r0
 800731a:	d3f3      	bcc.n	8007304 <__mcmp+0x18>
 800731c:	e7fa      	b.n	8007314 <__mcmp+0x28>
 800731e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007322:	e7f7      	b.n	8007314 <__mcmp+0x28>

08007324 <__mdiff>:
 8007324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	4606      	mov	r6, r0
 800732c:	4611      	mov	r1, r2
 800732e:	4620      	mov	r0, r4
 8007330:	4690      	mov	r8, r2
 8007332:	f7ff ffdb 	bl	80072ec <__mcmp>
 8007336:	1e05      	subs	r5, r0, #0
 8007338:	d110      	bne.n	800735c <__mdiff+0x38>
 800733a:	4629      	mov	r1, r5
 800733c:	4630      	mov	r0, r6
 800733e:	f7ff fd09 	bl	8006d54 <_Balloc>
 8007342:	b930      	cbnz	r0, 8007352 <__mdiff+0x2e>
 8007344:	4b3a      	ldr	r3, [pc, #232]	; (8007430 <__mdiff+0x10c>)
 8007346:	4602      	mov	r2, r0
 8007348:	f240 2132 	movw	r1, #562	; 0x232
 800734c:	4839      	ldr	r0, [pc, #228]	; (8007434 <__mdiff+0x110>)
 800734e:	f000 fc51 	bl	8007bf4 <__assert_func>
 8007352:	2301      	movs	r3, #1
 8007354:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	bfa4      	itt	ge
 800735e:	4643      	movge	r3, r8
 8007360:	46a0      	movge	r8, r4
 8007362:	4630      	mov	r0, r6
 8007364:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007368:	bfa6      	itte	ge
 800736a:	461c      	movge	r4, r3
 800736c:	2500      	movge	r5, #0
 800736e:	2501      	movlt	r5, #1
 8007370:	f7ff fcf0 	bl	8006d54 <_Balloc>
 8007374:	b920      	cbnz	r0, 8007380 <__mdiff+0x5c>
 8007376:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <__mdiff+0x10c>)
 8007378:	4602      	mov	r2, r0
 800737a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800737e:	e7e5      	b.n	800734c <__mdiff+0x28>
 8007380:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007384:	6926      	ldr	r6, [r4, #16]
 8007386:	60c5      	str	r5, [r0, #12]
 8007388:	f104 0914 	add.w	r9, r4, #20
 800738c:	f108 0514 	add.w	r5, r8, #20
 8007390:	f100 0e14 	add.w	lr, r0, #20
 8007394:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007398:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800739c:	f108 0210 	add.w	r2, r8, #16
 80073a0:	46f2      	mov	sl, lr
 80073a2:	2100      	movs	r1, #0
 80073a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80073a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073ac:	fa1f f883 	uxth.w	r8, r3
 80073b0:	fa11 f18b 	uxtah	r1, r1, fp
 80073b4:	0c1b      	lsrs	r3, r3, #16
 80073b6:	eba1 0808 	sub.w	r8, r1, r8
 80073ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073c2:	fa1f f888 	uxth.w	r8, r8
 80073c6:	1419      	asrs	r1, r3, #16
 80073c8:	454e      	cmp	r6, r9
 80073ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073ce:	f84a 3b04 	str.w	r3, [sl], #4
 80073d2:	d8e7      	bhi.n	80073a4 <__mdiff+0x80>
 80073d4:	1b33      	subs	r3, r6, r4
 80073d6:	3b15      	subs	r3, #21
 80073d8:	f023 0303 	bic.w	r3, r3, #3
 80073dc:	3304      	adds	r3, #4
 80073de:	3415      	adds	r4, #21
 80073e0:	42a6      	cmp	r6, r4
 80073e2:	bf38      	it	cc
 80073e4:	2304      	movcc	r3, #4
 80073e6:	441d      	add	r5, r3
 80073e8:	4473      	add	r3, lr
 80073ea:	469e      	mov	lr, r3
 80073ec:	462e      	mov	r6, r5
 80073ee:	4566      	cmp	r6, ip
 80073f0:	d30e      	bcc.n	8007410 <__mdiff+0xec>
 80073f2:	f10c 0203 	add.w	r2, ip, #3
 80073f6:	1b52      	subs	r2, r2, r5
 80073f8:	f022 0203 	bic.w	r2, r2, #3
 80073fc:	3d03      	subs	r5, #3
 80073fe:	45ac      	cmp	ip, r5
 8007400:	bf38      	it	cc
 8007402:	2200      	movcc	r2, #0
 8007404:	441a      	add	r2, r3
 8007406:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800740a:	b17b      	cbz	r3, 800742c <__mdiff+0x108>
 800740c:	6107      	str	r7, [r0, #16]
 800740e:	e7a3      	b.n	8007358 <__mdiff+0x34>
 8007410:	f856 8b04 	ldr.w	r8, [r6], #4
 8007414:	fa11 f288 	uxtah	r2, r1, r8
 8007418:	1414      	asrs	r4, r2, #16
 800741a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800741e:	b292      	uxth	r2, r2
 8007420:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007424:	f84e 2b04 	str.w	r2, [lr], #4
 8007428:	1421      	asrs	r1, r4, #16
 800742a:	e7e0      	b.n	80073ee <__mdiff+0xca>
 800742c:	3f01      	subs	r7, #1
 800742e:	e7ea      	b.n	8007406 <__mdiff+0xe2>
 8007430:	080089e0 	.word	0x080089e0
 8007434:	08008a6c 	.word	0x08008a6c

08007438 <__ulp>:
 8007438:	b082      	sub	sp, #8
 800743a:	ed8d 0b00 	vstr	d0, [sp]
 800743e:	9b01      	ldr	r3, [sp, #4]
 8007440:	4912      	ldr	r1, [pc, #72]	; (800748c <__ulp+0x54>)
 8007442:	4019      	ands	r1, r3
 8007444:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007448:	2900      	cmp	r1, #0
 800744a:	dd05      	ble.n	8007458 <__ulp+0x20>
 800744c:	2200      	movs	r2, #0
 800744e:	460b      	mov	r3, r1
 8007450:	ec43 2b10 	vmov	d0, r2, r3
 8007454:	b002      	add	sp, #8
 8007456:	4770      	bx	lr
 8007458:	4249      	negs	r1, r1
 800745a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800745e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	da04      	bge.n	8007476 <__ulp+0x3e>
 800746c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007470:	fa41 f300 	asr.w	r3, r1, r0
 8007474:	e7ec      	b.n	8007450 <__ulp+0x18>
 8007476:	f1a0 0114 	sub.w	r1, r0, #20
 800747a:	291e      	cmp	r1, #30
 800747c:	bfda      	itte	le
 800747e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007482:	fa20 f101 	lsrle.w	r1, r0, r1
 8007486:	2101      	movgt	r1, #1
 8007488:	460a      	mov	r2, r1
 800748a:	e7e1      	b.n	8007450 <__ulp+0x18>
 800748c:	7ff00000 	.word	0x7ff00000

08007490 <__b2d>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	6905      	ldr	r5, [r0, #16]
 8007494:	f100 0714 	add.w	r7, r0, #20
 8007498:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800749c:	1f2e      	subs	r6, r5, #4
 800749e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7ff fd48 	bl	8006f38 <__hi0bits>
 80074a8:	f1c0 0320 	rsb	r3, r0, #32
 80074ac:	280a      	cmp	r0, #10
 80074ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800752c <__b2d+0x9c>
 80074b2:	600b      	str	r3, [r1, #0]
 80074b4:	dc14      	bgt.n	80074e0 <__b2d+0x50>
 80074b6:	f1c0 0e0b 	rsb	lr, r0, #11
 80074ba:	fa24 f10e 	lsr.w	r1, r4, lr
 80074be:	42b7      	cmp	r7, r6
 80074c0:	ea41 030c 	orr.w	r3, r1, ip
 80074c4:	bf34      	ite	cc
 80074c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80074ca:	2100      	movcs	r1, #0
 80074cc:	3015      	adds	r0, #21
 80074ce:	fa04 f000 	lsl.w	r0, r4, r0
 80074d2:	fa21 f10e 	lsr.w	r1, r1, lr
 80074d6:	ea40 0201 	orr.w	r2, r0, r1
 80074da:	ec43 2b10 	vmov	d0, r2, r3
 80074de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e0:	42b7      	cmp	r7, r6
 80074e2:	bf3a      	itte	cc
 80074e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80074e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80074ec:	2100      	movcs	r1, #0
 80074ee:	380b      	subs	r0, #11
 80074f0:	d017      	beq.n	8007522 <__b2d+0x92>
 80074f2:	f1c0 0c20 	rsb	ip, r0, #32
 80074f6:	fa04 f500 	lsl.w	r5, r4, r0
 80074fa:	42be      	cmp	r6, r7
 80074fc:	fa21 f40c 	lsr.w	r4, r1, ip
 8007500:	ea45 0504 	orr.w	r5, r5, r4
 8007504:	bf8c      	ite	hi
 8007506:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800750a:	2400      	movls	r4, #0
 800750c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007510:	fa01 f000 	lsl.w	r0, r1, r0
 8007514:	fa24 f40c 	lsr.w	r4, r4, ip
 8007518:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800751c:	ea40 0204 	orr.w	r2, r0, r4
 8007520:	e7db      	b.n	80074da <__b2d+0x4a>
 8007522:	ea44 030c 	orr.w	r3, r4, ip
 8007526:	460a      	mov	r2, r1
 8007528:	e7d7      	b.n	80074da <__b2d+0x4a>
 800752a:	bf00      	nop
 800752c:	3ff00000 	.word	0x3ff00000

08007530 <__d2b>:
 8007530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007534:	4689      	mov	r9, r1
 8007536:	2101      	movs	r1, #1
 8007538:	ec57 6b10 	vmov	r6, r7, d0
 800753c:	4690      	mov	r8, r2
 800753e:	f7ff fc09 	bl	8006d54 <_Balloc>
 8007542:	4604      	mov	r4, r0
 8007544:	b930      	cbnz	r0, 8007554 <__d2b+0x24>
 8007546:	4602      	mov	r2, r0
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <__d2b+0xb0>)
 800754a:	4826      	ldr	r0, [pc, #152]	; (80075e4 <__d2b+0xb4>)
 800754c:	f240 310a 	movw	r1, #778	; 0x30a
 8007550:	f000 fb50 	bl	8007bf4 <__assert_func>
 8007554:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800755c:	bb35      	cbnz	r5, 80075ac <__d2b+0x7c>
 800755e:	2e00      	cmp	r6, #0
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	d028      	beq.n	80075b6 <__d2b+0x86>
 8007564:	4668      	mov	r0, sp
 8007566:	9600      	str	r6, [sp, #0]
 8007568:	f7ff fd06 	bl	8006f78 <__lo0bits>
 800756c:	9900      	ldr	r1, [sp, #0]
 800756e:	b300      	cbz	r0, 80075b2 <__d2b+0x82>
 8007570:	9a01      	ldr	r2, [sp, #4]
 8007572:	f1c0 0320 	rsb	r3, r0, #32
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	430b      	orrs	r3, r1
 800757c:	40c2      	lsrs	r2, r0
 800757e:	6163      	str	r3, [r4, #20]
 8007580:	9201      	str	r2, [sp, #4]
 8007582:	9b01      	ldr	r3, [sp, #4]
 8007584:	61a3      	str	r3, [r4, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bf14      	ite	ne
 800758a:	2202      	movne	r2, #2
 800758c:	2201      	moveq	r2, #1
 800758e:	6122      	str	r2, [r4, #16]
 8007590:	b1d5      	cbz	r5, 80075c8 <__d2b+0x98>
 8007592:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007596:	4405      	add	r5, r0
 8007598:	f8c9 5000 	str.w	r5, [r9]
 800759c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075a0:	f8c8 0000 	str.w	r0, [r8]
 80075a4:	4620      	mov	r0, r4
 80075a6:	b003      	add	sp, #12
 80075a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b0:	e7d5      	b.n	800755e <__d2b+0x2e>
 80075b2:	6161      	str	r1, [r4, #20]
 80075b4:	e7e5      	b.n	8007582 <__d2b+0x52>
 80075b6:	a801      	add	r0, sp, #4
 80075b8:	f7ff fcde 	bl	8006f78 <__lo0bits>
 80075bc:	9b01      	ldr	r3, [sp, #4]
 80075be:	6163      	str	r3, [r4, #20]
 80075c0:	2201      	movs	r2, #1
 80075c2:	6122      	str	r2, [r4, #16]
 80075c4:	3020      	adds	r0, #32
 80075c6:	e7e3      	b.n	8007590 <__d2b+0x60>
 80075c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075d0:	f8c9 0000 	str.w	r0, [r9]
 80075d4:	6918      	ldr	r0, [r3, #16]
 80075d6:	f7ff fcaf 	bl	8006f38 <__hi0bits>
 80075da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075de:	e7df      	b.n	80075a0 <__d2b+0x70>
 80075e0:	080089e0 	.word	0x080089e0
 80075e4:	08008a6c 	.word	0x08008a6c

080075e8 <__ratio>:
 80075e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	4688      	mov	r8, r1
 80075ee:	4669      	mov	r1, sp
 80075f0:	4681      	mov	r9, r0
 80075f2:	f7ff ff4d 	bl	8007490 <__b2d>
 80075f6:	a901      	add	r1, sp, #4
 80075f8:	4640      	mov	r0, r8
 80075fa:	ec55 4b10 	vmov	r4, r5, d0
 80075fe:	f7ff ff47 	bl	8007490 <__b2d>
 8007602:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007606:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800760a:	eba3 0c02 	sub.w	ip, r3, r2
 800760e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007618:	ec51 0b10 	vmov	r0, r1, d0
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfd6      	itet	le
 8007620:	460a      	movle	r2, r1
 8007622:	462a      	movgt	r2, r5
 8007624:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007628:	468b      	mov	fp, r1
 800762a:	462f      	mov	r7, r5
 800762c:	bfd4      	ite	le
 800762e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007632:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007636:	4620      	mov	r0, r4
 8007638:	ee10 2a10 	vmov	r2, s0
 800763c:	465b      	mov	r3, fp
 800763e:	4639      	mov	r1, r7
 8007640:	f7f9 f924 	bl	800088c <__aeabi_ddiv>
 8007644:	ec41 0b10 	vmov	d0, r0, r1
 8007648:	b003      	add	sp, #12
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800764e <__copybits>:
 800764e:	3901      	subs	r1, #1
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	1149      	asrs	r1, r1, #5
 8007654:	6914      	ldr	r4, [r2, #16]
 8007656:	3101      	adds	r1, #1
 8007658:	f102 0314 	add.w	r3, r2, #20
 800765c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007660:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007664:	1f05      	subs	r5, r0, #4
 8007666:	42a3      	cmp	r3, r4
 8007668:	d30c      	bcc.n	8007684 <__copybits+0x36>
 800766a:	1aa3      	subs	r3, r4, r2
 800766c:	3b11      	subs	r3, #17
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	3211      	adds	r2, #17
 8007674:	42a2      	cmp	r2, r4
 8007676:	bf88      	it	hi
 8007678:	2300      	movhi	r3, #0
 800767a:	4418      	add	r0, r3
 800767c:	2300      	movs	r3, #0
 800767e:	4288      	cmp	r0, r1
 8007680:	d305      	bcc.n	800768e <__copybits+0x40>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f853 6b04 	ldr.w	r6, [r3], #4
 8007688:	f845 6f04 	str.w	r6, [r5, #4]!
 800768c:	e7eb      	b.n	8007666 <__copybits+0x18>
 800768e:	f840 3b04 	str.w	r3, [r0], #4
 8007692:	e7f4      	b.n	800767e <__copybits+0x30>

08007694 <__any_on>:
 8007694:	f100 0214 	add.w	r2, r0, #20
 8007698:	6900      	ldr	r0, [r0, #16]
 800769a:	114b      	asrs	r3, r1, #5
 800769c:	4298      	cmp	r0, r3
 800769e:	b510      	push	{r4, lr}
 80076a0:	db11      	blt.n	80076c6 <__any_on+0x32>
 80076a2:	dd0a      	ble.n	80076ba <__any_on+0x26>
 80076a4:	f011 011f 	ands.w	r1, r1, #31
 80076a8:	d007      	beq.n	80076ba <__any_on+0x26>
 80076aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076ae:	fa24 f001 	lsr.w	r0, r4, r1
 80076b2:	fa00 f101 	lsl.w	r1, r0, r1
 80076b6:	428c      	cmp	r4, r1
 80076b8:	d10b      	bne.n	80076d2 <__any_on+0x3e>
 80076ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076be:	4293      	cmp	r3, r2
 80076c0:	d803      	bhi.n	80076ca <__any_on+0x36>
 80076c2:	2000      	movs	r0, #0
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	4603      	mov	r3, r0
 80076c8:	e7f7      	b.n	80076ba <__any_on+0x26>
 80076ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076ce:	2900      	cmp	r1, #0
 80076d0:	d0f5      	beq.n	80076be <__any_on+0x2a>
 80076d2:	2001      	movs	r0, #1
 80076d4:	e7f6      	b.n	80076c4 <__any_on+0x30>

080076d6 <_calloc_r>:
 80076d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076d8:	fba1 2402 	umull	r2, r4, r1, r2
 80076dc:	b94c      	cbnz	r4, 80076f2 <_calloc_r+0x1c>
 80076de:	4611      	mov	r1, r2
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	f000 f87b 	bl	80077dc <_malloc_r>
 80076e6:	9a01      	ldr	r2, [sp, #4]
 80076e8:	4605      	mov	r5, r0
 80076ea:	b930      	cbnz	r0, 80076fa <_calloc_r+0x24>
 80076ec:	4628      	mov	r0, r5
 80076ee:	b003      	add	sp, #12
 80076f0:	bd30      	pop	{r4, r5, pc}
 80076f2:	220c      	movs	r2, #12
 80076f4:	6002      	str	r2, [r0, #0]
 80076f6:	2500      	movs	r5, #0
 80076f8:	e7f8      	b.n	80076ec <_calloc_r+0x16>
 80076fa:	4621      	mov	r1, r4
 80076fc:	f7fc fbbe 	bl	8003e7c <memset>
 8007700:	e7f4      	b.n	80076ec <_calloc_r+0x16>
	...

08007704 <_free_r>:
 8007704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007706:	2900      	cmp	r1, #0
 8007708:	d044      	beq.n	8007794 <_free_r+0x90>
 800770a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770e:	9001      	str	r0, [sp, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f1a1 0404 	sub.w	r4, r1, #4
 8007716:	bfb8      	it	lt
 8007718:	18e4      	addlt	r4, r4, r3
 800771a:	f000 fab5 	bl	8007c88 <__malloc_lock>
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <_free_r+0x94>)
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	b933      	cbnz	r3, 8007734 <_free_r+0x30>
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6014      	str	r4, [r2, #0]
 800772a:	b003      	add	sp, #12
 800772c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007730:	f000 bab0 	b.w	8007c94 <__malloc_unlock>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d908      	bls.n	800774a <_free_r+0x46>
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1961      	adds	r1, r4, r5
 800773c:	428b      	cmp	r3, r1
 800773e:	bf01      	itttt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	1949      	addeq	r1, r1, r5
 8007746:	6021      	streq	r1, [r4, #0]
 8007748:	e7ed      	b.n	8007726 <_free_r+0x22>
 800774a:	461a      	mov	r2, r3
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b10b      	cbz	r3, 8007754 <_free_r+0x50>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d9fa      	bls.n	800774a <_free_r+0x46>
 8007754:	6811      	ldr	r1, [r2, #0]
 8007756:	1855      	adds	r5, r2, r1
 8007758:	42a5      	cmp	r5, r4
 800775a:	d10b      	bne.n	8007774 <_free_r+0x70>
 800775c:	6824      	ldr	r4, [r4, #0]
 800775e:	4421      	add	r1, r4
 8007760:	1854      	adds	r4, r2, r1
 8007762:	42a3      	cmp	r3, r4
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	d1e0      	bne.n	800772a <_free_r+0x26>
 8007768:	681c      	ldr	r4, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	4421      	add	r1, r4
 8007770:	6011      	str	r1, [r2, #0]
 8007772:	e7da      	b.n	800772a <_free_r+0x26>
 8007774:	d902      	bls.n	800777c <_free_r+0x78>
 8007776:	230c      	movs	r3, #12
 8007778:	6003      	str	r3, [r0, #0]
 800777a:	e7d6      	b.n	800772a <_free_r+0x26>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf04      	itt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	bf04      	itt	eq
 800778c:	1949      	addeq	r1, r1, r5
 800778e:	6021      	streq	r1, [r4, #0]
 8007790:	6054      	str	r4, [r2, #4]
 8007792:	e7ca      	b.n	800772a <_free_r+0x26>
 8007794:	b003      	add	sp, #12
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	200002e8 	.word	0x200002e8

0800779c <sbrk_aligned>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	4e0e      	ldr	r6, [pc, #56]	; (80077d8 <sbrk_aligned+0x3c>)
 80077a0:	460c      	mov	r4, r1
 80077a2:	6831      	ldr	r1, [r6, #0]
 80077a4:	4605      	mov	r5, r0
 80077a6:	b911      	cbnz	r1, 80077ae <sbrk_aligned+0x12>
 80077a8:	f000 f9f2 	bl	8007b90 <_sbrk_r>
 80077ac:	6030      	str	r0, [r6, #0]
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f9ed 	bl	8007b90 <_sbrk_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d00a      	beq.n	80077d0 <sbrk_aligned+0x34>
 80077ba:	1cc4      	adds	r4, r0, #3
 80077bc:	f024 0403 	bic.w	r4, r4, #3
 80077c0:	42a0      	cmp	r0, r4
 80077c2:	d007      	beq.n	80077d4 <sbrk_aligned+0x38>
 80077c4:	1a21      	subs	r1, r4, r0
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 f9e2 	bl	8007b90 <_sbrk_r>
 80077cc:	3001      	adds	r0, #1
 80077ce:	d101      	bne.n	80077d4 <sbrk_aligned+0x38>
 80077d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077d4:	4620      	mov	r0, r4
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	200002ec 	.word	0x200002ec

080077dc <_malloc_r>:
 80077dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e0:	1ccd      	adds	r5, r1, #3
 80077e2:	f025 0503 	bic.w	r5, r5, #3
 80077e6:	3508      	adds	r5, #8
 80077e8:	2d0c      	cmp	r5, #12
 80077ea:	bf38      	it	cc
 80077ec:	250c      	movcc	r5, #12
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	4607      	mov	r7, r0
 80077f2:	db01      	blt.n	80077f8 <_malloc_r+0x1c>
 80077f4:	42a9      	cmp	r1, r5
 80077f6:	d905      	bls.n	8007804 <_malloc_r+0x28>
 80077f8:	230c      	movs	r3, #12
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	2600      	movs	r6, #0
 80077fe:	4630      	mov	r0, r6
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	4e2e      	ldr	r6, [pc, #184]	; (80078c0 <_malloc_r+0xe4>)
 8007806:	f000 fa3f 	bl	8007c88 <__malloc_lock>
 800780a:	6833      	ldr	r3, [r6, #0]
 800780c:	461c      	mov	r4, r3
 800780e:	bb34      	cbnz	r4, 800785e <_malloc_r+0x82>
 8007810:	4629      	mov	r1, r5
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ffc2 	bl	800779c <sbrk_aligned>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	4604      	mov	r4, r0
 800781c:	d14d      	bne.n	80078ba <_malloc_r+0xde>
 800781e:	6834      	ldr	r4, [r6, #0]
 8007820:	4626      	mov	r6, r4
 8007822:	2e00      	cmp	r6, #0
 8007824:	d140      	bne.n	80078a8 <_malloc_r+0xcc>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	4631      	mov	r1, r6
 800782a:	4638      	mov	r0, r7
 800782c:	eb04 0803 	add.w	r8, r4, r3
 8007830:	f000 f9ae 	bl	8007b90 <_sbrk_r>
 8007834:	4580      	cmp	r8, r0
 8007836:	d13a      	bne.n	80078ae <_malloc_r+0xd2>
 8007838:	6821      	ldr	r1, [r4, #0]
 800783a:	3503      	adds	r5, #3
 800783c:	1a6d      	subs	r5, r5, r1
 800783e:	f025 0503 	bic.w	r5, r5, #3
 8007842:	3508      	adds	r5, #8
 8007844:	2d0c      	cmp	r5, #12
 8007846:	bf38      	it	cc
 8007848:	250c      	movcc	r5, #12
 800784a:	4629      	mov	r1, r5
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ffa5 	bl	800779c <sbrk_aligned>
 8007852:	3001      	adds	r0, #1
 8007854:	d02b      	beq.n	80078ae <_malloc_r+0xd2>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	442b      	add	r3, r5
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	e00e      	b.n	800787c <_malloc_r+0xa0>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	1b52      	subs	r2, r2, r5
 8007862:	d41e      	bmi.n	80078a2 <_malloc_r+0xc6>
 8007864:	2a0b      	cmp	r2, #11
 8007866:	d916      	bls.n	8007896 <_malloc_r+0xba>
 8007868:	1961      	adds	r1, r4, r5
 800786a:	42a3      	cmp	r3, r4
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	bf18      	it	ne
 8007870:	6059      	strne	r1, [r3, #4]
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	bf08      	it	eq
 8007876:	6031      	streq	r1, [r6, #0]
 8007878:	5162      	str	r2, [r4, r5]
 800787a:	604b      	str	r3, [r1, #4]
 800787c:	4638      	mov	r0, r7
 800787e:	f104 060b 	add.w	r6, r4, #11
 8007882:	f000 fa07 	bl	8007c94 <__malloc_unlock>
 8007886:	f026 0607 	bic.w	r6, r6, #7
 800788a:	1d23      	adds	r3, r4, #4
 800788c:	1af2      	subs	r2, r6, r3
 800788e:	d0b6      	beq.n	80077fe <_malloc_r+0x22>
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	50a3      	str	r3, [r4, r2]
 8007894:	e7b3      	b.n	80077fe <_malloc_r+0x22>
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	42a3      	cmp	r3, r4
 800789a:	bf0c      	ite	eq
 800789c:	6032      	streq	r2, [r6, #0]
 800789e:	605a      	strne	r2, [r3, #4]
 80078a0:	e7ec      	b.n	800787c <_malloc_r+0xa0>
 80078a2:	4623      	mov	r3, r4
 80078a4:	6864      	ldr	r4, [r4, #4]
 80078a6:	e7b2      	b.n	800780e <_malloc_r+0x32>
 80078a8:	4634      	mov	r4, r6
 80078aa:	6876      	ldr	r6, [r6, #4]
 80078ac:	e7b9      	b.n	8007822 <_malloc_r+0x46>
 80078ae:	230c      	movs	r3, #12
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	4638      	mov	r0, r7
 80078b4:	f000 f9ee 	bl	8007c94 <__malloc_unlock>
 80078b8:	e7a1      	b.n	80077fe <_malloc_r+0x22>
 80078ba:	6025      	str	r5, [r4, #0]
 80078bc:	e7de      	b.n	800787c <_malloc_r+0xa0>
 80078be:	bf00      	nop
 80078c0:	200002e8 	.word	0x200002e8

080078c4 <__ssputs_r>:
 80078c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	688e      	ldr	r6, [r1, #8]
 80078ca:	429e      	cmp	r6, r3
 80078cc:	4682      	mov	sl, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	4690      	mov	r8, r2
 80078d2:	461f      	mov	r7, r3
 80078d4:	d838      	bhi.n	8007948 <__ssputs_r+0x84>
 80078d6:	898a      	ldrh	r2, [r1, #12]
 80078d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078dc:	d032      	beq.n	8007944 <__ssputs_r+0x80>
 80078de:	6825      	ldr	r5, [r4, #0]
 80078e0:	6909      	ldr	r1, [r1, #16]
 80078e2:	eba5 0901 	sub.w	r9, r5, r1
 80078e6:	6965      	ldr	r5, [r4, #20]
 80078e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f0:	3301      	adds	r3, #1
 80078f2:	444b      	add	r3, r9
 80078f4:	106d      	asrs	r5, r5, #1
 80078f6:	429d      	cmp	r5, r3
 80078f8:	bf38      	it	cc
 80078fa:	461d      	movcc	r5, r3
 80078fc:	0553      	lsls	r3, r2, #21
 80078fe:	d531      	bpl.n	8007964 <__ssputs_r+0xa0>
 8007900:	4629      	mov	r1, r5
 8007902:	f7ff ff6b 	bl	80077dc <_malloc_r>
 8007906:	4606      	mov	r6, r0
 8007908:	b950      	cbnz	r0, 8007920 <__ssputs_r+0x5c>
 800790a:	230c      	movs	r3, #12
 800790c:	f8ca 3000 	str.w	r3, [sl]
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	6921      	ldr	r1, [r4, #16]
 8007922:	464a      	mov	r2, r9
 8007924:	f7ff fa08 	bl	8006d38 <memcpy>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800792e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	6126      	str	r6, [r4, #16]
 8007936:	6165      	str	r5, [r4, #20]
 8007938:	444e      	add	r6, r9
 800793a:	eba5 0509 	sub.w	r5, r5, r9
 800793e:	6026      	str	r6, [r4, #0]
 8007940:	60a5      	str	r5, [r4, #8]
 8007942:	463e      	mov	r6, r7
 8007944:	42be      	cmp	r6, r7
 8007946:	d900      	bls.n	800794a <__ssputs_r+0x86>
 8007948:	463e      	mov	r6, r7
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	4632      	mov	r2, r6
 800794e:	4641      	mov	r1, r8
 8007950:	f000 f980 	bl	8007c54 <memmove>
 8007954:	68a3      	ldr	r3, [r4, #8]
 8007956:	1b9b      	subs	r3, r3, r6
 8007958:	60a3      	str	r3, [r4, #8]
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	4433      	add	r3, r6
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	2000      	movs	r0, #0
 8007962:	e7db      	b.n	800791c <__ssputs_r+0x58>
 8007964:	462a      	mov	r2, r5
 8007966:	f000 f99b 	bl	8007ca0 <_realloc_r>
 800796a:	4606      	mov	r6, r0
 800796c:	2800      	cmp	r0, #0
 800796e:	d1e1      	bne.n	8007934 <__ssputs_r+0x70>
 8007970:	6921      	ldr	r1, [r4, #16]
 8007972:	4650      	mov	r0, sl
 8007974:	f7ff fec6 	bl	8007704 <_free_r>
 8007978:	e7c7      	b.n	800790a <__ssputs_r+0x46>
	...

0800797c <_svfiprintf_r>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	4698      	mov	r8, r3
 8007982:	898b      	ldrh	r3, [r1, #12]
 8007984:	061b      	lsls	r3, r3, #24
 8007986:	b09d      	sub	sp, #116	; 0x74
 8007988:	4607      	mov	r7, r0
 800798a:	460d      	mov	r5, r1
 800798c:	4614      	mov	r4, r2
 800798e:	d50e      	bpl.n	80079ae <_svfiprintf_r+0x32>
 8007990:	690b      	ldr	r3, [r1, #16]
 8007992:	b963      	cbnz	r3, 80079ae <_svfiprintf_r+0x32>
 8007994:	2140      	movs	r1, #64	; 0x40
 8007996:	f7ff ff21 	bl	80077dc <_malloc_r>
 800799a:	6028      	str	r0, [r5, #0]
 800799c:	6128      	str	r0, [r5, #16]
 800799e:	b920      	cbnz	r0, 80079aa <_svfiprintf_r+0x2e>
 80079a0:	230c      	movs	r3, #12
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a8:	e0d1      	b.n	8007b4e <_svfiprintf_r+0x1d2>
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	616b      	str	r3, [r5, #20]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9309      	str	r3, [sp, #36]	; 0x24
 80079b2:	2320      	movs	r3, #32
 80079b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079bc:	2330      	movs	r3, #48	; 0x30
 80079be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b68 <_svfiprintf_r+0x1ec>
 80079c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079c6:	f04f 0901 	mov.w	r9, #1
 80079ca:	4623      	mov	r3, r4
 80079cc:	469a      	mov	sl, r3
 80079ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d2:	b10a      	cbz	r2, 80079d8 <_svfiprintf_r+0x5c>
 80079d4:	2a25      	cmp	r2, #37	; 0x25
 80079d6:	d1f9      	bne.n	80079cc <_svfiprintf_r+0x50>
 80079d8:	ebba 0b04 	subs.w	fp, sl, r4
 80079dc:	d00b      	beq.n	80079f6 <_svfiprintf_r+0x7a>
 80079de:	465b      	mov	r3, fp
 80079e0:	4622      	mov	r2, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff ff6d 	bl	80078c4 <__ssputs_r>
 80079ea:	3001      	adds	r0, #1
 80079ec:	f000 80aa 	beq.w	8007b44 <_svfiprintf_r+0x1c8>
 80079f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f2:	445a      	add	r2, fp
 80079f4:	9209      	str	r2, [sp, #36]	; 0x24
 80079f6:	f89a 3000 	ldrb.w	r3, [sl]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80a2 	beq.w	8007b44 <_svfiprintf_r+0x1c8>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0a:	f10a 0a01 	add.w	sl, sl, #1
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a16:	931a      	str	r3, [sp, #104]	; 0x68
 8007a18:	4654      	mov	r4, sl
 8007a1a:	2205      	movs	r2, #5
 8007a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a20:	4851      	ldr	r0, [pc, #324]	; (8007b68 <_svfiprintf_r+0x1ec>)
 8007a22:	f7f8 fbfd 	bl	8000220 <memchr>
 8007a26:	9a04      	ldr	r2, [sp, #16]
 8007a28:	b9d8      	cbnz	r0, 8007a62 <_svfiprintf_r+0xe6>
 8007a2a:	06d0      	lsls	r0, r2, #27
 8007a2c:	bf44      	itt	mi
 8007a2e:	2320      	movmi	r3, #32
 8007a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a34:	0711      	lsls	r1, r2, #28
 8007a36:	bf44      	itt	mi
 8007a38:	232b      	movmi	r3, #43	; 0x2b
 8007a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a42:	2b2a      	cmp	r3, #42	; 0x2a
 8007a44:	d015      	beq.n	8007a72 <_svfiprintf_r+0xf6>
 8007a46:	9a07      	ldr	r2, [sp, #28]
 8007a48:	4654      	mov	r4, sl
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f04f 0c0a 	mov.w	ip, #10
 8007a50:	4621      	mov	r1, r4
 8007a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a56:	3b30      	subs	r3, #48	; 0x30
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d94e      	bls.n	8007afa <_svfiprintf_r+0x17e>
 8007a5c:	b1b0      	cbz	r0, 8007a8c <_svfiprintf_r+0x110>
 8007a5e:	9207      	str	r2, [sp, #28]
 8007a60:	e014      	b.n	8007a8c <_svfiprintf_r+0x110>
 8007a62:	eba0 0308 	sub.w	r3, r0, r8
 8007a66:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	46a2      	mov	sl, r4
 8007a70:	e7d2      	b.n	8007a18 <_svfiprintf_r+0x9c>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	1d19      	adds	r1, r3, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	9103      	str	r1, [sp, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bfbb      	ittet	lt
 8007a7e:	425b      	neglt	r3, r3
 8007a80:	f042 0202 	orrlt.w	r2, r2, #2
 8007a84:	9307      	strge	r3, [sp, #28]
 8007a86:	9307      	strlt	r3, [sp, #28]
 8007a88:	bfb8      	it	lt
 8007a8a:	9204      	strlt	r2, [sp, #16]
 8007a8c:	7823      	ldrb	r3, [r4, #0]
 8007a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a90:	d10c      	bne.n	8007aac <_svfiprintf_r+0x130>
 8007a92:	7863      	ldrb	r3, [r4, #1]
 8007a94:	2b2a      	cmp	r3, #42	; 0x2a
 8007a96:	d135      	bne.n	8007b04 <_svfiprintf_r+0x188>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	9203      	str	r2, [sp, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bfb8      	it	lt
 8007aa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007aa8:	3402      	adds	r4, #2
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b78 <_svfiprintf_r+0x1fc>
 8007ab0:	7821      	ldrb	r1, [r4, #0]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f7f8 fbb3 	bl	8000220 <memchr>
 8007aba:	b140      	cbz	r0, 8007ace <_svfiprintf_r+0x152>
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	eba0 000a 	sub.w	r0, r0, sl
 8007ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	4303      	orrs	r3, r0
 8007aca:	3401      	adds	r4, #1
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4826      	ldr	r0, [pc, #152]	; (8007b6c <_svfiprintf_r+0x1f0>)
 8007ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ad8:	2206      	movs	r2, #6
 8007ada:	f7f8 fba1 	bl	8000220 <memchr>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d038      	beq.n	8007b54 <_svfiprintf_r+0x1d8>
 8007ae2:	4b23      	ldr	r3, [pc, #140]	; (8007b70 <_svfiprintf_r+0x1f4>)
 8007ae4:	bb1b      	cbnz	r3, 8007b2e <_svfiprintf_r+0x1b2>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	3307      	adds	r3, #7
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	3308      	adds	r3, #8
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af4:	4433      	add	r3, r6
 8007af6:	9309      	str	r3, [sp, #36]	; 0x24
 8007af8:	e767      	b.n	80079ca <_svfiprintf_r+0x4e>
 8007afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afe:	460c      	mov	r4, r1
 8007b00:	2001      	movs	r0, #1
 8007b02:	e7a5      	b.n	8007a50 <_svfiprintf_r+0xd4>
 8007b04:	2300      	movs	r3, #0
 8007b06:	3401      	adds	r4, #1
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f04f 0c0a 	mov.w	ip, #10
 8007b10:	4620      	mov	r0, r4
 8007b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b16:	3a30      	subs	r2, #48	; 0x30
 8007b18:	2a09      	cmp	r2, #9
 8007b1a:	d903      	bls.n	8007b24 <_svfiprintf_r+0x1a8>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0c5      	beq.n	8007aac <_svfiprintf_r+0x130>
 8007b20:	9105      	str	r1, [sp, #20]
 8007b22:	e7c3      	b.n	8007aac <_svfiprintf_r+0x130>
 8007b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b28:	4604      	mov	r4, r0
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e7f0      	b.n	8007b10 <_svfiprintf_r+0x194>
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462a      	mov	r2, r5
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <_svfiprintf_r+0x1f8>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7fc fa47 	bl	8003fcc <_printf_float>
 8007b3e:	1c42      	adds	r2, r0, #1
 8007b40:	4606      	mov	r6, r0
 8007b42:	d1d6      	bne.n	8007af2 <_svfiprintf_r+0x176>
 8007b44:	89ab      	ldrh	r3, [r5, #12]
 8007b46:	065b      	lsls	r3, r3, #25
 8007b48:	f53f af2c 	bmi.w	80079a4 <_svfiprintf_r+0x28>
 8007b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b4e:	b01d      	add	sp, #116	; 0x74
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	ab03      	add	r3, sp, #12
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <_svfiprintf_r+0x1f8>)
 8007b5c:	a904      	add	r1, sp, #16
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f7fc fcd8 	bl	8004514 <_printf_i>
 8007b64:	e7eb      	b.n	8007b3e <_svfiprintf_r+0x1c2>
 8007b66:	bf00      	nop
 8007b68:	08008bc4 	.word	0x08008bc4
 8007b6c:	08008bce 	.word	0x08008bce
 8007b70:	08003fcd 	.word	0x08003fcd
 8007b74:	080078c5 	.word	0x080078c5
 8007b78:	08008bca 	.word	0x08008bca
 8007b7c:	00000000 	.word	0x00000000

08007b80 <nan>:
 8007b80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b88 <nan+0x8>
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	7ff80000 	.word	0x7ff80000

08007b90 <_sbrk_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d06      	ldr	r5, [pc, #24]	; (8007bac <_sbrk_r+0x1c>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	f7f9 fde4 	bl	8001768 <_sbrk>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_sbrk_r+0x1a>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_sbrk_r+0x1a>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	200002f0 	.word	0x200002f0

08007bb0 <strncmp>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	b17a      	cbz	r2, 8007bd4 <strncmp+0x24>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	3901      	subs	r1, #1
 8007bb8:	1884      	adds	r4, r0, r2
 8007bba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007bbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007bc2:	4290      	cmp	r0, r2
 8007bc4:	d101      	bne.n	8007bca <strncmp+0x1a>
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	d101      	bne.n	8007bce <strncmp+0x1e>
 8007bca:	1a80      	subs	r0, r0, r2
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d1f3      	bne.n	8007bba <strncmp+0xa>
 8007bd2:	e7fa      	b.n	8007bca <strncmp+0x1a>
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	e7f9      	b.n	8007bcc <strncmp+0x1c>

08007bd8 <__ascii_wctomb>:
 8007bd8:	b149      	cbz	r1, 8007bee <__ascii_wctomb+0x16>
 8007bda:	2aff      	cmp	r2, #255	; 0xff
 8007bdc:	bf85      	ittet	hi
 8007bde:	238a      	movhi	r3, #138	; 0x8a
 8007be0:	6003      	strhi	r3, [r0, #0]
 8007be2:	700a      	strbls	r2, [r1, #0]
 8007be4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007be8:	bf98      	it	ls
 8007bea:	2001      	movls	r0, #1
 8007bec:	4770      	bx	lr
 8007bee:	4608      	mov	r0, r1
 8007bf0:	4770      	bx	lr
	...

08007bf4 <__assert_func>:
 8007bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bf6:	4614      	mov	r4, r2
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <__assert_func+0x2c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4605      	mov	r5, r0
 8007c00:	68d8      	ldr	r0, [r3, #12]
 8007c02:	b14c      	cbz	r4, 8007c18 <__assert_func+0x24>
 8007c04:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <__assert_func+0x30>)
 8007c06:	9100      	str	r1, [sp, #0]
 8007c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c0c:	4906      	ldr	r1, [pc, #24]	; (8007c28 <__assert_func+0x34>)
 8007c0e:	462b      	mov	r3, r5
 8007c10:	f000 f80e 	bl	8007c30 <fiprintf>
 8007c14:	f000 fa8c 	bl	8008130 <abort>
 8007c18:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <__assert_func+0x38>)
 8007c1a:	461c      	mov	r4, r3
 8007c1c:	e7f3      	b.n	8007c06 <__assert_func+0x12>
 8007c1e:	bf00      	nop
 8007c20:	20000010 	.word	0x20000010
 8007c24:	08008bd5 	.word	0x08008bd5
 8007c28:	08008be2 	.word	0x08008be2
 8007c2c:	08008c10 	.word	0x08008c10

08007c30 <fiprintf>:
 8007c30:	b40e      	push	{r1, r2, r3}
 8007c32:	b503      	push	{r0, r1, lr}
 8007c34:	4601      	mov	r1, r0
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	4805      	ldr	r0, [pc, #20]	; (8007c50 <fiprintf+0x20>)
 8007c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	f000 f885 	bl	8007d50 <_vfiprintf_r>
 8007c46:	b002      	add	sp, #8
 8007c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c4c:	b003      	add	sp, #12
 8007c4e:	4770      	bx	lr
 8007c50:	20000010 	.word	0x20000010

08007c54 <memmove>:
 8007c54:	4288      	cmp	r0, r1
 8007c56:	b510      	push	{r4, lr}
 8007c58:	eb01 0402 	add.w	r4, r1, r2
 8007c5c:	d902      	bls.n	8007c64 <memmove+0x10>
 8007c5e:	4284      	cmp	r4, r0
 8007c60:	4623      	mov	r3, r4
 8007c62:	d807      	bhi.n	8007c74 <memmove+0x20>
 8007c64:	1e43      	subs	r3, r0, #1
 8007c66:	42a1      	cmp	r1, r4
 8007c68:	d008      	beq.n	8007c7c <memmove+0x28>
 8007c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c72:	e7f8      	b.n	8007c66 <memmove+0x12>
 8007c74:	4402      	add	r2, r0
 8007c76:	4601      	mov	r1, r0
 8007c78:	428a      	cmp	r2, r1
 8007c7a:	d100      	bne.n	8007c7e <memmove+0x2a>
 8007c7c:	bd10      	pop	{r4, pc}
 8007c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c86:	e7f7      	b.n	8007c78 <memmove+0x24>

08007c88 <__malloc_lock>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__malloc_lock+0x8>)
 8007c8a:	f000 bc11 	b.w	80084b0 <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	200002f4 	.word	0x200002f4

08007c94 <__malloc_unlock>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__malloc_unlock+0x8>)
 8007c96:	f000 bc0c 	b.w	80084b2 <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	200002f4 	.word	0x200002f4

08007ca0 <_realloc_r>:
 8007ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	460e      	mov	r6, r1
 8007caa:	b921      	cbnz	r1, 8007cb6 <_realloc_r+0x16>
 8007cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	f7ff bd93 	b.w	80077dc <_malloc_r>
 8007cb6:	b92a      	cbnz	r2, 8007cc4 <_realloc_r+0x24>
 8007cb8:	f7ff fd24 	bl	8007704 <_free_r>
 8007cbc:	4625      	mov	r5, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	f000 fc5c 	bl	8008580 <_malloc_usable_size_r>
 8007cc8:	4284      	cmp	r4, r0
 8007cca:	4607      	mov	r7, r0
 8007ccc:	d802      	bhi.n	8007cd4 <_realloc_r+0x34>
 8007cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cd2:	d812      	bhi.n	8007cfa <_realloc_r+0x5a>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	f7ff fd80 	bl	80077dc <_malloc_r>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0ed      	beq.n	8007cbe <_realloc_r+0x1e>
 8007ce2:	42bc      	cmp	r4, r7
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	bf28      	it	cs
 8007cea:	463a      	movcs	r2, r7
 8007cec:	f7ff f824 	bl	8006d38 <memcpy>
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f7ff fd06 	bl	8007704 <_free_r>
 8007cf8:	e7e1      	b.n	8007cbe <_realloc_r+0x1e>
 8007cfa:	4635      	mov	r5, r6
 8007cfc:	e7df      	b.n	8007cbe <_realloc_r+0x1e>

08007cfe <__sfputc_r>:
 8007cfe:	6893      	ldr	r3, [r2, #8]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	b410      	push	{r4}
 8007d06:	6093      	str	r3, [r2, #8]
 8007d08:	da08      	bge.n	8007d1c <__sfputc_r+0x1e>
 8007d0a:	6994      	ldr	r4, [r2, #24]
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	db01      	blt.n	8007d14 <__sfputc_r+0x16>
 8007d10:	290a      	cmp	r1, #10
 8007d12:	d103      	bne.n	8007d1c <__sfputc_r+0x1e>
 8007d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d18:	f000 b94a 	b.w	8007fb0 <__swbuf_r>
 8007d1c:	6813      	ldr	r3, [r2, #0]
 8007d1e:	1c58      	adds	r0, r3, #1
 8007d20:	6010      	str	r0, [r2, #0]
 8007d22:	7019      	strb	r1, [r3, #0]
 8007d24:	4608      	mov	r0, r1
 8007d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <__sfputs_r>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460f      	mov	r7, r1
 8007d32:	4614      	mov	r4, r2
 8007d34:	18d5      	adds	r5, r2, r3
 8007d36:	42ac      	cmp	r4, r5
 8007d38:	d101      	bne.n	8007d3e <__sfputs_r+0x12>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e007      	b.n	8007d4e <__sfputs_r+0x22>
 8007d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d42:	463a      	mov	r2, r7
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff ffda 	bl	8007cfe <__sfputc_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d1f3      	bne.n	8007d36 <__sfputs_r+0xa>
 8007d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d50 <_vfiprintf_r>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	460d      	mov	r5, r1
 8007d56:	b09d      	sub	sp, #116	; 0x74
 8007d58:	4614      	mov	r4, r2
 8007d5a:	4698      	mov	r8, r3
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	b118      	cbz	r0, 8007d68 <_vfiprintf_r+0x18>
 8007d60:	6983      	ldr	r3, [r0, #24]
 8007d62:	b90b      	cbnz	r3, 8007d68 <_vfiprintf_r+0x18>
 8007d64:	f000 fb06 	bl	8008374 <__sinit>
 8007d68:	4b89      	ldr	r3, [pc, #548]	; (8007f90 <_vfiprintf_r+0x240>)
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	d11b      	bne.n	8007da6 <_vfiprintf_r+0x56>
 8007d6e:	6875      	ldr	r5, [r6, #4]
 8007d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d72:	07d9      	lsls	r1, r3, #31
 8007d74:	d405      	bmi.n	8007d82 <_vfiprintf_r+0x32>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_vfiprintf_r+0x32>
 8007d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7e:	f000 fb97 	bl	80084b0 <__retarget_lock_acquire_recursive>
 8007d82:	89ab      	ldrh	r3, [r5, #12]
 8007d84:	071b      	lsls	r3, r3, #28
 8007d86:	d501      	bpl.n	8007d8c <_vfiprintf_r+0x3c>
 8007d88:	692b      	ldr	r3, [r5, #16]
 8007d8a:	b9eb      	cbnz	r3, 8007dc8 <_vfiprintf_r+0x78>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f000 f960 	bl	8008054 <__swsetup_r>
 8007d94:	b1c0      	cbz	r0, 8007dc8 <_vfiprintf_r+0x78>
 8007d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d98:	07dc      	lsls	r4, r3, #31
 8007d9a:	d50e      	bpl.n	8007dba <_vfiprintf_r+0x6a>
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da0:	b01d      	add	sp, #116	; 0x74
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	4b7b      	ldr	r3, [pc, #492]	; (8007f94 <_vfiprintf_r+0x244>)
 8007da8:	429d      	cmp	r5, r3
 8007daa:	d101      	bne.n	8007db0 <_vfiprintf_r+0x60>
 8007dac:	68b5      	ldr	r5, [r6, #8]
 8007dae:	e7df      	b.n	8007d70 <_vfiprintf_r+0x20>
 8007db0:	4b79      	ldr	r3, [pc, #484]	; (8007f98 <_vfiprintf_r+0x248>)
 8007db2:	429d      	cmp	r5, r3
 8007db4:	bf08      	it	eq
 8007db6:	68f5      	ldreq	r5, [r6, #12]
 8007db8:	e7da      	b.n	8007d70 <_vfiprintf_r+0x20>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	0598      	lsls	r0, r3, #22
 8007dbe:	d4ed      	bmi.n	8007d9c <_vfiprintf_r+0x4c>
 8007dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dc2:	f000 fb76 	bl	80084b2 <__retarget_lock_release_recursive>
 8007dc6:	e7e9      	b.n	8007d9c <_vfiprintf_r+0x4c>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9309      	str	r3, [sp, #36]	; 0x24
 8007dcc:	2320      	movs	r3, #32
 8007dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd6:	2330      	movs	r3, #48	; 0x30
 8007dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f9c <_vfiprintf_r+0x24c>
 8007ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007de0:	f04f 0901 	mov.w	r9, #1
 8007de4:	4623      	mov	r3, r4
 8007de6:	469a      	mov	sl, r3
 8007de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dec:	b10a      	cbz	r2, 8007df2 <_vfiprintf_r+0xa2>
 8007dee:	2a25      	cmp	r2, #37	; 0x25
 8007df0:	d1f9      	bne.n	8007de6 <_vfiprintf_r+0x96>
 8007df2:	ebba 0b04 	subs.w	fp, sl, r4
 8007df6:	d00b      	beq.n	8007e10 <_vfiprintf_r+0xc0>
 8007df8:	465b      	mov	r3, fp
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7ff ff94 	bl	8007d2c <__sfputs_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	f000 80aa 	beq.w	8007f5e <_vfiprintf_r+0x20e>
 8007e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e0c:	445a      	add	r2, fp
 8007e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e10:	f89a 3000 	ldrb.w	r3, [sl]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 80a2 	beq.w	8007f5e <_vfiprintf_r+0x20e>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e24:	f10a 0a01 	add.w	sl, sl, #1
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	9307      	str	r3, [sp, #28]
 8007e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e30:	931a      	str	r3, [sp, #104]	; 0x68
 8007e32:	4654      	mov	r4, sl
 8007e34:	2205      	movs	r2, #5
 8007e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3a:	4858      	ldr	r0, [pc, #352]	; (8007f9c <_vfiprintf_r+0x24c>)
 8007e3c:	f7f8 f9f0 	bl	8000220 <memchr>
 8007e40:	9a04      	ldr	r2, [sp, #16]
 8007e42:	b9d8      	cbnz	r0, 8007e7c <_vfiprintf_r+0x12c>
 8007e44:	06d1      	lsls	r1, r2, #27
 8007e46:	bf44      	itt	mi
 8007e48:	2320      	movmi	r3, #32
 8007e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e4e:	0713      	lsls	r3, r2, #28
 8007e50:	bf44      	itt	mi
 8007e52:	232b      	movmi	r3, #43	; 0x2b
 8007e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e58:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5e:	d015      	beq.n	8007e8c <_vfiprintf_r+0x13c>
 8007e60:	9a07      	ldr	r2, [sp, #28]
 8007e62:	4654      	mov	r4, sl
 8007e64:	2000      	movs	r0, #0
 8007e66:	f04f 0c0a 	mov.w	ip, #10
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e70:	3b30      	subs	r3, #48	; 0x30
 8007e72:	2b09      	cmp	r3, #9
 8007e74:	d94e      	bls.n	8007f14 <_vfiprintf_r+0x1c4>
 8007e76:	b1b0      	cbz	r0, 8007ea6 <_vfiprintf_r+0x156>
 8007e78:	9207      	str	r2, [sp, #28]
 8007e7a:	e014      	b.n	8007ea6 <_vfiprintf_r+0x156>
 8007e7c:	eba0 0308 	sub.w	r3, r0, r8
 8007e80:	fa09 f303 	lsl.w	r3, r9, r3
 8007e84:	4313      	orrs	r3, r2
 8007e86:	9304      	str	r3, [sp, #16]
 8007e88:	46a2      	mov	sl, r4
 8007e8a:	e7d2      	b.n	8007e32 <_vfiprintf_r+0xe2>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	1d19      	adds	r1, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	9103      	str	r1, [sp, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bfbb      	ittet	lt
 8007e98:	425b      	neglt	r3, r3
 8007e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e9e:	9307      	strge	r3, [sp, #28]
 8007ea0:	9307      	strlt	r3, [sp, #28]
 8007ea2:	bfb8      	it	lt
 8007ea4:	9204      	strlt	r2, [sp, #16]
 8007ea6:	7823      	ldrb	r3, [r4, #0]
 8007ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8007eaa:	d10c      	bne.n	8007ec6 <_vfiprintf_r+0x176>
 8007eac:	7863      	ldrb	r3, [r4, #1]
 8007eae:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb0:	d135      	bne.n	8007f1e <_vfiprintf_r+0x1ce>
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	1d1a      	adds	r2, r3, #4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	9203      	str	r2, [sp, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bfb8      	it	lt
 8007ebe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ec2:	3402      	adds	r4, #2
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fac <_vfiprintf_r+0x25c>
 8007eca:	7821      	ldrb	r1, [r4, #0]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	4650      	mov	r0, sl
 8007ed0:	f7f8 f9a6 	bl	8000220 <memchr>
 8007ed4:	b140      	cbz	r0, 8007ee8 <_vfiprintf_r+0x198>
 8007ed6:	2340      	movs	r3, #64	; 0x40
 8007ed8:	eba0 000a 	sub.w	r0, r0, sl
 8007edc:	fa03 f000 	lsl.w	r0, r3, r0
 8007ee0:	9b04      	ldr	r3, [sp, #16]
 8007ee2:	4303      	orrs	r3, r0
 8007ee4:	3401      	adds	r4, #1
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eec:	482c      	ldr	r0, [pc, #176]	; (8007fa0 <_vfiprintf_r+0x250>)
 8007eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ef2:	2206      	movs	r2, #6
 8007ef4:	f7f8 f994 	bl	8000220 <memchr>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d03f      	beq.n	8007f7c <_vfiprintf_r+0x22c>
 8007efc:	4b29      	ldr	r3, [pc, #164]	; (8007fa4 <_vfiprintf_r+0x254>)
 8007efe:	bb1b      	cbnz	r3, 8007f48 <_vfiprintf_r+0x1f8>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	3307      	adds	r3, #7
 8007f04:	f023 0307 	bic.w	r3, r3, #7
 8007f08:	3308      	adds	r3, #8
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0e:	443b      	add	r3, r7
 8007f10:	9309      	str	r3, [sp, #36]	; 0x24
 8007f12:	e767      	b.n	8007de4 <_vfiprintf_r+0x94>
 8007f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f18:	460c      	mov	r4, r1
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	e7a5      	b.n	8007e6a <_vfiprintf_r+0x11a>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	3401      	adds	r4, #1
 8007f22:	9305      	str	r3, [sp, #20]
 8007f24:	4619      	mov	r1, r3
 8007f26:	f04f 0c0a 	mov.w	ip, #10
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f30:	3a30      	subs	r2, #48	; 0x30
 8007f32:	2a09      	cmp	r2, #9
 8007f34:	d903      	bls.n	8007f3e <_vfiprintf_r+0x1ee>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0c5      	beq.n	8007ec6 <_vfiprintf_r+0x176>
 8007f3a:	9105      	str	r1, [sp, #20]
 8007f3c:	e7c3      	b.n	8007ec6 <_vfiprintf_r+0x176>
 8007f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f42:	4604      	mov	r4, r0
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7f0      	b.n	8007f2a <_vfiprintf_r+0x1da>
 8007f48:	ab03      	add	r3, sp, #12
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4b16      	ldr	r3, [pc, #88]	; (8007fa8 <_vfiprintf_r+0x258>)
 8007f50:	a904      	add	r1, sp, #16
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7fc f83a 	bl	8003fcc <_printf_float>
 8007f58:	4607      	mov	r7, r0
 8007f5a:	1c78      	adds	r0, r7, #1
 8007f5c:	d1d6      	bne.n	8007f0c <_vfiprintf_r+0x1bc>
 8007f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f60:	07d9      	lsls	r1, r3, #31
 8007f62:	d405      	bmi.n	8007f70 <_vfiprintf_r+0x220>
 8007f64:	89ab      	ldrh	r3, [r5, #12]
 8007f66:	059a      	lsls	r2, r3, #22
 8007f68:	d402      	bmi.n	8007f70 <_vfiprintf_r+0x220>
 8007f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f6c:	f000 faa1 	bl	80084b2 <__retarget_lock_release_recursive>
 8007f70:	89ab      	ldrh	r3, [r5, #12]
 8007f72:	065b      	lsls	r3, r3, #25
 8007f74:	f53f af12 	bmi.w	8007d9c <_vfiprintf_r+0x4c>
 8007f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f7a:	e711      	b.n	8007da0 <_vfiprintf_r+0x50>
 8007f7c:	ab03      	add	r3, sp, #12
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	462a      	mov	r2, r5
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <_vfiprintf_r+0x258>)
 8007f84:	a904      	add	r1, sp, #16
 8007f86:	4630      	mov	r0, r6
 8007f88:	f7fc fac4 	bl	8004514 <_printf_i>
 8007f8c:	e7e4      	b.n	8007f58 <_vfiprintf_r+0x208>
 8007f8e:	bf00      	nop
 8007f90:	08008c34 	.word	0x08008c34
 8007f94:	08008c54 	.word	0x08008c54
 8007f98:	08008c14 	.word	0x08008c14
 8007f9c:	08008bc4 	.word	0x08008bc4
 8007fa0:	08008bce 	.word	0x08008bce
 8007fa4:	08003fcd 	.word	0x08003fcd
 8007fa8:	08007d2d 	.word	0x08007d2d
 8007fac:	08008bca 	.word	0x08008bca

08007fb0 <__swbuf_r>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	460e      	mov	r6, r1
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	b118      	cbz	r0, 8007fc2 <__swbuf_r+0x12>
 8007fba:	6983      	ldr	r3, [r0, #24]
 8007fbc:	b90b      	cbnz	r3, 8007fc2 <__swbuf_r+0x12>
 8007fbe:	f000 f9d9 	bl	8008374 <__sinit>
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <__swbuf_r+0x98>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	d12b      	bne.n	8008020 <__swbuf_r+0x70>
 8007fc8:	686c      	ldr	r4, [r5, #4]
 8007fca:	69a3      	ldr	r3, [r4, #24]
 8007fcc:	60a3      	str	r3, [r4, #8]
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	071a      	lsls	r2, r3, #28
 8007fd2:	d52f      	bpl.n	8008034 <__swbuf_r+0x84>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	b36b      	cbz	r3, 8008034 <__swbuf_r+0x84>
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	6820      	ldr	r0, [r4, #0]
 8007fdc:	1ac0      	subs	r0, r0, r3
 8007fde:	6963      	ldr	r3, [r4, #20]
 8007fe0:	b2f6      	uxtb	r6, r6
 8007fe2:	4283      	cmp	r3, r0
 8007fe4:	4637      	mov	r7, r6
 8007fe6:	dc04      	bgt.n	8007ff2 <__swbuf_r+0x42>
 8007fe8:	4621      	mov	r1, r4
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f92e 	bl	800824c <_fflush_r>
 8007ff0:	bb30      	cbnz	r0, 8008040 <__swbuf_r+0x90>
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	60a3      	str	r3, [r4, #8]
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	701e      	strb	r6, [r3, #0]
 8008000:	6963      	ldr	r3, [r4, #20]
 8008002:	3001      	adds	r0, #1
 8008004:	4283      	cmp	r3, r0
 8008006:	d004      	beq.n	8008012 <__swbuf_r+0x62>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	07db      	lsls	r3, r3, #31
 800800c:	d506      	bpl.n	800801c <__swbuf_r+0x6c>
 800800e:	2e0a      	cmp	r6, #10
 8008010:	d104      	bne.n	800801c <__swbuf_r+0x6c>
 8008012:	4621      	mov	r1, r4
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f919 	bl	800824c <_fflush_r>
 800801a:	b988      	cbnz	r0, 8008040 <__swbuf_r+0x90>
 800801c:	4638      	mov	r0, r7
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <__swbuf_r+0x9c>)
 8008022:	429c      	cmp	r4, r3
 8008024:	d101      	bne.n	800802a <__swbuf_r+0x7a>
 8008026:	68ac      	ldr	r4, [r5, #8]
 8008028:	e7cf      	b.n	8007fca <__swbuf_r+0x1a>
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <__swbuf_r+0xa0>)
 800802c:	429c      	cmp	r4, r3
 800802e:	bf08      	it	eq
 8008030:	68ec      	ldreq	r4, [r5, #12]
 8008032:	e7ca      	b.n	8007fca <__swbuf_r+0x1a>
 8008034:	4621      	mov	r1, r4
 8008036:	4628      	mov	r0, r5
 8008038:	f000 f80c 	bl	8008054 <__swsetup_r>
 800803c:	2800      	cmp	r0, #0
 800803e:	d0cb      	beq.n	8007fd8 <__swbuf_r+0x28>
 8008040:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008044:	e7ea      	b.n	800801c <__swbuf_r+0x6c>
 8008046:	bf00      	nop
 8008048:	08008c34 	.word	0x08008c34
 800804c:	08008c54 	.word	0x08008c54
 8008050:	08008c14 	.word	0x08008c14

08008054 <__swsetup_r>:
 8008054:	4b32      	ldr	r3, [pc, #200]	; (8008120 <__swsetup_r+0xcc>)
 8008056:	b570      	push	{r4, r5, r6, lr}
 8008058:	681d      	ldr	r5, [r3, #0]
 800805a:	4606      	mov	r6, r0
 800805c:	460c      	mov	r4, r1
 800805e:	b125      	cbz	r5, 800806a <__swsetup_r+0x16>
 8008060:	69ab      	ldr	r3, [r5, #24]
 8008062:	b913      	cbnz	r3, 800806a <__swsetup_r+0x16>
 8008064:	4628      	mov	r0, r5
 8008066:	f000 f985 	bl	8008374 <__sinit>
 800806a:	4b2e      	ldr	r3, [pc, #184]	; (8008124 <__swsetup_r+0xd0>)
 800806c:	429c      	cmp	r4, r3
 800806e:	d10f      	bne.n	8008090 <__swsetup_r+0x3c>
 8008070:	686c      	ldr	r4, [r5, #4]
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008078:	0719      	lsls	r1, r3, #28
 800807a:	d42c      	bmi.n	80080d6 <__swsetup_r+0x82>
 800807c:	06dd      	lsls	r5, r3, #27
 800807e:	d411      	bmi.n	80080a4 <__swsetup_r+0x50>
 8008080:	2309      	movs	r3, #9
 8008082:	6033      	str	r3, [r6, #0]
 8008084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800808e:	e03e      	b.n	800810e <__swsetup_r+0xba>
 8008090:	4b25      	ldr	r3, [pc, #148]	; (8008128 <__swsetup_r+0xd4>)
 8008092:	429c      	cmp	r4, r3
 8008094:	d101      	bne.n	800809a <__swsetup_r+0x46>
 8008096:	68ac      	ldr	r4, [r5, #8]
 8008098:	e7eb      	b.n	8008072 <__swsetup_r+0x1e>
 800809a:	4b24      	ldr	r3, [pc, #144]	; (800812c <__swsetup_r+0xd8>)
 800809c:	429c      	cmp	r4, r3
 800809e:	bf08      	it	eq
 80080a0:	68ec      	ldreq	r4, [r5, #12]
 80080a2:	e7e6      	b.n	8008072 <__swsetup_r+0x1e>
 80080a4:	0758      	lsls	r0, r3, #29
 80080a6:	d512      	bpl.n	80080ce <__swsetup_r+0x7a>
 80080a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080aa:	b141      	cbz	r1, 80080be <__swsetup_r+0x6a>
 80080ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b0:	4299      	cmp	r1, r3
 80080b2:	d002      	beq.n	80080ba <__swsetup_r+0x66>
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff fb25 	bl	8007704 <_free_r>
 80080ba:	2300      	movs	r3, #0
 80080bc:	6363      	str	r3, [r4, #52]	; 0x34
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	2300      	movs	r3, #0
 80080c8:	6063      	str	r3, [r4, #4]
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	f043 0308 	orr.w	r3, r3, #8
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	b94b      	cbnz	r3, 80080ee <__swsetup_r+0x9a>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e4:	d003      	beq.n	80080ee <__swsetup_r+0x9a>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4630      	mov	r0, r6
 80080ea:	f000 fa09 	bl	8008500 <__smakebuf_r>
 80080ee:	89a0      	ldrh	r0, [r4, #12]
 80080f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f4:	f010 0301 	ands.w	r3, r0, #1
 80080f8:	d00a      	beq.n	8008110 <__swsetup_r+0xbc>
 80080fa:	2300      	movs	r3, #0
 80080fc:	60a3      	str	r3, [r4, #8]
 80080fe:	6963      	ldr	r3, [r4, #20]
 8008100:	425b      	negs	r3, r3
 8008102:	61a3      	str	r3, [r4, #24]
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	b943      	cbnz	r3, 800811a <__swsetup_r+0xc6>
 8008108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800810c:	d1ba      	bne.n	8008084 <__swsetup_r+0x30>
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	0781      	lsls	r1, r0, #30
 8008112:	bf58      	it	pl
 8008114:	6963      	ldrpl	r3, [r4, #20]
 8008116:	60a3      	str	r3, [r4, #8]
 8008118:	e7f4      	b.n	8008104 <__swsetup_r+0xb0>
 800811a:	2000      	movs	r0, #0
 800811c:	e7f7      	b.n	800810e <__swsetup_r+0xba>
 800811e:	bf00      	nop
 8008120:	20000010 	.word	0x20000010
 8008124:	08008c34 	.word	0x08008c34
 8008128:	08008c54 	.word	0x08008c54
 800812c:	08008c14 	.word	0x08008c14

08008130 <abort>:
 8008130:	b508      	push	{r3, lr}
 8008132:	2006      	movs	r0, #6
 8008134:	f000 fa54 	bl	80085e0 <raise>
 8008138:	2001      	movs	r0, #1
 800813a:	f7f9 fa9d 	bl	8001678 <_exit>
	...

08008140 <__sflush_r>:
 8008140:	898a      	ldrh	r2, [r1, #12]
 8008142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	4605      	mov	r5, r0
 8008148:	0710      	lsls	r0, r2, #28
 800814a:	460c      	mov	r4, r1
 800814c:	d458      	bmi.n	8008200 <__sflush_r+0xc0>
 800814e:	684b      	ldr	r3, [r1, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc05      	bgt.n	8008160 <__sflush_r+0x20>
 8008154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	dc02      	bgt.n	8008160 <__sflush_r+0x20>
 800815a:	2000      	movs	r0, #0
 800815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008162:	2e00      	cmp	r6, #0
 8008164:	d0f9      	beq.n	800815a <__sflush_r+0x1a>
 8008166:	2300      	movs	r3, #0
 8008168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800816c:	682f      	ldr	r7, [r5, #0]
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	d032      	beq.n	80081d8 <__sflush_r+0x98>
 8008172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	075a      	lsls	r2, r3, #29
 8008178:	d505      	bpl.n	8008186 <__sflush_r+0x46>
 800817a:	6863      	ldr	r3, [r4, #4]
 800817c:	1ac0      	subs	r0, r0, r3
 800817e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008180:	b10b      	cbz	r3, 8008186 <__sflush_r+0x46>
 8008182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008184:	1ac0      	subs	r0, r0, r3
 8008186:	2300      	movs	r3, #0
 8008188:	4602      	mov	r2, r0
 800818a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800818c:	6a21      	ldr	r1, [r4, #32]
 800818e:	4628      	mov	r0, r5
 8008190:	47b0      	blx	r6
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	d106      	bne.n	80081a6 <__sflush_r+0x66>
 8008198:	6829      	ldr	r1, [r5, #0]
 800819a:	291d      	cmp	r1, #29
 800819c:	d82c      	bhi.n	80081f8 <__sflush_r+0xb8>
 800819e:	4a2a      	ldr	r2, [pc, #168]	; (8008248 <__sflush_r+0x108>)
 80081a0:	40ca      	lsrs	r2, r1
 80081a2:	07d6      	lsls	r6, r2, #31
 80081a4:	d528      	bpl.n	80081f8 <__sflush_r+0xb8>
 80081a6:	2200      	movs	r2, #0
 80081a8:	6062      	str	r2, [r4, #4]
 80081aa:	04d9      	lsls	r1, r3, #19
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	6022      	str	r2, [r4, #0]
 80081b0:	d504      	bpl.n	80081bc <__sflush_r+0x7c>
 80081b2:	1c42      	adds	r2, r0, #1
 80081b4:	d101      	bne.n	80081ba <__sflush_r+0x7a>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	b903      	cbnz	r3, 80081bc <__sflush_r+0x7c>
 80081ba:	6560      	str	r0, [r4, #84]	; 0x54
 80081bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081be:	602f      	str	r7, [r5, #0]
 80081c0:	2900      	cmp	r1, #0
 80081c2:	d0ca      	beq.n	800815a <__sflush_r+0x1a>
 80081c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081c8:	4299      	cmp	r1, r3
 80081ca:	d002      	beq.n	80081d2 <__sflush_r+0x92>
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7ff fa99 	bl	8007704 <_free_r>
 80081d2:	2000      	movs	r0, #0
 80081d4:	6360      	str	r0, [r4, #52]	; 0x34
 80081d6:	e7c1      	b.n	800815c <__sflush_r+0x1c>
 80081d8:	6a21      	ldr	r1, [r4, #32]
 80081da:	2301      	movs	r3, #1
 80081dc:	4628      	mov	r0, r5
 80081de:	47b0      	blx	r6
 80081e0:	1c41      	adds	r1, r0, #1
 80081e2:	d1c7      	bne.n	8008174 <__sflush_r+0x34>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0c4      	beq.n	8008174 <__sflush_r+0x34>
 80081ea:	2b1d      	cmp	r3, #29
 80081ec:	d001      	beq.n	80081f2 <__sflush_r+0xb2>
 80081ee:	2b16      	cmp	r3, #22
 80081f0:	d101      	bne.n	80081f6 <__sflush_r+0xb6>
 80081f2:	602f      	str	r7, [r5, #0]
 80081f4:	e7b1      	b.n	800815a <__sflush_r+0x1a>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	e7ad      	b.n	800815c <__sflush_r+0x1c>
 8008200:	690f      	ldr	r7, [r1, #16]
 8008202:	2f00      	cmp	r7, #0
 8008204:	d0a9      	beq.n	800815a <__sflush_r+0x1a>
 8008206:	0793      	lsls	r3, r2, #30
 8008208:	680e      	ldr	r6, [r1, #0]
 800820a:	bf08      	it	eq
 800820c:	694b      	ldreq	r3, [r1, #20]
 800820e:	600f      	str	r7, [r1, #0]
 8008210:	bf18      	it	ne
 8008212:	2300      	movne	r3, #0
 8008214:	eba6 0807 	sub.w	r8, r6, r7
 8008218:	608b      	str	r3, [r1, #8]
 800821a:	f1b8 0f00 	cmp.w	r8, #0
 800821e:	dd9c      	ble.n	800815a <__sflush_r+0x1a>
 8008220:	6a21      	ldr	r1, [r4, #32]
 8008222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008224:	4643      	mov	r3, r8
 8008226:	463a      	mov	r2, r7
 8008228:	4628      	mov	r0, r5
 800822a:	47b0      	blx	r6
 800822c:	2800      	cmp	r0, #0
 800822e:	dc06      	bgt.n	800823e <__sflush_r+0xfe>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800823c:	e78e      	b.n	800815c <__sflush_r+0x1c>
 800823e:	4407      	add	r7, r0
 8008240:	eba8 0800 	sub.w	r8, r8, r0
 8008244:	e7e9      	b.n	800821a <__sflush_r+0xda>
 8008246:	bf00      	nop
 8008248:	20400001 	.word	0x20400001

0800824c <_fflush_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	690b      	ldr	r3, [r1, #16]
 8008250:	4605      	mov	r5, r0
 8008252:	460c      	mov	r4, r1
 8008254:	b913      	cbnz	r3, 800825c <_fflush_r+0x10>
 8008256:	2500      	movs	r5, #0
 8008258:	4628      	mov	r0, r5
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	b118      	cbz	r0, 8008266 <_fflush_r+0x1a>
 800825e:	6983      	ldr	r3, [r0, #24]
 8008260:	b90b      	cbnz	r3, 8008266 <_fflush_r+0x1a>
 8008262:	f000 f887 	bl	8008374 <__sinit>
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <_fflush_r+0x6c>)
 8008268:	429c      	cmp	r4, r3
 800826a:	d11b      	bne.n	80082a4 <_fflush_r+0x58>
 800826c:	686c      	ldr	r4, [r5, #4]
 800826e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0ef      	beq.n	8008256 <_fflush_r+0xa>
 8008276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008278:	07d0      	lsls	r0, r2, #31
 800827a:	d404      	bmi.n	8008286 <_fflush_r+0x3a>
 800827c:	0599      	lsls	r1, r3, #22
 800827e:	d402      	bmi.n	8008286 <_fflush_r+0x3a>
 8008280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008282:	f000 f915 	bl	80084b0 <__retarget_lock_acquire_recursive>
 8008286:	4628      	mov	r0, r5
 8008288:	4621      	mov	r1, r4
 800828a:	f7ff ff59 	bl	8008140 <__sflush_r>
 800828e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008290:	07da      	lsls	r2, r3, #31
 8008292:	4605      	mov	r5, r0
 8008294:	d4e0      	bmi.n	8008258 <_fflush_r+0xc>
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	059b      	lsls	r3, r3, #22
 800829a:	d4dd      	bmi.n	8008258 <_fflush_r+0xc>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f000 f908 	bl	80084b2 <__retarget_lock_release_recursive>
 80082a2:	e7d9      	b.n	8008258 <_fflush_r+0xc>
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <_fflush_r+0x70>)
 80082a6:	429c      	cmp	r4, r3
 80082a8:	d101      	bne.n	80082ae <_fflush_r+0x62>
 80082aa:	68ac      	ldr	r4, [r5, #8]
 80082ac:	e7df      	b.n	800826e <_fflush_r+0x22>
 80082ae:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <_fflush_r+0x74>)
 80082b0:	429c      	cmp	r4, r3
 80082b2:	bf08      	it	eq
 80082b4:	68ec      	ldreq	r4, [r5, #12]
 80082b6:	e7da      	b.n	800826e <_fflush_r+0x22>
 80082b8:	08008c34 	.word	0x08008c34
 80082bc:	08008c54 	.word	0x08008c54
 80082c0:	08008c14 	.word	0x08008c14

080082c4 <std>:
 80082c4:	2300      	movs	r3, #0
 80082c6:	b510      	push	{r4, lr}
 80082c8:	4604      	mov	r4, r0
 80082ca:	e9c0 3300 	strd	r3, r3, [r0]
 80082ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082d2:	6083      	str	r3, [r0, #8]
 80082d4:	8181      	strh	r1, [r0, #12]
 80082d6:	6643      	str	r3, [r0, #100]	; 0x64
 80082d8:	81c2      	strh	r2, [r0, #14]
 80082da:	6183      	str	r3, [r0, #24]
 80082dc:	4619      	mov	r1, r3
 80082de:	2208      	movs	r2, #8
 80082e0:	305c      	adds	r0, #92	; 0x5c
 80082e2:	f7fb fdcb 	bl	8003e7c <memset>
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <std+0x38>)
 80082e8:	6263      	str	r3, [r4, #36]	; 0x24
 80082ea:	4b05      	ldr	r3, [pc, #20]	; (8008300 <std+0x3c>)
 80082ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ee:	4b05      	ldr	r3, [pc, #20]	; (8008304 <std+0x40>)
 80082f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082f2:	4b05      	ldr	r3, [pc, #20]	; (8008308 <std+0x44>)
 80082f4:	6224      	str	r4, [r4, #32]
 80082f6:	6323      	str	r3, [r4, #48]	; 0x30
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	bf00      	nop
 80082fc:	08008619 	.word	0x08008619
 8008300:	0800863b 	.word	0x0800863b
 8008304:	08008673 	.word	0x08008673
 8008308:	08008697 	.word	0x08008697

0800830c <_cleanup_r>:
 800830c:	4901      	ldr	r1, [pc, #4]	; (8008314 <_cleanup_r+0x8>)
 800830e:	f000 b8af 	b.w	8008470 <_fwalk_reent>
 8008312:	bf00      	nop
 8008314:	0800824d 	.word	0x0800824d

08008318 <__sfmoreglue>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	2268      	movs	r2, #104	; 0x68
 800831c:	1e4d      	subs	r5, r1, #1
 800831e:	4355      	muls	r5, r2
 8008320:	460e      	mov	r6, r1
 8008322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008326:	f7ff fa59 	bl	80077dc <_malloc_r>
 800832a:	4604      	mov	r4, r0
 800832c:	b140      	cbz	r0, 8008340 <__sfmoreglue+0x28>
 800832e:	2100      	movs	r1, #0
 8008330:	e9c0 1600 	strd	r1, r6, [r0]
 8008334:	300c      	adds	r0, #12
 8008336:	60a0      	str	r0, [r4, #8]
 8008338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800833c:	f7fb fd9e 	bl	8003e7c <memset>
 8008340:	4620      	mov	r0, r4
 8008342:	bd70      	pop	{r4, r5, r6, pc}

08008344 <__sfp_lock_acquire>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sfp_lock_acquire+0x8>)
 8008346:	f000 b8b3 	b.w	80084b0 <__retarget_lock_acquire_recursive>
 800834a:	bf00      	nop
 800834c:	200002f5 	.word	0x200002f5

08008350 <__sfp_lock_release>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sfp_lock_release+0x8>)
 8008352:	f000 b8ae 	b.w	80084b2 <__retarget_lock_release_recursive>
 8008356:	bf00      	nop
 8008358:	200002f5 	.word	0x200002f5

0800835c <__sinit_lock_acquire>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sinit_lock_acquire+0x8>)
 800835e:	f000 b8a7 	b.w	80084b0 <__retarget_lock_acquire_recursive>
 8008362:	bf00      	nop
 8008364:	200002f6 	.word	0x200002f6

08008368 <__sinit_lock_release>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__sinit_lock_release+0x8>)
 800836a:	f000 b8a2 	b.w	80084b2 <__retarget_lock_release_recursive>
 800836e:	bf00      	nop
 8008370:	200002f6 	.word	0x200002f6

08008374 <__sinit>:
 8008374:	b510      	push	{r4, lr}
 8008376:	4604      	mov	r4, r0
 8008378:	f7ff fff0 	bl	800835c <__sinit_lock_acquire>
 800837c:	69a3      	ldr	r3, [r4, #24]
 800837e:	b11b      	cbz	r3, 8008388 <__sinit+0x14>
 8008380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008384:	f7ff bff0 	b.w	8008368 <__sinit_lock_release>
 8008388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800838c:	6523      	str	r3, [r4, #80]	; 0x50
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <__sinit+0x68>)
 8008390:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <__sinit+0x6c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	62a2      	str	r2, [r4, #40]	; 0x28
 8008396:	42a3      	cmp	r3, r4
 8008398:	bf04      	itt	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	61a3      	streq	r3, [r4, #24]
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 f820 	bl	80083e4 <__sfp>
 80083a4:	6060      	str	r0, [r4, #4]
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 f81c 	bl	80083e4 <__sfp>
 80083ac:	60a0      	str	r0, [r4, #8]
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 f818 	bl	80083e4 <__sfp>
 80083b4:	2200      	movs	r2, #0
 80083b6:	60e0      	str	r0, [r4, #12]
 80083b8:	2104      	movs	r1, #4
 80083ba:	6860      	ldr	r0, [r4, #4]
 80083bc:	f7ff ff82 	bl	80082c4 <std>
 80083c0:	68a0      	ldr	r0, [r4, #8]
 80083c2:	2201      	movs	r2, #1
 80083c4:	2109      	movs	r1, #9
 80083c6:	f7ff ff7d 	bl	80082c4 <std>
 80083ca:	68e0      	ldr	r0, [r4, #12]
 80083cc:	2202      	movs	r2, #2
 80083ce:	2112      	movs	r1, #18
 80083d0:	f7ff ff78 	bl	80082c4 <std>
 80083d4:	2301      	movs	r3, #1
 80083d6:	61a3      	str	r3, [r4, #24]
 80083d8:	e7d2      	b.n	8008380 <__sinit+0xc>
 80083da:	bf00      	nop
 80083dc:	080087cc 	.word	0x080087cc
 80083e0:	0800830d 	.word	0x0800830d

080083e4 <__sfp>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	4607      	mov	r7, r0
 80083e8:	f7ff ffac 	bl	8008344 <__sfp_lock_acquire>
 80083ec:	4b1e      	ldr	r3, [pc, #120]	; (8008468 <__sfp+0x84>)
 80083ee:	681e      	ldr	r6, [r3, #0]
 80083f0:	69b3      	ldr	r3, [r6, #24]
 80083f2:	b913      	cbnz	r3, 80083fa <__sfp+0x16>
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff ffbd 	bl	8008374 <__sinit>
 80083fa:	3648      	adds	r6, #72	; 0x48
 80083fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008400:	3b01      	subs	r3, #1
 8008402:	d503      	bpl.n	800840c <__sfp+0x28>
 8008404:	6833      	ldr	r3, [r6, #0]
 8008406:	b30b      	cbz	r3, 800844c <__sfp+0x68>
 8008408:	6836      	ldr	r6, [r6, #0]
 800840a:	e7f7      	b.n	80083fc <__sfp+0x18>
 800840c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008410:	b9d5      	cbnz	r5, 8008448 <__sfp+0x64>
 8008412:	4b16      	ldr	r3, [pc, #88]	; (800846c <__sfp+0x88>)
 8008414:	60e3      	str	r3, [r4, #12]
 8008416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800841a:	6665      	str	r5, [r4, #100]	; 0x64
 800841c:	f000 f847 	bl	80084ae <__retarget_lock_init_recursive>
 8008420:	f7ff ff96 	bl	8008350 <__sfp_lock_release>
 8008424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800842c:	6025      	str	r5, [r4, #0]
 800842e:	61a5      	str	r5, [r4, #24]
 8008430:	2208      	movs	r2, #8
 8008432:	4629      	mov	r1, r5
 8008434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008438:	f7fb fd20 	bl	8003e7c <memset>
 800843c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008444:	4620      	mov	r0, r4
 8008446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008448:	3468      	adds	r4, #104	; 0x68
 800844a:	e7d9      	b.n	8008400 <__sfp+0x1c>
 800844c:	2104      	movs	r1, #4
 800844e:	4638      	mov	r0, r7
 8008450:	f7ff ff62 	bl	8008318 <__sfmoreglue>
 8008454:	4604      	mov	r4, r0
 8008456:	6030      	str	r0, [r6, #0]
 8008458:	2800      	cmp	r0, #0
 800845a:	d1d5      	bne.n	8008408 <__sfp+0x24>
 800845c:	f7ff ff78 	bl	8008350 <__sfp_lock_release>
 8008460:	230c      	movs	r3, #12
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	e7ee      	b.n	8008444 <__sfp+0x60>
 8008466:	bf00      	nop
 8008468:	080087cc 	.word	0x080087cc
 800846c:	ffff0001 	.word	0xffff0001

08008470 <_fwalk_reent>:
 8008470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008474:	4606      	mov	r6, r0
 8008476:	4688      	mov	r8, r1
 8008478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800847c:	2700      	movs	r7, #0
 800847e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008482:	f1b9 0901 	subs.w	r9, r9, #1
 8008486:	d505      	bpl.n	8008494 <_fwalk_reent+0x24>
 8008488:	6824      	ldr	r4, [r4, #0]
 800848a:	2c00      	cmp	r4, #0
 800848c:	d1f7      	bne.n	800847e <_fwalk_reent+0xe>
 800848e:	4638      	mov	r0, r7
 8008490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008494:	89ab      	ldrh	r3, [r5, #12]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d907      	bls.n	80084aa <_fwalk_reent+0x3a>
 800849a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800849e:	3301      	adds	r3, #1
 80084a0:	d003      	beq.n	80084aa <_fwalk_reent+0x3a>
 80084a2:	4629      	mov	r1, r5
 80084a4:	4630      	mov	r0, r6
 80084a6:	47c0      	blx	r8
 80084a8:	4307      	orrs	r7, r0
 80084aa:	3568      	adds	r5, #104	; 0x68
 80084ac:	e7e9      	b.n	8008482 <_fwalk_reent+0x12>

080084ae <__retarget_lock_init_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <__retarget_lock_acquire_recursive>:
 80084b0:	4770      	bx	lr

080084b2 <__retarget_lock_release_recursive>:
 80084b2:	4770      	bx	lr

080084b4 <__swhatbuf_r>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	460e      	mov	r6, r1
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	2900      	cmp	r1, #0
 80084be:	b096      	sub	sp, #88	; 0x58
 80084c0:	4614      	mov	r4, r2
 80084c2:	461d      	mov	r5, r3
 80084c4:	da08      	bge.n	80084d8 <__swhatbuf_r+0x24>
 80084c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	061a      	lsls	r2, r3, #24
 80084d0:	d410      	bmi.n	80084f4 <__swhatbuf_r+0x40>
 80084d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d6:	e00e      	b.n	80084f6 <__swhatbuf_r+0x42>
 80084d8:	466a      	mov	r2, sp
 80084da:	f000 f903 	bl	80086e4 <_fstat_r>
 80084de:	2800      	cmp	r0, #0
 80084e0:	dbf1      	blt.n	80084c6 <__swhatbuf_r+0x12>
 80084e2:	9a01      	ldr	r2, [sp, #4]
 80084e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084ec:	425a      	negs	r2, r3
 80084ee:	415a      	adcs	r2, r3
 80084f0:	602a      	str	r2, [r5, #0]
 80084f2:	e7ee      	b.n	80084d2 <__swhatbuf_r+0x1e>
 80084f4:	2340      	movs	r3, #64	; 0x40
 80084f6:	2000      	movs	r0, #0
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	b016      	add	sp, #88	; 0x58
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008500 <__smakebuf_r>:
 8008500:	898b      	ldrh	r3, [r1, #12]
 8008502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008504:	079d      	lsls	r5, r3, #30
 8008506:	4606      	mov	r6, r0
 8008508:	460c      	mov	r4, r1
 800850a:	d507      	bpl.n	800851c <__smakebuf_r+0x1c>
 800850c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	2301      	movs	r3, #1
 8008516:	6163      	str	r3, [r4, #20]
 8008518:	b002      	add	sp, #8
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	ab01      	add	r3, sp, #4
 800851e:	466a      	mov	r2, sp
 8008520:	f7ff ffc8 	bl	80084b4 <__swhatbuf_r>
 8008524:	9900      	ldr	r1, [sp, #0]
 8008526:	4605      	mov	r5, r0
 8008528:	4630      	mov	r0, r6
 800852a:	f7ff f957 	bl	80077dc <_malloc_r>
 800852e:	b948      	cbnz	r0, 8008544 <__smakebuf_r+0x44>
 8008530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008534:	059a      	lsls	r2, r3, #22
 8008536:	d4ef      	bmi.n	8008518 <__smakebuf_r+0x18>
 8008538:	f023 0303 	bic.w	r3, r3, #3
 800853c:	f043 0302 	orr.w	r3, r3, #2
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	e7e3      	b.n	800850c <__smakebuf_r+0xc>
 8008544:	4b0d      	ldr	r3, [pc, #52]	; (800857c <__smakebuf_r+0x7c>)
 8008546:	62b3      	str	r3, [r6, #40]	; 0x28
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	6020      	str	r0, [r4, #0]
 800854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	6163      	str	r3, [r4, #20]
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	6120      	str	r0, [r4, #16]
 800855a:	b15b      	cbz	r3, 8008574 <__smakebuf_r+0x74>
 800855c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008560:	4630      	mov	r0, r6
 8008562:	f000 f8d1 	bl	8008708 <_isatty_r>
 8008566:	b128      	cbz	r0, 8008574 <__smakebuf_r+0x74>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	81a3      	strh	r3, [r4, #12]
 8008574:	89a0      	ldrh	r0, [r4, #12]
 8008576:	4305      	orrs	r5, r0
 8008578:	81a5      	strh	r5, [r4, #12]
 800857a:	e7cd      	b.n	8008518 <__smakebuf_r+0x18>
 800857c:	0800830d 	.word	0x0800830d

08008580 <_malloc_usable_size_r>:
 8008580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008584:	1f18      	subs	r0, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfbc      	itt	lt
 800858a:	580b      	ldrlt	r3, [r1, r0]
 800858c:	18c0      	addlt	r0, r0, r3
 800858e:	4770      	bx	lr

08008590 <_raise_r>:
 8008590:	291f      	cmp	r1, #31
 8008592:	b538      	push	{r3, r4, r5, lr}
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	d904      	bls.n	80085a4 <_raise_r+0x14>
 800859a:	2316      	movs	r3, #22
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085a6:	b112      	cbz	r2, 80085ae <_raise_r+0x1e>
 80085a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085ac:	b94b      	cbnz	r3, 80085c2 <_raise_r+0x32>
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f830 	bl	8008614 <_getpid_r>
 80085b4:	462a      	mov	r2, r5
 80085b6:	4601      	mov	r1, r0
 80085b8:	4620      	mov	r0, r4
 80085ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085be:	f000 b817 	b.w	80085f0 <_kill_r>
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d00a      	beq.n	80085dc <_raise_r+0x4c>
 80085c6:	1c59      	adds	r1, r3, #1
 80085c8:	d103      	bne.n	80085d2 <_raise_r+0x42>
 80085ca:	2316      	movs	r3, #22
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	2001      	movs	r0, #1
 80085d0:	e7e7      	b.n	80085a2 <_raise_r+0x12>
 80085d2:	2400      	movs	r4, #0
 80085d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085d8:	4628      	mov	r0, r5
 80085da:	4798      	blx	r3
 80085dc:	2000      	movs	r0, #0
 80085de:	e7e0      	b.n	80085a2 <_raise_r+0x12>

080085e0 <raise>:
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <raise+0xc>)
 80085e2:	4601      	mov	r1, r0
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f7ff bfd3 	b.w	8008590 <_raise_r>
 80085ea:	bf00      	nop
 80085ec:	20000010 	.word	0x20000010

080085f0 <_kill_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d07      	ldr	r5, [pc, #28]	; (8008610 <_kill_r+0x20>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	f7f9 f82b 	bl	8001658 <_kill>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	d102      	bne.n	800860c <_kill_r+0x1c>
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	b103      	cbz	r3, 800860c <_kill_r+0x1c>
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	bd38      	pop	{r3, r4, r5, pc}
 800860e:	bf00      	nop
 8008610:	200002f0 	.word	0x200002f0

08008614 <_getpid_r>:
 8008614:	f7f9 b818 	b.w	8001648 <_getpid>

08008618 <__sread>:
 8008618:	b510      	push	{r4, lr}
 800861a:	460c      	mov	r4, r1
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	f000 f894 	bl	800874c <_read_r>
 8008624:	2800      	cmp	r0, #0
 8008626:	bfab      	itete	ge
 8008628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800862a:	89a3      	ldrhlt	r3, [r4, #12]
 800862c:	181b      	addge	r3, r3, r0
 800862e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008632:	bfac      	ite	ge
 8008634:	6563      	strge	r3, [r4, #84]	; 0x54
 8008636:	81a3      	strhlt	r3, [r4, #12]
 8008638:	bd10      	pop	{r4, pc}

0800863a <__swrite>:
 800863a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863e:	461f      	mov	r7, r3
 8008640:	898b      	ldrh	r3, [r1, #12]
 8008642:	05db      	lsls	r3, r3, #23
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	4616      	mov	r6, r2
 800864a:	d505      	bpl.n	8008658 <__swrite+0x1e>
 800864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008650:	2302      	movs	r3, #2
 8008652:	2200      	movs	r2, #0
 8008654:	f000 f868 	bl	8008728 <_lseek_r>
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800865e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	4628      	mov	r0, r5
 800866a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800866e:	f000 b817 	b.w	80086a0 <_write_r>

08008672 <__sseek>:
 8008672:	b510      	push	{r4, lr}
 8008674:	460c      	mov	r4, r1
 8008676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867a:	f000 f855 	bl	8008728 <_lseek_r>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	bf15      	itete	ne
 8008684:	6560      	strne	r0, [r4, #84]	; 0x54
 8008686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800868a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800868e:	81a3      	strheq	r3, [r4, #12]
 8008690:	bf18      	it	ne
 8008692:	81a3      	strhne	r3, [r4, #12]
 8008694:	bd10      	pop	{r4, pc}

08008696 <__sclose>:
 8008696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869a:	f000 b813 	b.w	80086c4 <_close_r>
	...

080086a0 <_write_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d07      	ldr	r5, [pc, #28]	; (80086c0 <_write_r+0x20>)
 80086a4:	4604      	mov	r4, r0
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	602a      	str	r2, [r5, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f7f9 f809 	bl	80016c6 <_write>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_write_r+0x1e>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_write_r+0x1e>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	200002f0 	.word	0x200002f0

080086c4 <_close_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d06      	ldr	r5, [pc, #24]	; (80086e0 <_close_r+0x1c>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	f7f9 f815 	bl	80016fe <_close>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_close_r+0x1a>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_close_r+0x1a>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	200002f0 	.word	0x200002f0

080086e4 <_fstat_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d07      	ldr	r5, [pc, #28]	; (8008704 <_fstat_r+0x20>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	f7f9 f810 	bl	8001716 <_fstat>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d102      	bne.n	8008700 <_fstat_r+0x1c>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b103      	cbz	r3, 8008700 <_fstat_r+0x1c>
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	200002f0 	.word	0x200002f0

08008708 <_isatty_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d06      	ldr	r5, [pc, #24]	; (8008724 <_isatty_r+0x1c>)
 800870c:	2300      	movs	r3, #0
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f7f9 f80f 	bl	8001736 <_isatty>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_isatty_r+0x1a>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_isatty_r+0x1a>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	200002f0 	.word	0x200002f0

08008728 <_lseek_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d07      	ldr	r5, [pc, #28]	; (8008748 <_lseek_r+0x20>)
 800872c:	4604      	mov	r4, r0
 800872e:	4608      	mov	r0, r1
 8008730:	4611      	mov	r1, r2
 8008732:	2200      	movs	r2, #0
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f7f9 f808 	bl	800174c <_lseek>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_lseek_r+0x1e>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_lseek_r+0x1e>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	200002f0 	.word	0x200002f0

0800874c <_read_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	; (800876c <_read_r+0x20>)
 8008750:	4604      	mov	r4, r0
 8008752:	4608      	mov	r0, r1
 8008754:	4611      	mov	r1, r2
 8008756:	2200      	movs	r2, #0
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	f7f8 ff96 	bl	800168c <_read>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_read_r+0x1e>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_read_r+0x1e>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	200002f0 	.word	0x200002f0

08008770 <_init>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	bf00      	nop
 8008774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008776:	bc08      	pop	{r3}
 8008778:	469e      	mov	lr, r3
 800877a:	4770      	bx	lr

0800877c <_fini>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	bf00      	nop
 8008780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008782:	bc08      	pop	{r3}
 8008784:	469e      	mov	lr, r3
 8008786:	4770      	bx	lr
