
SleepMode_OnExit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003164  08003164  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800316c  0800316c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000088  080031fc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080031fc  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d978  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001baa  00000000  00000000  0002da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002260b  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ec72  00000000  00000000  000527db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d0a7d  00000000  00000000  0006144d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00131eca  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b30  00000000  00000000  00131f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003604  00000000  00000000  00132a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080030e8 	.word	0x080030e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080030e8 	.word	0x080030e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SysTick_Handler>:
#include"main.h"
extern UART_HandleTypeDef huart3;
extern TIM_HandleTypeDef htimer6;

void SysTick_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005c8:	f000 fa60 	bl	8000a8c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005cc:	f000 fbb3 	bl	8000d36 <HAL_SYSTICK_IRQHandler>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005d8:	2101      	movs	r1, #1
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <TIM6_DAC_IRQHandler+0x20>)
 80005dc:	f000 fdde 	bl	800119c <HAL_GPIO_TogglePin>
	HAL_TIM_IRQHandler(&htimer6);
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <TIM6_DAC_IRQHandler+0x24>)
 80005e2:	f000 fee9 	bl	80013b8 <HAL_TIM_IRQHandler>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005e6:	2101      	movs	r1, #1
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <TIM6_DAC_IRQHandler+0x20>)
 80005ea:	f000 fdd7 	bl	800119c <HAL_GPIO_TogglePin>

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020400 	.word	0x40020400
 80005f8:	200000e8 	.word	0x200000e8

080005fc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart3);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <USART3_IRQHandler+0x10>)
 8000602:	f001 f99d 	bl	8001940 <HAL_UART_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000a4 	.word	0x200000a4

08000610 <main>:
extern uint8_t some_data[];



int main()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_Init();
 8000614:	f000 f9e8 	bl	80009e8 <HAL_Init>
	gpio_init();
 8000618:	f000 f854 	bl	80006c4 <gpio_init>
	uart3_init();
 800061c:	f000 f894 	bl	8000748 <uart3_init>
	time6_init();
 8000620:	f000 f878 	bl	8000714 <time6_init>
	print_SYSFREQ();
 8000624:	f000 f824 	bl	8000670 <print_SYSFREQ>

	// start with fresh status register
	TIM6 ->SR = 0;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <main+0x28>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
	// start timer
	HAL_TIM_Base_Start_IT(&htimer6);
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <main+0x2c>)
 8000630:	f000 fe52 	bl	80012d8 <HAL_TIM_Base_Start_IT>

	while(1);
 8000634:	e7fe      	b.n	8000634 <main+0x24>
 8000636:	bf00      	nop
 8000638:	40001000 	.word	0x40001000
 800063c:	200000e8 	.word	0x200000e8

08000640 <HAL_TIM_PeriodElapsedCallback>:
	return 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)some_data, strlen(some_data), HAL_MAX_DELAY);
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800064a:	f7ff fde1 	bl	8000210 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000656:	4904      	ldr	r1, [pc, #16]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800065a:	f001 f8de 	bl	800181a <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000
 800066c:	200000a4 	.word	0x200000a4

08000670 <print_SYSFREQ>:

void print_SYSFREQ()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	; 0x68
 8000674:	af00      	add	r7, sp, #0
	char data[100];
	memset(data,0,strlen(data));
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdc9 	bl	8000210 <strlen>
 800067e:	4602      	mov	r2, r0
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f002 f8b9 	bl	80027fc <memset>
	sprintf(data,"SYSCLK = %ld \r\n",HAL_RCC_GetPCLK1Freq());
 800068a:	f000 fdad 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
 800068e:	4602      	mov	r2, r0
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	490a      	ldr	r1, [pc, #40]	; (80006bc <print_SYSFREQ+0x4c>)
 8000694:	4618      	mov	r0, r3
 8000696:	f002 f8b9 	bl	800280c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fdb7 	bl	8000210 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	1d39      	adds	r1, r7, #4
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <print_SYSFREQ+0x50>)
 80006ae:	f001 f8b4 	bl	800181a <HAL_UART_Transmit>
}
 80006b2:	bf00      	nop
 80006b4:	3768      	adds	r7, #104	; 0x68
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08003100 	.word	0x08003100
 80006c0:	200000a4 	.word	0x200000a4

080006c4 <gpio_init>:

void gpio_init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <gpio_init+0x48>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <gpio_init+0x48>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <gpio_init+0x48>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_0;
 80006e6:	2301      	movs	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB,&ledgpio);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <gpio_init+0x4c>)
 80006f8:	f000 fbbc 	bl	8000e74 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80006fc:	2101      	movs	r1, #1
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <gpio_init+0x4c>)
 8000700:	f000 fd4c 	bl	800119c <HAL_GPIO_TogglePin>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40020400 	.word	0x40020400

08000714 <time6_init>:

void time6_init()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <time6_init+0x2c>)
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <time6_init+0x30>)
 800071c:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler=24;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <time6_init+0x2c>)
 8000720:	2218      	movs	r2, #24
 8000722:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = (6400-1);
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <time6_init+0x2c>)
 8000726:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800072a:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htimer6)!=HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <time6_init+0x2c>)
 800072e:	f000 fd83 	bl	8001238 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <time6_init+0x28>
	{
		Error_handler();
 8000738:	f000 f840 	bl	80007bc <Error_handler>
	}
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000e8 	.word	0x200000e8
 8000744:	40001000 	.word	0x40001000

08000748 <uart3_init>:


void uart3_init()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <uart3_init+0x68>)
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <uart3_init+0x6c>)
 8000752:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate=115200;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <uart3_init+0x68>)
 8000756:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075a:	605a      	str	r2, [r3, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <uart3_init+0x68>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl=UART_HWCONTROL_NONE;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <uart3_init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <uart3_init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity=UART_PARITY_NONE;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <uart3_init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
	huart3.Init.WordLength =UART_WORDLENGTH_8B;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <uart3_init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <uart3_init+0x68>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
	if(!(HAL_UART_Init(&huart3)==HAL_OK))
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <uart3_init+0x68>)
 8000782:	f000 fffd 	bl	8001780 <HAL_UART_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <uart3_init+0x48>
	{
		Error_handler();
 800078c:	f000 f816 	bl	80007bc <Error_handler>
	}
	char* data = "Uart Ready\r\n";
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <uart3_init+0x70>)
 8000792:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)data,strlen(data),10);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fd3b 	bl	8000210 <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	230a      	movs	r3, #10
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <uart3_init+0x68>)
 80007a4:	f001 f839 	bl	800181a <HAL_UART_Transmit>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000a4 	.word	0x200000a4
 80007b4:	40004800 	.word	0x40004800
 80007b8:	08003110 	.word	0x08003110

080007bc <Error_handler>:
}



void Error_handler()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

	char* err_data = "error";
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <Error_handler+0x28>)
 80007c4:	607b      	str	r3, [r7, #4]

	while(1)
	{
		HAL_UART_Transmit(&huart3,(uint8_t*)err_data,strlen(err_data),10);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fd22 	bl	8000210 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	230a      	movs	r3, #10
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <Error_handler+0x2c>)
 80007d6:	f001 f820 	bl	800181a <HAL_UART_Transmit>
		HAL_Delay(1000);
 80007da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007de:	f000 f975 	bl	8000acc <HAL_Delay>
		HAL_UART_Transmit(&huart3,(uint8_t*)err_data,strlen(err_data),10);
 80007e2:	e7f0      	b.n	80007c6 <Error_handler+0xa>
 80007e4:	08003120 	.word	0x08003120
 80007e8:	200000a4 	.word	0x200000a4

080007ec <HAL_MspInit>:
 *      Author: sscl
 */
#include "main.h"

void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 fa5f 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_MspInit+0x40>)
 80007f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <HAL_MspInit+0x40>)
 80007fc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000800:	6253      	str	r3, [r2, #36]	; 0x24
	// cortex manual-> system control block
	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	f06f 000b 	mvn.w	r0, #11
 800080a:	f000 fa5e 	bl	8000cca <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	f06f 000a 	mvn.w	r0, #10
 8000816:	f000 fa58 	bl	8000cca <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	f06f 0009 	mvn.w	r0, #9
 8000822:	f000 fa52 	bl	8000cca <HAL_NVIC_SetPriority>
	//void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART3_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <HAL_UART_MspInit+0x8c>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <HAL_UART_MspInit+0x8c>)
 8000842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_UART_MspInit+0x8c>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_UART_MspInit+0x8c>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x8c>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0x8c>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_8;
 8000870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000874:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART3; //UART2_TX
 8000882:	2307      	movs	r3, #7
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOD,&gpio_uart);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <HAL_UART_MspInit+0x90>)
 800088e:	f000 faf1 	bl	8000e74 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_9; //UART2_RX
 8000892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000896:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOD,&gpio_uart);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <HAL_UART_MspInit+0x90>)
 80008a0:	f000 fae8 	bl	8000e74 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008a4:	2027      	movs	r0, #39	; 0x27
 80008a6:	f000 fa2c 	bl	8000d02 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART3_IRQn,15,0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	2027      	movs	r0, #39	; 0x27
 80008b0:	f000 fa0b 	bl	8000cca <HAL_NVIC_SetPriority>
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020c00 	.word	0x40020c00

080008c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008e8:	2036      	movs	r0, #54	; 0x36
 80008ea:	f000 fa0a 	bl	8000d02 <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	2036      	movs	r0, #54	; 0x36
 80008f4:	f000 f9e9 	bl	8000cca <HAL_NVIC_SetPriority>

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800

08000904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800090c:	4a14      	ldr	r2, [pc, #80]	; (8000960 <_sbrk+0x5c>)
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <_sbrk+0x60>)
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <_sbrk+0x64>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <_sbrk+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	429a      	cmp	r2, r3
 8000932:	d207      	bcs.n	8000944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000934:	f001 ff38 	bl	80027a8 <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	220c      	movs	r2, #12
 800093c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000942:	e009      	b.n	8000958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <_sbrk+0x64>)
 8000954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20020000 	.word	0x20020000
 8000964:	00000400 	.word	0x00000400
 8000968:	20000130 	.word	0x20000130
 800096c:	20000148 	.word	0x20000148

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009be:	f7ff ffd7 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f001 fef7 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fe23 	bl	8000610 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80009d8:	08003174 	.word	0x08003174
  ldr r2, =_sbss
 80009dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80009e0:	20000148 	.word	0x20000148

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_Init+0x40>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_Init+0x40>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x40>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f94f 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fee6 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f967 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a68:	f000 f92f 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018
 8000a84:	20000020 	.word	0x20000020
 8000a88:	2000001c 	.word	0x2000001c

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000020 	.word	0x20000020
 8000ab0:	20000134 	.word	0x20000134

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000134 	.word	0x20000134

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff ffee 	bl	8000ab4 <HAL_GetTick>
 8000ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Delay+0x44>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af2:	bf00      	nop
 8000af4:	f7ff ffde 	bl	8000ab4 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
  {
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000020 	.word	0x20000020

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff29 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff3e 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff8e 	bl	8000c08 <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff31 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffa2 	bl	8000c70 <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d3a:	f000 f802 	bl	8000d42 <HAL_SYSTICK_Callback>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d5e:	f7ff fea9 	bl	8000ab4 <HAL_GetTick>
 8000d62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d008      	beq.n	8000d82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e052      	b.n	8000e28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0216 	bic.w	r2, r2, #22
 8000d90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000da0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <HAL_DMA_Abort+0x62>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0208 	bic.w	r2, r2, #8
 8000dc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dd2:	e013      	b.n	8000dfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dd4:	f7ff fe6e 	bl	8000ab4 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d90c      	bls.n	8000dfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2220      	movs	r2, #32
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e015      	b.n	8000e28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1e4      	bne.n	8000dd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0e:	223f      	movs	r2, #63	; 0x3f
 8000e10:	409a      	lsls	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d004      	beq.n	8000e4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00c      	b.n	8000e68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2205      	movs	r2, #5
 8000e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0201 	bic.w	r2, r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e165      	b.n	800115c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8154 	bne.w	8001156 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d130      	bne.n	8000f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	f003 0201 	and.w	r2, r3, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d017      	beq.n	8000f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d123      	bne.n	8000fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0203 	and.w	r2, r3, #3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80ae 	beq.w	8001156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a5c      	ldr	r2, [pc, #368]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <HAL_GPIO_Init+0x300>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	4a58      	ldr	r2, [pc, #352]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4f      	ldr	r2, [pc, #316]	; (800117c <HAL_GPIO_Init+0x308>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x21a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_GPIO_Init+0x30c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x216>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4d      	ldr	r2, [pc, #308]	; (8001184 <HAL_GPIO_Init+0x310>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x212>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_GPIO_Init+0x314>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x20e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4b      	ldr	r2, [pc, #300]	; (800118c <HAL_GPIO_Init+0x318>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x20a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <HAL_GPIO_Init+0x31c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x206>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a49      	ldr	r2, [pc, #292]	; (8001194 <HAL_GPIO_Init+0x320>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x202>
 8001072:	2306      	movs	r3, #6
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x21c>
 8001076:	2307      	movs	r3, #7
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x21c>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x21c>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x21c>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x21c>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x21c>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x21c>
 800108e:	2300      	movs	r3, #0
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a0:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_GPIO_Init+0x324>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a31      	ldr	r2, [pc, #196]	; (8001198 <HAL_GPIO_Init+0x324>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_GPIO_Init+0x324>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <HAL_GPIO_Init+0x324>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_GPIO_Init+0x324>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	f67f ae96 	bls.w	8000e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40013800 	.word	0x40013800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43d9      	mvns	r1, r3
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	400b      	ands	r3, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000018 	.word	0x20000018

080011e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011ec:	f7ff fff0 	bl	80011d0 <HAL_RCC_GetHCLKFreq>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	0a9b      	lsrs	r3, r3, #10
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	4903      	ldr	r1, [pc, #12]	; (800120c <HAL_RCC_GetPCLK1Freq+0x24>)
 80011fe:	5ccb      	ldrb	r3, [r1, r3]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	08003128 	.word	0x08003128

08001210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001214:	f7ff ffdc 	bl	80011d0 <HAL_RCC_GetHCLKFreq>
 8001218:	4602      	mov	r2, r0
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	0b5b      	lsrs	r3, r3, #13
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	4903      	ldr	r1, [pc, #12]	; (8001234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001226:	5ccb      	ldrb	r3, [r1, r3]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	08003128 	.word	0x08003128

08001238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e041      	b.n	80012ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fb30 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3304      	adds	r3, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f000 f9ce 	bl	8001618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d001      	beq.n	80012f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e04e      	b.n	800138e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a23      	ldr	r2, [pc, #140]	; (800139c <HAL_TIM_Base_Start_IT+0xc4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d022      	beq.n	8001358 <HAL_TIM_Base_Start_IT+0x80>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131a:	d01d      	beq.n	8001358 <HAL_TIM_Base_Start_IT+0x80>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d018      	beq.n	8001358 <HAL_TIM_Base_Start_IT+0x80>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_TIM_Base_Start_IT+0x80>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00e      	beq.n	8001358 <HAL_TIM_Base_Start_IT+0x80>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <HAL_TIM_Base_Start_IT+0xd4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d009      	beq.n	8001358 <HAL_TIM_Base_Start_IT+0x80>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d004      	beq.n	8001358 <HAL_TIM_Base_Start_IT+0x80>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d111      	bne.n	800137c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b06      	cmp	r3, #6
 8001368:	d010      	beq.n	800138c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800137a:	e007      	b.n	800138c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40010000 	.word	0x40010000
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40000800 	.word	0x40000800
 80013a8:	40000c00 	.word	0x40000c00
 80013ac:	40010400 	.word	0x40010400
 80013b0:	40014000 	.word	0x40014000
 80013b4:	40001800 	.word	0x40001800

080013b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d122      	bne.n	8001414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d11b      	bne.n	8001414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f06f 0202 	mvn.w	r2, #2
 80013e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f8ee 	bl	80015dc <HAL_TIM_IC_CaptureCallback>
 8001400:	e005      	b.n	800140e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8e0 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f8f1 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	2b04      	cmp	r3, #4
 8001420:	d122      	bne.n	8001468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b04      	cmp	r3, #4
 800142e:	d11b      	bne.n	8001468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 0204 	mvn.w	r2, #4
 8001438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2202      	movs	r2, #2
 800143e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f8c4 	bl	80015dc <HAL_TIM_IC_CaptureCallback>
 8001454:	e005      	b.n	8001462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8b6 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f8c7 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b08      	cmp	r3, #8
 8001474:	d122      	bne.n	80014bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b08      	cmp	r3, #8
 8001482:	d11b      	bne.n	80014bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0208 	mvn.w	r2, #8
 800148c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2204      	movs	r2, #4
 8001492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f89a 	bl	80015dc <HAL_TIM_IC_CaptureCallback>
 80014a8:	e005      	b.n	80014b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f88c 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f89d 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d122      	bne.n	8001510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b10      	cmp	r3, #16
 80014d6:	d11b      	bne.n	8001510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0210 	mvn.w	r2, #16
 80014e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2208      	movs	r2, #8
 80014e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f870 	bl	80015dc <HAL_TIM_IC_CaptureCallback>
 80014fc:	e005      	b.n	800150a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f862 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f873 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b01      	cmp	r3, #1
 800151c:	d10e      	bne.n	800153c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f06f 0201 	mvn.w	r2, #1
 8001534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff f882 	bl	8000640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001546:	2b80      	cmp	r3, #128	; 0x80
 8001548:	d10e      	bne.n	8001568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b80      	cmp	r3, #128	; 0x80
 8001556:	d107      	bne.n	8001568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f902 	bl	800176c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001572:	2b40      	cmp	r3, #64	; 0x40
 8001574:	d10e      	bne.n	8001594 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001580:	2b40      	cmp	r3, #64	; 0x40
 8001582:	d107      	bne.n	8001594 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800158c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f838 	bl	8001604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d10e      	bne.n	80015c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d107      	bne.n	80015c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f06f 0220 	mvn.w	r2, #32
 80015b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8cc 	bl	8001758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a40      	ldr	r2, [pc, #256]	; (800172c <TIM_Base_SetConfig+0x114>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <TIM_Base_SetConfig+0x40>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001636:	d00f      	beq.n	8001658 <TIM_Base_SetConfig+0x40>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <TIM_Base_SetConfig+0x118>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00b      	beq.n	8001658 <TIM_Base_SetConfig+0x40>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3c      	ldr	r2, [pc, #240]	; (8001734 <TIM_Base_SetConfig+0x11c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <TIM_Base_SetConfig+0x40>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <TIM_Base_SetConfig+0x120>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d003      	beq.n	8001658 <TIM_Base_SetConfig+0x40>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3a      	ldr	r2, [pc, #232]	; (800173c <TIM_Base_SetConfig+0x124>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d108      	bne.n	800166a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a2f      	ldr	r2, [pc, #188]	; (800172c <TIM_Base_SetConfig+0x114>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001678:	d027      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a2c      	ldr	r2, [pc, #176]	; (8001730 <TIM_Base_SetConfig+0x118>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d023      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <TIM_Base_SetConfig+0x11c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <TIM_Base_SetConfig+0x120>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01b      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a29      	ldr	r2, [pc, #164]	; (800173c <TIM_Base_SetConfig+0x124>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d017      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <TIM_Base_SetConfig+0x128>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <TIM_Base_SetConfig+0x12c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00f      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <TIM_Base_SetConfig+0x130>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00b      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a25      	ldr	r2, [pc, #148]	; (800174c <TIM_Base_SetConfig+0x134>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a24      	ldr	r2, [pc, #144]	; (8001750 <TIM_Base_SetConfig+0x138>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d003      	beq.n	80016ca <TIM_Base_SetConfig+0xb2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a23      	ldr	r2, [pc, #140]	; (8001754 <TIM_Base_SetConfig+0x13c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d108      	bne.n	80016dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <TIM_Base_SetConfig+0x114>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d003      	beq.n	8001710 <TIM_Base_SetConfig+0xf8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <TIM_Base_SetConfig+0x124>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d103      	bne.n	8001718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	615a      	str	r2, [r3, #20]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40010000 	.word	0x40010000
 8001730:	40000400 	.word	0x40000400
 8001734:	40000800 	.word	0x40000800
 8001738:	40000c00 	.word	0x40000c00
 800173c:	40010400 	.word	0x40010400
 8001740:	40014000 	.word	0x40014000
 8001744:	40014400 	.word	0x40014400
 8001748:	40014800 	.word	0x40014800
 800174c:	40001800 	.word	0x40001800
 8001750:	40001c00 	.word	0x40001c00
 8001754:	40002000 	.word	0x40002000

08001758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e03f      	b.n	8001812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff f842 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fd7b 	bl	80022c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b08a      	sub	sp, #40	; 0x28
 800181e:	af02      	add	r7, sp, #8
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4613      	mov	r3, r2
 8001828:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b20      	cmp	r3, #32
 8001838:	d17c      	bne.n	8001934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <HAL_UART_Transmit+0x2c>
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e075      	b.n	8001936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_UART_Transmit+0x3e>
 8001854:	2302      	movs	r3, #2
 8001856:	e06e      	b.n	8001936 <HAL_UART_Transmit+0x11c>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2221      	movs	r2, #33	; 0x21
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800186e:	f7ff f921 	bl	8000ab4 <HAL_GetTick>
 8001872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	88fa      	ldrh	r2, [r7, #6]
 8001878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001888:	d108      	bne.n	800189c <HAL_UART_Transmit+0x82>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	e003      	b.n	80018a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80018ac:	e02a      	b.n	8001904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 faf9 	bl	8001eb0 <UART_WaitOnFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e036      	b.n	8001936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10b      	bne.n	80018e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	3302      	adds	r3, #2
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	e007      	b.n	80018f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1cf      	bne.n	80018ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2200      	movs	r2, #0
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fac9 	bl	8001eb0 <UART_WaitOnFlagUntilTimeout>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e006      	b.n	8001936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3720      	adds	r7, #32
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0ba      	sub	sp, #232	; 0xe8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800197e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10f      	bne.n	80019a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_UART_IRQHandler+0x66>
 8001992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fbd3 	bl	800214a <UART_Receive_IT>
      return;
 80019a4:	e256      	b.n	8001e54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80019a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80de 	beq.w	8001b6c <HAL_UART_IRQHandler+0x22c>
 80019b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d106      	bne.n	80019ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80d1 	beq.w	8001b6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_UART_IRQHandler+0xae>
 80019d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f043 0201 	orr.w	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_UART_IRQHandler+0xd2>
 80019fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_UART_IRQHandler+0xf6>
 8001a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f043 0204 	orr.w	r2, r3, #4
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d011      	beq.n	8001a66 <HAL_UART_IRQHandler+0x126>
 8001a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f043 0208 	orr.w	r2, r3, #8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 81ed 	beq.w	8001e4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_UART_IRQHandler+0x14e>
 8001a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb5e 	bl	800214a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a98:	2b40      	cmp	r3, #64	; 0x40
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d103      	bne.n	8001aba <HAL_UART_IRQHandler+0x17a>
 8001ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d04f      	beq.n	8001b5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fa66 	bl	8001f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d141      	bne.n	8001b52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3314      	adds	r3, #20
 8001ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001adc:	e853 3f00 	ldrex	r3, [r3]
 8001ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3314      	adds	r3, #20
 8001af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001afa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b0a:	e841 2300 	strex	r3, r2, [r1]
 8001b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1d9      	bne.n	8001ace <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d013      	beq.n	8001b4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	4a7d      	ldr	r2, [pc, #500]	; (8001d1c <HAL_UART_IRQHandler+0x3dc>)
 8001b28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f97e 	bl	8000e30 <HAL_DMA_Abort_IT>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d016      	beq.n	8001b68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b44:	4610      	mov	r0, r2
 8001b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b48:	e00e      	b.n	8001b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f99a 	bl	8001e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b50:	e00a      	b.n	8001b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f996 	bl	8001e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b58:	e006      	b.n	8001b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f992 	bl	8001e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001b66:	e170      	b.n	8001e4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b68:	bf00      	nop
    return;
 8001b6a:	e16e      	b.n	8001e4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	f040 814a 	bne.w	8001e0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8143 	beq.w	8001e0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 813c 	beq.w	8001e0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	f040 80b4 	bne.w	8001d20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8140 	beq.w	8001e4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	f080 8139 	bcs.w	8001e4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001be2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bee:	f000 8088 	beq.w	8001d02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c00:	e853 3f00 	ldrex	r3, [r3]
 8001c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c2e:	e841 2300 	strex	r3, r2, [r1]
 8001c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1d9      	bne.n	8001bf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3314      	adds	r3, #20
 8001c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c48:	e853 3f00 	ldrex	r3, [r3]
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3314      	adds	r3, #20
 8001c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001c66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c6e:	e841 2300 	strex	r3, r2, [r1]
 8001c72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e1      	bne.n	8001c3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3314      	adds	r3, #20
 8001c80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c84:	e853 3f00 	ldrex	r3, [r3]
 8001c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3314      	adds	r3, #20
 8001c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001c9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ca6:	e841 2300 	strex	r3, r2, [r1]
 8001caa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e3      	bne.n	8001c7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	330c      	adds	r3, #12
 8001cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cca:	e853 3f00 	ldrex	r3, [r3]
 8001cce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd2:	f023 0310 	bic.w	r3, r3, #16
 8001cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	330c      	adds	r3, #12
 8001ce0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001ce4:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ce6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cec:	e841 2300 	strex	r3, r2, [r1]
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e3      	bne.n	8001cc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f827 	bl	8000d50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8c0 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d18:	e099      	b.n	8001e4e <HAL_UART_IRQHandler+0x50e>
 8001d1a:	bf00      	nop
 8001d1c:	08002053 	.word	0x08002053
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 808b 	beq.w	8001e52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8086 	beq.w	8001e52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d50:	e853 3f00 	ldrex	r3, [r3]
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	330c      	adds	r3, #12
 8001d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001d6a:	647a      	str	r2, [r7, #68]	; 0x44
 8001d6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d72:	e841 2300 	strex	r3, r2, [r1]
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1e3      	bne.n	8001d46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3314      	adds	r3, #20
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	e853 3f00 	ldrex	r3, [r3]
 8001d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3314      	adds	r3, #20
 8001d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001da2:	633a      	str	r2, [r7, #48]	; 0x30
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001daa:	e841 2300 	strex	r3, r2, [r1]
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e3      	bne.n	8001d7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	e853 3f00 	ldrex	r3, [r3]
 8001dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0310 	bic.w	r3, r3, #16
 8001dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	330c      	adds	r3, #12
 8001de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001de8:	61fa      	str	r2, [r7, #28]
 8001dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dec:	69b9      	ldr	r1, [r7, #24]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	e841 2300 	strex	r3, r2, [r1]
 8001df4:	617b      	str	r3, [r7, #20]
   return(result);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e3      	bne.n	8001dc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f848 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e08:	e023      	b.n	8001e52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_UART_IRQHandler+0x4ea>
 8001e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f929 	bl	800207a <UART_Transmit_IT>
    return;
 8001e28:	e014      	b.n	8001e54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00e      	beq.n	8001e54 <HAL_UART_IRQHandler+0x514>
 8001e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f969 	bl	800211a <UART_EndTransmit_IT>
    return;
 8001e48:	e004      	b.n	8001e54 <HAL_UART_IRQHandler+0x514>
    return;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <HAL_UART_IRQHandler+0x514>
      return;
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <HAL_UART_IRQHandler+0x514>
      return;
 8001e52:	bf00      	nop
  }
}
 8001e54:	37e8      	adds	r7, #232	; 0xe8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop

08001e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b090      	sub	sp, #64	; 0x40
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec0:	e050      	b.n	8001f64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec8:	d04c      	beq.n	8001f64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ed0:	f7fe fdf0 	bl	8000ab4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d241      	bcs.n	8001f64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	e853 3f00 	ldrex	r3, [r3]
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	330c      	adds	r3, #12
 8001efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f00:	637a      	str	r2, [r7, #52]	; 0x34
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f08:	e841 2300 	strex	r3, r2, [r1]
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1e5      	bne.n	8001ee0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3314      	adds	r3, #20
 8001f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	e853 3f00 	ldrex	r3, [r3]
 8001f22:	613b      	str	r3, [r7, #16]
   return(result);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3314      	adds	r3, #20
 8001f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f34:	623a      	str	r2, [r7, #32]
 8001f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f38:	69f9      	ldr	r1, [r7, #28]
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	e841 2300 	strex	r3, r2, [r1]
 8001f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e5      	bne.n	8001f14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e00f      	b.n	8001f84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d09f      	beq.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3740      	adds	r7, #64	; 0x40
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b095      	sub	sp, #84	; 0x54
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9e:	e853 3f00 	ldrex	r3, [r3]
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb4:	643a      	str	r2, [r7, #64]	; 0x40
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fbc:	e841 2300 	strex	r3, r2, [r1]
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e5      	bne.n	8001f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3314      	adds	r3, #20
 8001fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	e853 3f00 	ldrex	r3, [r3]
 8001fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3314      	adds	r3, #20
 8001fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff0:	e841 2300 	strex	r3, r2, [r1]
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e5      	bne.n	8001fc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	2b01      	cmp	r3, #1
 8002002:	d119      	bne.n	8002038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	330c      	adds	r3, #12
 800200a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	e853 3f00 	ldrex	r3, [r3]
 8002012:	60bb      	str	r3, [r7, #8]
   return(result);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f023 0310 	bic.w	r3, r3, #16
 800201a:	647b      	str	r3, [r7, #68]	; 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	330c      	adds	r3, #12
 8002022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002024:	61ba      	str	r2, [r7, #24]
 8002026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002028:	6979      	ldr	r1, [r7, #20]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	e841 2300 	strex	r3, r2, [r1]
 8002030:	613b      	str	r3, [r7, #16]
   return(result);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e5      	bne.n	8002004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002046:	bf00      	nop
 8002048:	3754      	adds	r7, #84	; 0x54
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff ff09 	bl	8001e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b21      	cmp	r3, #33	; 0x21
 800208c:	d13e      	bne.n	800210c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002096:	d114      	bne.n	80020c2 <UART_Transmit_IT+0x48>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d110      	bne.n	80020c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	1c9a      	adds	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	621a      	str	r2, [r3, #32]
 80020c0:	e008      	b.n	80020d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6211      	str	r1, [r2, #32]
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29b      	uxth	r3, r3
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4619      	mov	r1, r3
 80020e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10f      	bne.n	8002108 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fe8e 	bl	8001e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b08c      	sub	sp, #48	; 0x30
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b22      	cmp	r3, #34	; 0x22
 800215c:	f040 80ab 	bne.w	80022b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002168:	d117      	bne.n	800219a <UART_Receive_IT+0x50>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d113      	bne.n	800219a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002188:	b29a      	uxth	r2, r3
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	1c9a      	adds	r2, r3, #2
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
 8002198:	e026      	b.n	80021e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ac:	d007      	beq.n	80021be <UART_Receive_IT+0x74>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <UART_Receive_IT+0x82>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e008      	b.n	80021de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4619      	mov	r1, r3
 80021f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d15a      	bne.n	80022b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0220 	bic.w	r2, r2, #32
 800220a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800221a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	2b01      	cmp	r3, #1
 800223a:	d135      	bne.n	80022a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	613b      	str	r3, [r7, #16]
   return(result);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f023 0310 	bic.w	r3, r3, #16
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	330c      	adds	r3, #12
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	623a      	str	r2, [r7, #32]
 8002264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002266:	69f9      	ldr	r1, [r7, #28]
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	e841 2300 	strex	r3, r2, [r1]
 800226e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e5      	bne.n	8002242 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b10      	cmp	r3, #16
 8002282:	d10a      	bne.n	800229a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fdf9 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
 80022a6:	e002      	b.n	80022ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff fde1 	bl	8001e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e002      	b.n	80022b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3730      	adds	r7, #48	; 0x30
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b0c0      	sub	sp, #256	; 0x100
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022dc:	68d9      	ldr	r1, [r3, #12]
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	ea40 0301 	orr.w	r3, r0, r1
 80022e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	431a      	orrs	r2, r3
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002318:	f021 010c 	bic.w	r1, r1, #12
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002326:	430b      	orrs	r3, r1
 8002328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800232a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233a:	6999      	ldr	r1, [r3, #24]
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	ea40 0301 	orr.w	r3, r0, r1
 8002346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b8f      	ldr	r3, [pc, #572]	; (800258c <UART_SetConfig+0x2cc>)
 8002350:	429a      	cmp	r2, r3
 8002352:	d005      	beq.n	8002360 <UART_SetConfig+0xa0>
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <UART_SetConfig+0x2d0>)
 800235c:	429a      	cmp	r2, r3
 800235e:	d104      	bne.n	800236a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002360:	f7fe ff56 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 8002364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002368:	e003      	b.n	8002372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800236a:	f7fe ff3d 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
 800236e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237c:	f040 810c 	bne.w	8002598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002384:	2200      	movs	r2, #0
 8002386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800238a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800238e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002392:	4622      	mov	r2, r4
 8002394:	462b      	mov	r3, r5
 8002396:	1891      	adds	r1, r2, r2
 8002398:	65b9      	str	r1, [r7, #88]	; 0x58
 800239a:	415b      	adcs	r3, r3
 800239c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800239e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023a2:	4621      	mov	r1, r4
 80023a4:	eb12 0801 	adds.w	r8, r2, r1
 80023a8:	4629      	mov	r1, r5
 80023aa:	eb43 0901 	adc.w	r9, r3, r1
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023c2:	4690      	mov	r8, r2
 80023c4:	4699      	mov	r9, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	eb18 0303 	adds.w	r3, r8, r3
 80023cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023d0:	462b      	mov	r3, r5
 80023d2:	eb49 0303 	adc.w	r3, r9, r3
 80023d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023ee:	460b      	mov	r3, r1
 80023f0:	18db      	adds	r3, r3, r3
 80023f2:	653b      	str	r3, [r7, #80]	; 0x50
 80023f4:	4613      	mov	r3, r2
 80023f6:	eb42 0303 	adc.w	r3, r2, r3
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
 80023fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002404:	f7fd ff5c 	bl	80002c0 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4b61      	ldr	r3, [pc, #388]	; (8002594 <UART_SetConfig+0x2d4>)
 800240e:	fba3 2302 	umull	r2, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	011c      	lsls	r4, r3, #4
 8002416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002428:	4642      	mov	r2, r8
 800242a:	464b      	mov	r3, r9
 800242c:	1891      	adds	r1, r2, r2
 800242e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002430:	415b      	adcs	r3, r3
 8002432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002438:	4641      	mov	r1, r8
 800243a:	eb12 0a01 	adds.w	sl, r2, r1
 800243e:	4649      	mov	r1, r9
 8002440:	eb43 0b01 	adc.w	fp, r3, r1
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002458:	4692      	mov	sl, r2
 800245a:	469b      	mov	fp, r3
 800245c:	4643      	mov	r3, r8
 800245e:	eb1a 0303 	adds.w	r3, sl, r3
 8002462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002466:	464b      	mov	r3, r9
 8002468:	eb4b 0303 	adc.w	r3, fp, r3
 800246c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800247c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002484:	460b      	mov	r3, r1
 8002486:	18db      	adds	r3, r3, r3
 8002488:	643b      	str	r3, [r7, #64]	; 0x40
 800248a:	4613      	mov	r3, r2
 800248c:	eb42 0303 	adc.w	r3, r2, r3
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
 8002492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800249a:	f7fd ff11 	bl	80002c0 <__aeabi_uldivmod>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <UART_SetConfig+0x2d4>)
 80024a6:	fba3 2301 	umull	r2, r3, r3, r1
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2264      	movs	r2, #100	; 0x64
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <UART_SetConfig+0x2d4>)
 80024bc:	fba3 2302 	umull	r2, r3, r3, r2
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024c8:	441c      	add	r4, r3
 80024ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ce:	2200      	movs	r2, #0
 80024d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024dc:	4642      	mov	r2, r8
 80024de:	464b      	mov	r3, r9
 80024e0:	1891      	adds	r1, r2, r2
 80024e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024e4:	415b      	adcs	r3, r3
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024ec:	4641      	mov	r1, r8
 80024ee:	1851      	adds	r1, r2, r1
 80024f0:	6339      	str	r1, [r7, #48]	; 0x30
 80024f2:	4649      	mov	r1, r9
 80024f4:	414b      	adcs	r3, r1
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002504:	4659      	mov	r1, fp
 8002506:	00cb      	lsls	r3, r1, #3
 8002508:	4651      	mov	r1, sl
 800250a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250e:	4651      	mov	r1, sl
 8002510:	00ca      	lsls	r2, r1, #3
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	4603      	mov	r3, r0
 8002518:	4642      	mov	r2, r8
 800251a:	189b      	adds	r3, r3, r2
 800251c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002520:	464b      	mov	r3, r9
 8002522:	460a      	mov	r2, r1
 8002524:	eb42 0303 	adc.w	r3, r2, r3
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800253c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002540:	460b      	mov	r3, r1
 8002542:	18db      	adds	r3, r3, r3
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 8002546:	4613      	mov	r3, r2
 8002548:	eb42 0303 	adc.w	r3, r2, r3
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002556:	f7fd feb3 	bl	80002c0 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <UART_SetConfig+0x2d4>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	3332      	adds	r3, #50	; 0x32
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <UART_SetConfig+0x2d4>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	f003 0207 	and.w	r2, r3, #7
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4422      	add	r2, r4
 8002586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002588:	e105      	b.n	8002796 <UART_SetConfig+0x4d6>
 800258a:	bf00      	nop
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800259c:	2200      	movs	r2, #0
 800259e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025aa:	4642      	mov	r2, r8
 80025ac:	464b      	mov	r3, r9
 80025ae:	1891      	adds	r1, r2, r2
 80025b0:	6239      	str	r1, [r7, #32]
 80025b2:	415b      	adcs	r3, r3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ba:	4641      	mov	r1, r8
 80025bc:	1854      	adds	r4, r2, r1
 80025be:	4649      	mov	r1, r9
 80025c0:	eb43 0501 	adc.w	r5, r3, r1
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	00eb      	lsls	r3, r5, #3
 80025ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d2:	00e2      	lsls	r2, r4, #3
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	4643      	mov	r3, r8
 80025da:	18e3      	adds	r3, r4, r3
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025e0:	464b      	mov	r3, r9
 80025e2:	eb45 0303 	adc.w	r3, r5, r3
 80025e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002606:	4629      	mov	r1, r5
 8002608:	008b      	lsls	r3, r1, #2
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002610:	4621      	mov	r1, r4
 8002612:	008a      	lsls	r2, r1, #2
 8002614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002618:	f7fd fe52 	bl	80002c0 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4b60      	ldr	r3, [pc, #384]	; (80027a4 <UART_SetConfig+0x4e4>)
 8002622:	fba3 2302 	umull	r2, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	011c      	lsls	r4, r3, #4
 800262a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800263c:	4642      	mov	r2, r8
 800263e:	464b      	mov	r3, r9
 8002640:	1891      	adds	r1, r2, r2
 8002642:	61b9      	str	r1, [r7, #24]
 8002644:	415b      	adcs	r3, r3
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	4641      	mov	r1, r8
 800264e:	1851      	adds	r1, r2, r1
 8002650:	6139      	str	r1, [r7, #16]
 8002652:	4649      	mov	r1, r9
 8002654:	414b      	adcs	r3, r1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002664:	4659      	mov	r1, fp
 8002666:	00cb      	lsls	r3, r1, #3
 8002668:	4651      	mov	r1, sl
 800266a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800266e:	4651      	mov	r1, sl
 8002670:	00ca      	lsls	r2, r1, #3
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	4603      	mov	r3, r0
 8002678:	4642      	mov	r2, r8
 800267a:	189b      	adds	r3, r3, r2
 800267c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002680:	464b      	mov	r3, r9
 8002682:	460a      	mov	r2, r1
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	67bb      	str	r3, [r7, #120]	; 0x78
 8002696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026a4:	4649      	mov	r1, r9
 80026a6:	008b      	lsls	r3, r1, #2
 80026a8:	4641      	mov	r1, r8
 80026aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ae:	4641      	mov	r1, r8
 80026b0:	008a      	lsls	r2, r1, #2
 80026b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026b6:	f7fd fe03 	bl	80002c0 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <UART_SetConfig+0x4e4>)
 80026c0:	fba3 1302 	umull	r1, r3, r3, r2
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	2164      	movs	r1, #100	; 0x64
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	3332      	adds	r3, #50	; 0x32
 80026d2:	4a34      	ldr	r2, [pc, #208]	; (80027a4 <UART_SetConfig+0x4e4>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026de:	441c      	add	r4, r3
 80026e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e4:	2200      	movs	r2, #0
 80026e6:	673b      	str	r3, [r7, #112]	; 0x70
 80026e8:	677a      	str	r2, [r7, #116]	; 0x74
 80026ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026ee:	4642      	mov	r2, r8
 80026f0:	464b      	mov	r3, r9
 80026f2:	1891      	adds	r1, r2, r2
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	415b      	adcs	r3, r3
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026fe:	4641      	mov	r1, r8
 8002700:	1851      	adds	r1, r2, r1
 8002702:	6039      	str	r1, [r7, #0]
 8002704:	4649      	mov	r1, r9
 8002706:	414b      	adcs	r3, r1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002716:	4659      	mov	r1, fp
 8002718:	00cb      	lsls	r3, r1, #3
 800271a:	4651      	mov	r1, sl
 800271c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002720:	4651      	mov	r1, sl
 8002722:	00ca      	lsls	r2, r1, #3
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	4603      	mov	r3, r0
 800272a:	4642      	mov	r2, r8
 800272c:	189b      	adds	r3, r3, r2
 800272e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002730:	464b      	mov	r3, r9
 8002732:	460a      	mov	r2, r1
 8002734:	eb42 0303 	adc.w	r3, r2, r3
 8002738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	663b      	str	r3, [r7, #96]	; 0x60
 8002744:	667a      	str	r2, [r7, #100]	; 0x64
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002752:	4649      	mov	r1, r9
 8002754:	008b      	lsls	r3, r1, #2
 8002756:	4641      	mov	r1, r8
 8002758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800275c:	4641      	mov	r1, r8
 800275e:	008a      	lsls	r2, r1, #2
 8002760:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002764:	f7fd fdac 	bl	80002c0 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <UART_SetConfig+0x4e4>)
 800276e:	fba3 1302 	umull	r1, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2164      	movs	r1, #100	; 0x64
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	3332      	adds	r3, #50	; 0x32
 8002780:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <UART_SetConfig+0x4e4>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4422      	add	r2, r4
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	bf00      	nop
 8002798:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800279c:	46bd      	mov	sp, r7
 800279e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a2:	bf00      	nop
 80027a4:	51eb851f 	.word	0x51eb851f

080027a8 <__errno>:
 80027a8:	4b01      	ldr	r3, [pc, #4]	; (80027b0 <__errno+0x8>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000024 	.word	0x20000024

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	4d0d      	ldr	r5, [pc, #52]	; (80027ec <__libc_init_array+0x38>)
 80027b8:	4c0d      	ldr	r4, [pc, #52]	; (80027f0 <__libc_init_array+0x3c>)
 80027ba:	1b64      	subs	r4, r4, r5
 80027bc:	10a4      	asrs	r4, r4, #2
 80027be:	2600      	movs	r6, #0
 80027c0:	42a6      	cmp	r6, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	4d0b      	ldr	r5, [pc, #44]	; (80027f4 <__libc_init_array+0x40>)
 80027c6:	4c0c      	ldr	r4, [pc, #48]	; (80027f8 <__libc_init_array+0x44>)
 80027c8:	f000 fc8e 	bl	80030e8 <_init>
 80027cc:	1b64      	subs	r4, r4, r5
 80027ce:	10a4      	asrs	r4, r4, #2
 80027d0:	2600      	movs	r6, #0
 80027d2:	42a6      	cmp	r6, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027dc:	4798      	blx	r3
 80027de:	3601      	adds	r6, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e6:	4798      	blx	r3
 80027e8:	3601      	adds	r6, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	0800316c 	.word	0x0800316c
 80027f0:	0800316c 	.word	0x0800316c
 80027f4:	0800316c 	.word	0x0800316c
 80027f8:	08003170 	.word	0x08003170

080027fc <memset>:
 80027fc:	4402      	add	r2, r0
 80027fe:	4603      	mov	r3, r0
 8002800:	4293      	cmp	r3, r2
 8002802:	d100      	bne.n	8002806 <memset+0xa>
 8002804:	4770      	bx	lr
 8002806:	f803 1b01 	strb.w	r1, [r3], #1
 800280a:	e7f9      	b.n	8002800 <memset+0x4>

0800280c <siprintf>:
 800280c:	b40e      	push	{r1, r2, r3}
 800280e:	b500      	push	{lr}
 8002810:	b09c      	sub	sp, #112	; 0x70
 8002812:	ab1d      	add	r3, sp, #116	; 0x74
 8002814:	9002      	str	r0, [sp, #8]
 8002816:	9006      	str	r0, [sp, #24]
 8002818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800281c:	4809      	ldr	r0, [pc, #36]	; (8002844 <siprintf+0x38>)
 800281e:	9107      	str	r1, [sp, #28]
 8002820:	9104      	str	r1, [sp, #16]
 8002822:	4909      	ldr	r1, [pc, #36]	; (8002848 <siprintf+0x3c>)
 8002824:	f853 2b04 	ldr.w	r2, [r3], #4
 8002828:	9105      	str	r1, [sp, #20]
 800282a:	6800      	ldr	r0, [r0, #0]
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	a902      	add	r1, sp, #8
 8002830:	f000 f868 	bl	8002904 <_svfiprintf_r>
 8002834:	9b02      	ldr	r3, [sp, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	b01c      	add	sp, #112	; 0x70
 800283c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002840:	b003      	add	sp, #12
 8002842:	4770      	bx	lr
 8002844:	20000024 	.word	0x20000024
 8002848:	ffff0208 	.word	0xffff0208

0800284c <__ssputs_r>:
 800284c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002850:	688e      	ldr	r6, [r1, #8]
 8002852:	429e      	cmp	r6, r3
 8002854:	4682      	mov	sl, r0
 8002856:	460c      	mov	r4, r1
 8002858:	4690      	mov	r8, r2
 800285a:	461f      	mov	r7, r3
 800285c:	d838      	bhi.n	80028d0 <__ssputs_r+0x84>
 800285e:	898a      	ldrh	r2, [r1, #12]
 8002860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002864:	d032      	beq.n	80028cc <__ssputs_r+0x80>
 8002866:	6825      	ldr	r5, [r4, #0]
 8002868:	6909      	ldr	r1, [r1, #16]
 800286a:	eba5 0901 	sub.w	r9, r5, r1
 800286e:	6965      	ldr	r5, [r4, #20]
 8002870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002878:	3301      	adds	r3, #1
 800287a:	444b      	add	r3, r9
 800287c:	106d      	asrs	r5, r5, #1
 800287e:	429d      	cmp	r5, r3
 8002880:	bf38      	it	cc
 8002882:	461d      	movcc	r5, r3
 8002884:	0553      	lsls	r3, r2, #21
 8002886:	d531      	bpl.n	80028ec <__ssputs_r+0xa0>
 8002888:	4629      	mov	r1, r5
 800288a:	f000 fb63 	bl	8002f54 <_malloc_r>
 800288e:	4606      	mov	r6, r0
 8002890:	b950      	cbnz	r0, 80028a8 <__ssputs_r+0x5c>
 8002892:	230c      	movs	r3, #12
 8002894:	f8ca 3000 	str.w	r3, [sl]
 8002898:	89a3      	ldrh	r3, [r4, #12]
 800289a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289e:	81a3      	strh	r3, [r4, #12]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a8:	6921      	ldr	r1, [r4, #16]
 80028aa:	464a      	mov	r2, r9
 80028ac:	f000 fabe 	bl	8002e2c <memcpy>
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ba:	81a3      	strh	r3, [r4, #12]
 80028bc:	6126      	str	r6, [r4, #16]
 80028be:	6165      	str	r5, [r4, #20]
 80028c0:	444e      	add	r6, r9
 80028c2:	eba5 0509 	sub.w	r5, r5, r9
 80028c6:	6026      	str	r6, [r4, #0]
 80028c8:	60a5      	str	r5, [r4, #8]
 80028ca:	463e      	mov	r6, r7
 80028cc:	42be      	cmp	r6, r7
 80028ce:	d900      	bls.n	80028d2 <__ssputs_r+0x86>
 80028d0:	463e      	mov	r6, r7
 80028d2:	6820      	ldr	r0, [r4, #0]
 80028d4:	4632      	mov	r2, r6
 80028d6:	4641      	mov	r1, r8
 80028d8:	f000 fab6 	bl	8002e48 <memmove>
 80028dc:	68a3      	ldr	r3, [r4, #8]
 80028de:	1b9b      	subs	r3, r3, r6
 80028e0:	60a3      	str	r3, [r4, #8]
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	4433      	add	r3, r6
 80028e6:	6023      	str	r3, [r4, #0]
 80028e8:	2000      	movs	r0, #0
 80028ea:	e7db      	b.n	80028a4 <__ssputs_r+0x58>
 80028ec:	462a      	mov	r2, r5
 80028ee:	f000 fba5 	bl	800303c <_realloc_r>
 80028f2:	4606      	mov	r6, r0
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d1e1      	bne.n	80028bc <__ssputs_r+0x70>
 80028f8:	6921      	ldr	r1, [r4, #16]
 80028fa:	4650      	mov	r0, sl
 80028fc:	f000 fabe 	bl	8002e7c <_free_r>
 8002900:	e7c7      	b.n	8002892 <__ssputs_r+0x46>
	...

08002904 <_svfiprintf_r>:
 8002904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002908:	4698      	mov	r8, r3
 800290a:	898b      	ldrh	r3, [r1, #12]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	b09d      	sub	sp, #116	; 0x74
 8002910:	4607      	mov	r7, r0
 8002912:	460d      	mov	r5, r1
 8002914:	4614      	mov	r4, r2
 8002916:	d50e      	bpl.n	8002936 <_svfiprintf_r+0x32>
 8002918:	690b      	ldr	r3, [r1, #16]
 800291a:	b963      	cbnz	r3, 8002936 <_svfiprintf_r+0x32>
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	f000 fb19 	bl	8002f54 <_malloc_r>
 8002922:	6028      	str	r0, [r5, #0]
 8002924:	6128      	str	r0, [r5, #16]
 8002926:	b920      	cbnz	r0, 8002932 <_svfiprintf_r+0x2e>
 8002928:	230c      	movs	r3, #12
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002930:	e0d1      	b.n	8002ad6 <_svfiprintf_r+0x1d2>
 8002932:	2340      	movs	r3, #64	; 0x40
 8002934:	616b      	str	r3, [r5, #20]
 8002936:	2300      	movs	r3, #0
 8002938:	9309      	str	r3, [sp, #36]	; 0x24
 800293a:	2320      	movs	r3, #32
 800293c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002940:	f8cd 800c 	str.w	r8, [sp, #12]
 8002944:	2330      	movs	r3, #48	; 0x30
 8002946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002af0 <_svfiprintf_r+0x1ec>
 800294a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800294e:	f04f 0901 	mov.w	r9, #1
 8002952:	4623      	mov	r3, r4
 8002954:	469a      	mov	sl, r3
 8002956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800295a:	b10a      	cbz	r2, 8002960 <_svfiprintf_r+0x5c>
 800295c:	2a25      	cmp	r2, #37	; 0x25
 800295e:	d1f9      	bne.n	8002954 <_svfiprintf_r+0x50>
 8002960:	ebba 0b04 	subs.w	fp, sl, r4
 8002964:	d00b      	beq.n	800297e <_svfiprintf_r+0x7a>
 8002966:	465b      	mov	r3, fp
 8002968:	4622      	mov	r2, r4
 800296a:	4629      	mov	r1, r5
 800296c:	4638      	mov	r0, r7
 800296e:	f7ff ff6d 	bl	800284c <__ssputs_r>
 8002972:	3001      	adds	r0, #1
 8002974:	f000 80aa 	beq.w	8002acc <_svfiprintf_r+0x1c8>
 8002978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800297a:	445a      	add	r2, fp
 800297c:	9209      	str	r2, [sp, #36]	; 0x24
 800297e:	f89a 3000 	ldrb.w	r3, [sl]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80a2 	beq.w	8002acc <_svfiprintf_r+0x1c8>
 8002988:	2300      	movs	r3, #0
 800298a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800298e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002992:	f10a 0a01 	add.w	sl, sl, #1
 8002996:	9304      	str	r3, [sp, #16]
 8002998:	9307      	str	r3, [sp, #28]
 800299a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800299e:	931a      	str	r3, [sp, #104]	; 0x68
 80029a0:	4654      	mov	r4, sl
 80029a2:	2205      	movs	r2, #5
 80029a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a8:	4851      	ldr	r0, [pc, #324]	; (8002af0 <_svfiprintf_r+0x1ec>)
 80029aa:	f7fd fc39 	bl	8000220 <memchr>
 80029ae:	9a04      	ldr	r2, [sp, #16]
 80029b0:	b9d8      	cbnz	r0, 80029ea <_svfiprintf_r+0xe6>
 80029b2:	06d0      	lsls	r0, r2, #27
 80029b4:	bf44      	itt	mi
 80029b6:	2320      	movmi	r3, #32
 80029b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029bc:	0711      	lsls	r1, r2, #28
 80029be:	bf44      	itt	mi
 80029c0:	232b      	movmi	r3, #43	; 0x2b
 80029c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029c6:	f89a 3000 	ldrb.w	r3, [sl]
 80029ca:	2b2a      	cmp	r3, #42	; 0x2a
 80029cc:	d015      	beq.n	80029fa <_svfiprintf_r+0xf6>
 80029ce:	9a07      	ldr	r2, [sp, #28]
 80029d0:	4654      	mov	r4, sl
 80029d2:	2000      	movs	r0, #0
 80029d4:	f04f 0c0a 	mov.w	ip, #10
 80029d8:	4621      	mov	r1, r4
 80029da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029de:	3b30      	subs	r3, #48	; 0x30
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	d94e      	bls.n	8002a82 <_svfiprintf_r+0x17e>
 80029e4:	b1b0      	cbz	r0, 8002a14 <_svfiprintf_r+0x110>
 80029e6:	9207      	str	r2, [sp, #28]
 80029e8:	e014      	b.n	8002a14 <_svfiprintf_r+0x110>
 80029ea:	eba0 0308 	sub.w	r3, r0, r8
 80029ee:	fa09 f303 	lsl.w	r3, r9, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	9304      	str	r3, [sp, #16]
 80029f6:	46a2      	mov	sl, r4
 80029f8:	e7d2      	b.n	80029a0 <_svfiprintf_r+0x9c>
 80029fa:	9b03      	ldr	r3, [sp, #12]
 80029fc:	1d19      	adds	r1, r3, #4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	9103      	str	r1, [sp, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bfbb      	ittet	lt
 8002a06:	425b      	neglt	r3, r3
 8002a08:	f042 0202 	orrlt.w	r2, r2, #2
 8002a0c:	9307      	strge	r3, [sp, #28]
 8002a0e:	9307      	strlt	r3, [sp, #28]
 8002a10:	bfb8      	it	lt
 8002a12:	9204      	strlt	r2, [sp, #16]
 8002a14:	7823      	ldrb	r3, [r4, #0]
 8002a16:	2b2e      	cmp	r3, #46	; 0x2e
 8002a18:	d10c      	bne.n	8002a34 <_svfiprintf_r+0x130>
 8002a1a:	7863      	ldrb	r3, [r4, #1]
 8002a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a1e:	d135      	bne.n	8002a8c <_svfiprintf_r+0x188>
 8002a20:	9b03      	ldr	r3, [sp, #12]
 8002a22:	1d1a      	adds	r2, r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	9203      	str	r2, [sp, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bfb8      	it	lt
 8002a2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a30:	3402      	adds	r4, #2
 8002a32:	9305      	str	r3, [sp, #20]
 8002a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b00 <_svfiprintf_r+0x1fc>
 8002a38:	7821      	ldrb	r1, [r4, #0]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	4650      	mov	r0, sl
 8002a3e:	f7fd fbef 	bl	8000220 <memchr>
 8002a42:	b140      	cbz	r0, 8002a56 <_svfiprintf_r+0x152>
 8002a44:	2340      	movs	r3, #64	; 0x40
 8002a46:	eba0 000a 	sub.w	r0, r0, sl
 8002a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8002a4e:	9b04      	ldr	r3, [sp, #16]
 8002a50:	4303      	orrs	r3, r0
 8002a52:	3401      	adds	r4, #1
 8002a54:	9304      	str	r3, [sp, #16]
 8002a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a5a:	4826      	ldr	r0, [pc, #152]	; (8002af4 <_svfiprintf_r+0x1f0>)
 8002a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a60:	2206      	movs	r2, #6
 8002a62:	f7fd fbdd 	bl	8000220 <memchr>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d038      	beq.n	8002adc <_svfiprintf_r+0x1d8>
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <_svfiprintf_r+0x1f4>)
 8002a6c:	bb1b      	cbnz	r3, 8002ab6 <_svfiprintf_r+0x1b2>
 8002a6e:	9b03      	ldr	r3, [sp, #12]
 8002a70:	3307      	adds	r3, #7
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	3308      	adds	r3, #8
 8002a78:	9303      	str	r3, [sp, #12]
 8002a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a7c:	4433      	add	r3, r6
 8002a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a80:	e767      	b.n	8002952 <_svfiprintf_r+0x4e>
 8002a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a86:	460c      	mov	r4, r1
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e7a5      	b.n	80029d8 <_svfiprintf_r+0xd4>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	3401      	adds	r4, #1
 8002a90:	9305      	str	r3, [sp, #20]
 8002a92:	4619      	mov	r1, r3
 8002a94:	f04f 0c0a 	mov.w	ip, #10
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a9e:	3a30      	subs	r2, #48	; 0x30
 8002aa0:	2a09      	cmp	r2, #9
 8002aa2:	d903      	bls.n	8002aac <_svfiprintf_r+0x1a8>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0c5      	beq.n	8002a34 <_svfiprintf_r+0x130>
 8002aa8:	9105      	str	r1, [sp, #20]
 8002aaa:	e7c3      	b.n	8002a34 <_svfiprintf_r+0x130>
 8002aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e7f0      	b.n	8002a98 <_svfiprintf_r+0x194>
 8002ab6:	ab03      	add	r3, sp, #12
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	462a      	mov	r2, r5
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <_svfiprintf_r+0x1f8>)
 8002abe:	a904      	add	r1, sp, #16
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	f3af 8000 	nop.w
 8002ac6:	1c42      	adds	r2, r0, #1
 8002ac8:	4606      	mov	r6, r0
 8002aca:	d1d6      	bne.n	8002a7a <_svfiprintf_r+0x176>
 8002acc:	89ab      	ldrh	r3, [r5, #12]
 8002ace:	065b      	lsls	r3, r3, #25
 8002ad0:	f53f af2c 	bmi.w	800292c <_svfiprintf_r+0x28>
 8002ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ad6:	b01d      	add	sp, #116	; 0x74
 8002ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002adc:	ab03      	add	r3, sp, #12
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	462a      	mov	r2, r5
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <_svfiprintf_r+0x1f8>)
 8002ae4:	a904      	add	r1, sp, #16
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	f000 f87a 	bl	8002be0 <_printf_i>
 8002aec:	e7eb      	b.n	8002ac6 <_svfiprintf_r+0x1c2>
 8002aee:	bf00      	nop
 8002af0:	08003130 	.word	0x08003130
 8002af4:	0800313a 	.word	0x0800313a
 8002af8:	00000000 	.word	0x00000000
 8002afc:	0800284d 	.word	0x0800284d
 8002b00:	08003136 	.word	0x08003136

08002b04 <_printf_common>:
 8002b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b08:	4616      	mov	r6, r2
 8002b0a:	4699      	mov	r9, r3
 8002b0c:	688a      	ldr	r2, [r1, #8]
 8002b0e:	690b      	ldr	r3, [r1, #16]
 8002b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b14:	4293      	cmp	r3, r2
 8002b16:	bfb8      	it	lt
 8002b18:	4613      	movlt	r3, r2
 8002b1a:	6033      	str	r3, [r6, #0]
 8002b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b20:	4607      	mov	r7, r0
 8002b22:	460c      	mov	r4, r1
 8002b24:	b10a      	cbz	r2, 8002b2a <_printf_common+0x26>
 8002b26:	3301      	adds	r3, #1
 8002b28:	6033      	str	r3, [r6, #0]
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	0699      	lsls	r1, r3, #26
 8002b2e:	bf42      	ittt	mi
 8002b30:	6833      	ldrmi	r3, [r6, #0]
 8002b32:	3302      	addmi	r3, #2
 8002b34:	6033      	strmi	r3, [r6, #0]
 8002b36:	6825      	ldr	r5, [r4, #0]
 8002b38:	f015 0506 	ands.w	r5, r5, #6
 8002b3c:	d106      	bne.n	8002b4c <_printf_common+0x48>
 8002b3e:	f104 0a19 	add.w	sl, r4, #25
 8002b42:	68e3      	ldr	r3, [r4, #12]
 8002b44:	6832      	ldr	r2, [r6, #0]
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	42ab      	cmp	r3, r5
 8002b4a:	dc26      	bgt.n	8002b9a <_printf_common+0x96>
 8002b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b50:	1e13      	subs	r3, r2, #0
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	bf18      	it	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	0692      	lsls	r2, r2, #26
 8002b5a:	d42b      	bmi.n	8002bb4 <_printf_common+0xb0>
 8002b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b60:	4649      	mov	r1, r9
 8002b62:	4638      	mov	r0, r7
 8002b64:	47c0      	blx	r8
 8002b66:	3001      	adds	r0, #1
 8002b68:	d01e      	beq.n	8002ba8 <_printf_common+0xa4>
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	68e5      	ldr	r5, [r4, #12]
 8002b6e:	6832      	ldr	r2, [r6, #0]
 8002b70:	f003 0306 	and.w	r3, r3, #6
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	bf08      	it	eq
 8002b78:	1aad      	subeq	r5, r5, r2
 8002b7a:	68a3      	ldr	r3, [r4, #8]
 8002b7c:	6922      	ldr	r2, [r4, #16]
 8002b7e:	bf0c      	ite	eq
 8002b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b84:	2500      	movne	r5, #0
 8002b86:	4293      	cmp	r3, r2
 8002b88:	bfc4      	itt	gt
 8002b8a:	1a9b      	subgt	r3, r3, r2
 8002b8c:	18ed      	addgt	r5, r5, r3
 8002b8e:	2600      	movs	r6, #0
 8002b90:	341a      	adds	r4, #26
 8002b92:	42b5      	cmp	r5, r6
 8002b94:	d11a      	bne.n	8002bcc <_printf_common+0xc8>
 8002b96:	2000      	movs	r0, #0
 8002b98:	e008      	b.n	8002bac <_printf_common+0xa8>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	4652      	mov	r2, sl
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	47c0      	blx	r8
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	d103      	bne.n	8002bb0 <_printf_common+0xac>
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb0:	3501      	adds	r5, #1
 8002bb2:	e7c6      	b.n	8002b42 <_printf_common+0x3e>
 8002bb4:	18e1      	adds	r1, r4, r3
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	2030      	movs	r0, #48	; 0x30
 8002bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bbe:	4422      	add	r2, r4
 8002bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bc8:	3302      	adds	r3, #2
 8002bca:	e7c7      	b.n	8002b5c <_printf_common+0x58>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4622      	mov	r2, r4
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	47c0      	blx	r8
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	d0e6      	beq.n	8002ba8 <_printf_common+0xa4>
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7d9      	b.n	8002b92 <_printf_common+0x8e>
	...

08002be0 <_printf_i>:
 8002be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002be4:	7e0f      	ldrb	r7, [r1, #24]
 8002be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002be8:	2f78      	cmp	r7, #120	; 0x78
 8002bea:	4691      	mov	r9, r2
 8002bec:	4680      	mov	r8, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	469a      	mov	sl, r3
 8002bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bf6:	d807      	bhi.n	8002c08 <_printf_i+0x28>
 8002bf8:	2f62      	cmp	r7, #98	; 0x62
 8002bfa:	d80a      	bhi.n	8002c12 <_printf_i+0x32>
 8002bfc:	2f00      	cmp	r7, #0
 8002bfe:	f000 80d8 	beq.w	8002db2 <_printf_i+0x1d2>
 8002c02:	2f58      	cmp	r7, #88	; 0x58
 8002c04:	f000 80a3 	beq.w	8002d4e <_printf_i+0x16e>
 8002c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c10:	e03a      	b.n	8002c88 <_printf_i+0xa8>
 8002c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c16:	2b15      	cmp	r3, #21
 8002c18:	d8f6      	bhi.n	8002c08 <_printf_i+0x28>
 8002c1a:	a101      	add	r1, pc, #4	; (adr r1, 8002c20 <_printf_i+0x40>)
 8002c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c20:	08002c79 	.word	0x08002c79
 8002c24:	08002c8d 	.word	0x08002c8d
 8002c28:	08002c09 	.word	0x08002c09
 8002c2c:	08002c09 	.word	0x08002c09
 8002c30:	08002c09 	.word	0x08002c09
 8002c34:	08002c09 	.word	0x08002c09
 8002c38:	08002c8d 	.word	0x08002c8d
 8002c3c:	08002c09 	.word	0x08002c09
 8002c40:	08002c09 	.word	0x08002c09
 8002c44:	08002c09 	.word	0x08002c09
 8002c48:	08002c09 	.word	0x08002c09
 8002c4c:	08002d99 	.word	0x08002d99
 8002c50:	08002cbd 	.word	0x08002cbd
 8002c54:	08002d7b 	.word	0x08002d7b
 8002c58:	08002c09 	.word	0x08002c09
 8002c5c:	08002c09 	.word	0x08002c09
 8002c60:	08002dbb 	.word	0x08002dbb
 8002c64:	08002c09 	.word	0x08002c09
 8002c68:	08002cbd 	.word	0x08002cbd
 8002c6c:	08002c09 	.word	0x08002c09
 8002c70:	08002c09 	.word	0x08002c09
 8002c74:	08002d83 	.word	0x08002d83
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	602a      	str	r2, [r5, #0]
 8002c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0a3      	b.n	8002dd4 <_printf_i+0x1f4>
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	6829      	ldr	r1, [r5, #0]
 8002c90:	0606      	lsls	r6, r0, #24
 8002c92:	f101 0304 	add.w	r3, r1, #4
 8002c96:	d50a      	bpl.n	8002cae <_printf_i+0xce>
 8002c98:	680e      	ldr	r6, [r1, #0]
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	2e00      	cmp	r6, #0
 8002c9e:	da03      	bge.n	8002ca8 <_printf_i+0xc8>
 8002ca0:	232d      	movs	r3, #45	; 0x2d
 8002ca2:	4276      	negs	r6, r6
 8002ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ca8:	485e      	ldr	r0, [pc, #376]	; (8002e24 <_printf_i+0x244>)
 8002caa:	230a      	movs	r3, #10
 8002cac:	e019      	b.n	8002ce2 <_printf_i+0x102>
 8002cae:	680e      	ldr	r6, [r1, #0]
 8002cb0:	602b      	str	r3, [r5, #0]
 8002cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cb6:	bf18      	it	ne
 8002cb8:	b236      	sxthne	r6, r6
 8002cba:	e7ef      	b.n	8002c9c <_printf_i+0xbc>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	6820      	ldr	r0, [r4, #0]
 8002cc0:	1d19      	adds	r1, r3, #4
 8002cc2:	6029      	str	r1, [r5, #0]
 8002cc4:	0601      	lsls	r1, r0, #24
 8002cc6:	d501      	bpl.n	8002ccc <_printf_i+0xec>
 8002cc8:	681e      	ldr	r6, [r3, #0]
 8002cca:	e002      	b.n	8002cd2 <_printf_i+0xf2>
 8002ccc:	0646      	lsls	r6, r0, #25
 8002cce:	d5fb      	bpl.n	8002cc8 <_printf_i+0xe8>
 8002cd0:	881e      	ldrh	r6, [r3, #0]
 8002cd2:	4854      	ldr	r0, [pc, #336]	; (8002e24 <_printf_i+0x244>)
 8002cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2308      	moveq	r3, #8
 8002cda:	230a      	movne	r3, #10
 8002cdc:	2100      	movs	r1, #0
 8002cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ce2:	6865      	ldr	r5, [r4, #4]
 8002ce4:	60a5      	str	r5, [r4, #8]
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	bfa2      	ittt	ge
 8002cea:	6821      	ldrge	r1, [r4, #0]
 8002cec:	f021 0104 	bicge.w	r1, r1, #4
 8002cf0:	6021      	strge	r1, [r4, #0]
 8002cf2:	b90e      	cbnz	r6, 8002cf8 <_printf_i+0x118>
 8002cf4:	2d00      	cmp	r5, #0
 8002cf6:	d04d      	beq.n	8002d94 <_printf_i+0x1b4>
 8002cf8:	4615      	mov	r5, r2
 8002cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8002d02:	5dc7      	ldrb	r7, [r0, r7]
 8002d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d08:	4637      	mov	r7, r6
 8002d0a:	42bb      	cmp	r3, r7
 8002d0c:	460e      	mov	r6, r1
 8002d0e:	d9f4      	bls.n	8002cfa <_printf_i+0x11a>
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d10b      	bne.n	8002d2c <_printf_i+0x14c>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	07de      	lsls	r6, r3, #31
 8002d18:	d508      	bpl.n	8002d2c <_printf_i+0x14c>
 8002d1a:	6923      	ldr	r3, [r4, #16]
 8002d1c:	6861      	ldr	r1, [r4, #4]
 8002d1e:	4299      	cmp	r1, r3
 8002d20:	bfde      	ittt	le
 8002d22:	2330      	movle	r3, #48	; 0x30
 8002d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d2c:	1b52      	subs	r2, r2, r5
 8002d2e:	6122      	str	r2, [r4, #16]
 8002d30:	f8cd a000 	str.w	sl, [sp]
 8002d34:	464b      	mov	r3, r9
 8002d36:	aa03      	add	r2, sp, #12
 8002d38:	4621      	mov	r1, r4
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	f7ff fee2 	bl	8002b04 <_printf_common>
 8002d40:	3001      	adds	r0, #1
 8002d42:	d14c      	bne.n	8002dde <_printf_i+0x1fe>
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d48:	b004      	add	sp, #16
 8002d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4e:	4835      	ldr	r0, [pc, #212]	; (8002e24 <_printf_i+0x244>)
 8002d50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d54:	6829      	ldr	r1, [r5, #0]
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d5c:	6029      	str	r1, [r5, #0]
 8002d5e:	061d      	lsls	r5, r3, #24
 8002d60:	d514      	bpl.n	8002d8c <_printf_i+0x1ac>
 8002d62:	07df      	lsls	r7, r3, #31
 8002d64:	bf44      	itt	mi
 8002d66:	f043 0320 	orrmi.w	r3, r3, #32
 8002d6a:	6023      	strmi	r3, [r4, #0]
 8002d6c:	b91e      	cbnz	r6, 8002d76 <_printf_i+0x196>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	f023 0320 	bic.w	r3, r3, #32
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	2310      	movs	r3, #16
 8002d78:	e7b0      	b.n	8002cdc <_printf_i+0xfc>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	f043 0320 	orr.w	r3, r3, #32
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	2378      	movs	r3, #120	; 0x78
 8002d84:	4828      	ldr	r0, [pc, #160]	; (8002e28 <_printf_i+0x248>)
 8002d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d8a:	e7e3      	b.n	8002d54 <_printf_i+0x174>
 8002d8c:	0659      	lsls	r1, r3, #25
 8002d8e:	bf48      	it	mi
 8002d90:	b2b6      	uxthmi	r6, r6
 8002d92:	e7e6      	b.n	8002d62 <_printf_i+0x182>
 8002d94:	4615      	mov	r5, r2
 8002d96:	e7bb      	b.n	8002d10 <_printf_i+0x130>
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	6826      	ldr	r6, [r4, #0]
 8002d9c:	6961      	ldr	r1, [r4, #20]
 8002d9e:	1d18      	adds	r0, r3, #4
 8002da0:	6028      	str	r0, [r5, #0]
 8002da2:	0635      	lsls	r5, r6, #24
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	d501      	bpl.n	8002dac <_printf_i+0x1cc>
 8002da8:	6019      	str	r1, [r3, #0]
 8002daa:	e002      	b.n	8002db2 <_printf_i+0x1d2>
 8002dac:	0670      	lsls	r0, r6, #25
 8002dae:	d5fb      	bpl.n	8002da8 <_printf_i+0x1c8>
 8002db0:	8019      	strh	r1, [r3, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	6123      	str	r3, [r4, #16]
 8002db6:	4615      	mov	r5, r2
 8002db8:	e7ba      	b.n	8002d30 <_printf_i+0x150>
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	1d1a      	adds	r2, r3, #4
 8002dbe:	602a      	str	r2, [r5, #0]
 8002dc0:	681d      	ldr	r5, [r3, #0]
 8002dc2:	6862      	ldr	r2, [r4, #4]
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f7fd fa2a 	bl	8000220 <memchr>
 8002dcc:	b108      	cbz	r0, 8002dd2 <_printf_i+0x1f2>
 8002dce:	1b40      	subs	r0, r0, r5
 8002dd0:	6060      	str	r0, [r4, #4]
 8002dd2:	6863      	ldr	r3, [r4, #4]
 8002dd4:	6123      	str	r3, [r4, #16]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ddc:	e7a8      	b.n	8002d30 <_printf_i+0x150>
 8002dde:	6923      	ldr	r3, [r4, #16]
 8002de0:	462a      	mov	r2, r5
 8002de2:	4649      	mov	r1, r9
 8002de4:	4640      	mov	r0, r8
 8002de6:	47d0      	blx	sl
 8002de8:	3001      	adds	r0, #1
 8002dea:	d0ab      	beq.n	8002d44 <_printf_i+0x164>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	079b      	lsls	r3, r3, #30
 8002df0:	d413      	bmi.n	8002e1a <_printf_i+0x23a>
 8002df2:	68e0      	ldr	r0, [r4, #12]
 8002df4:	9b03      	ldr	r3, [sp, #12]
 8002df6:	4298      	cmp	r0, r3
 8002df8:	bfb8      	it	lt
 8002dfa:	4618      	movlt	r0, r3
 8002dfc:	e7a4      	b.n	8002d48 <_printf_i+0x168>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	4632      	mov	r2, r6
 8002e02:	4649      	mov	r1, r9
 8002e04:	4640      	mov	r0, r8
 8002e06:	47d0      	blx	sl
 8002e08:	3001      	adds	r0, #1
 8002e0a:	d09b      	beq.n	8002d44 <_printf_i+0x164>
 8002e0c:	3501      	adds	r5, #1
 8002e0e:	68e3      	ldr	r3, [r4, #12]
 8002e10:	9903      	ldr	r1, [sp, #12]
 8002e12:	1a5b      	subs	r3, r3, r1
 8002e14:	42ab      	cmp	r3, r5
 8002e16:	dcf2      	bgt.n	8002dfe <_printf_i+0x21e>
 8002e18:	e7eb      	b.n	8002df2 <_printf_i+0x212>
 8002e1a:	2500      	movs	r5, #0
 8002e1c:	f104 0619 	add.w	r6, r4, #25
 8002e20:	e7f5      	b.n	8002e0e <_printf_i+0x22e>
 8002e22:	bf00      	nop
 8002e24:	08003141 	.word	0x08003141
 8002e28:	08003152 	.word	0x08003152

08002e2c <memcpy>:
 8002e2c:	440a      	add	r2, r1
 8002e2e:	4291      	cmp	r1, r2
 8002e30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002e34:	d100      	bne.n	8002e38 <memcpy+0xc>
 8002e36:	4770      	bx	lr
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e42:	4291      	cmp	r1, r2
 8002e44:	d1f9      	bne.n	8002e3a <memcpy+0xe>
 8002e46:	bd10      	pop	{r4, pc}

08002e48 <memmove>:
 8002e48:	4288      	cmp	r0, r1
 8002e4a:	b510      	push	{r4, lr}
 8002e4c:	eb01 0402 	add.w	r4, r1, r2
 8002e50:	d902      	bls.n	8002e58 <memmove+0x10>
 8002e52:	4284      	cmp	r4, r0
 8002e54:	4623      	mov	r3, r4
 8002e56:	d807      	bhi.n	8002e68 <memmove+0x20>
 8002e58:	1e43      	subs	r3, r0, #1
 8002e5a:	42a1      	cmp	r1, r4
 8002e5c:	d008      	beq.n	8002e70 <memmove+0x28>
 8002e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e66:	e7f8      	b.n	8002e5a <memmove+0x12>
 8002e68:	4402      	add	r2, r0
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	428a      	cmp	r2, r1
 8002e6e:	d100      	bne.n	8002e72 <memmove+0x2a>
 8002e70:	bd10      	pop	{r4, pc}
 8002e72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e7a:	e7f7      	b.n	8002e6c <memmove+0x24>

08002e7c <_free_r>:
 8002e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e7e:	2900      	cmp	r1, #0
 8002e80:	d044      	beq.n	8002f0c <_free_r+0x90>
 8002e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e86:	9001      	str	r0, [sp, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8002e8e:	bfb8      	it	lt
 8002e90:	18e4      	addlt	r4, r4, r3
 8002e92:	f000 f913 	bl	80030bc <__malloc_lock>
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <_free_r+0x94>)
 8002e98:	9801      	ldr	r0, [sp, #4]
 8002e9a:	6813      	ldr	r3, [r2, #0]
 8002e9c:	b933      	cbnz	r3, 8002eac <_free_r+0x30>
 8002e9e:	6063      	str	r3, [r4, #4]
 8002ea0:	6014      	str	r4, [r2, #0]
 8002ea2:	b003      	add	sp, #12
 8002ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ea8:	f000 b90e 	b.w	80030c8 <__malloc_unlock>
 8002eac:	42a3      	cmp	r3, r4
 8002eae:	d908      	bls.n	8002ec2 <_free_r+0x46>
 8002eb0:	6825      	ldr	r5, [r4, #0]
 8002eb2:	1961      	adds	r1, r4, r5
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	bf01      	itttt	eq
 8002eb8:	6819      	ldreq	r1, [r3, #0]
 8002eba:	685b      	ldreq	r3, [r3, #4]
 8002ebc:	1949      	addeq	r1, r1, r5
 8002ebe:	6021      	streq	r1, [r4, #0]
 8002ec0:	e7ed      	b.n	8002e9e <_free_r+0x22>
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	b10b      	cbz	r3, 8002ecc <_free_r+0x50>
 8002ec8:	42a3      	cmp	r3, r4
 8002eca:	d9fa      	bls.n	8002ec2 <_free_r+0x46>
 8002ecc:	6811      	ldr	r1, [r2, #0]
 8002ece:	1855      	adds	r5, r2, r1
 8002ed0:	42a5      	cmp	r5, r4
 8002ed2:	d10b      	bne.n	8002eec <_free_r+0x70>
 8002ed4:	6824      	ldr	r4, [r4, #0]
 8002ed6:	4421      	add	r1, r4
 8002ed8:	1854      	adds	r4, r2, r1
 8002eda:	42a3      	cmp	r3, r4
 8002edc:	6011      	str	r1, [r2, #0]
 8002ede:	d1e0      	bne.n	8002ea2 <_free_r+0x26>
 8002ee0:	681c      	ldr	r4, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	6053      	str	r3, [r2, #4]
 8002ee6:	4421      	add	r1, r4
 8002ee8:	6011      	str	r1, [r2, #0]
 8002eea:	e7da      	b.n	8002ea2 <_free_r+0x26>
 8002eec:	d902      	bls.n	8002ef4 <_free_r+0x78>
 8002eee:	230c      	movs	r3, #12
 8002ef0:	6003      	str	r3, [r0, #0]
 8002ef2:	e7d6      	b.n	8002ea2 <_free_r+0x26>
 8002ef4:	6825      	ldr	r5, [r4, #0]
 8002ef6:	1961      	adds	r1, r4, r5
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	bf04      	itt	eq
 8002efc:	6819      	ldreq	r1, [r3, #0]
 8002efe:	685b      	ldreq	r3, [r3, #4]
 8002f00:	6063      	str	r3, [r4, #4]
 8002f02:	bf04      	itt	eq
 8002f04:	1949      	addeq	r1, r1, r5
 8002f06:	6021      	streq	r1, [r4, #0]
 8002f08:	6054      	str	r4, [r2, #4]
 8002f0a:	e7ca      	b.n	8002ea2 <_free_r+0x26>
 8002f0c:	b003      	add	sp, #12
 8002f0e:	bd30      	pop	{r4, r5, pc}
 8002f10:	20000138 	.word	0x20000138

08002f14 <sbrk_aligned>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	4e0e      	ldr	r6, [pc, #56]	; (8002f50 <sbrk_aligned+0x3c>)
 8002f18:	460c      	mov	r4, r1
 8002f1a:	6831      	ldr	r1, [r6, #0]
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	b911      	cbnz	r1, 8002f26 <sbrk_aligned+0x12>
 8002f20:	f000 f8bc 	bl	800309c <_sbrk_r>
 8002f24:	6030      	str	r0, [r6, #0]
 8002f26:	4621      	mov	r1, r4
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f000 f8b7 	bl	800309c <_sbrk_r>
 8002f2e:	1c43      	adds	r3, r0, #1
 8002f30:	d00a      	beq.n	8002f48 <sbrk_aligned+0x34>
 8002f32:	1cc4      	adds	r4, r0, #3
 8002f34:	f024 0403 	bic.w	r4, r4, #3
 8002f38:	42a0      	cmp	r0, r4
 8002f3a:	d007      	beq.n	8002f4c <sbrk_aligned+0x38>
 8002f3c:	1a21      	subs	r1, r4, r0
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f000 f8ac 	bl	800309c <_sbrk_r>
 8002f44:	3001      	adds	r0, #1
 8002f46:	d101      	bne.n	8002f4c <sbrk_aligned+0x38>
 8002f48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	2000013c 	.word	0x2000013c

08002f54 <_malloc_r>:
 8002f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f58:	1ccd      	adds	r5, r1, #3
 8002f5a:	f025 0503 	bic.w	r5, r5, #3
 8002f5e:	3508      	adds	r5, #8
 8002f60:	2d0c      	cmp	r5, #12
 8002f62:	bf38      	it	cc
 8002f64:	250c      	movcc	r5, #12
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	4607      	mov	r7, r0
 8002f6a:	db01      	blt.n	8002f70 <_malloc_r+0x1c>
 8002f6c:	42a9      	cmp	r1, r5
 8002f6e:	d905      	bls.n	8002f7c <_malloc_r+0x28>
 8002f70:	230c      	movs	r3, #12
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	2600      	movs	r6, #0
 8002f76:	4630      	mov	r0, r6
 8002f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f7c:	4e2e      	ldr	r6, [pc, #184]	; (8003038 <_malloc_r+0xe4>)
 8002f7e:	f000 f89d 	bl	80030bc <__malloc_lock>
 8002f82:	6833      	ldr	r3, [r6, #0]
 8002f84:	461c      	mov	r4, r3
 8002f86:	bb34      	cbnz	r4, 8002fd6 <_malloc_r+0x82>
 8002f88:	4629      	mov	r1, r5
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	f7ff ffc2 	bl	8002f14 <sbrk_aligned>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	4604      	mov	r4, r0
 8002f94:	d14d      	bne.n	8003032 <_malloc_r+0xde>
 8002f96:	6834      	ldr	r4, [r6, #0]
 8002f98:	4626      	mov	r6, r4
 8002f9a:	2e00      	cmp	r6, #0
 8002f9c:	d140      	bne.n	8003020 <_malloc_r+0xcc>
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	4631      	mov	r1, r6
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	eb04 0803 	add.w	r8, r4, r3
 8002fa8:	f000 f878 	bl	800309c <_sbrk_r>
 8002fac:	4580      	cmp	r8, r0
 8002fae:	d13a      	bne.n	8003026 <_malloc_r+0xd2>
 8002fb0:	6821      	ldr	r1, [r4, #0]
 8002fb2:	3503      	adds	r5, #3
 8002fb4:	1a6d      	subs	r5, r5, r1
 8002fb6:	f025 0503 	bic.w	r5, r5, #3
 8002fba:	3508      	adds	r5, #8
 8002fbc:	2d0c      	cmp	r5, #12
 8002fbe:	bf38      	it	cc
 8002fc0:	250c      	movcc	r5, #12
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	f7ff ffa5 	bl	8002f14 <sbrk_aligned>
 8002fca:	3001      	adds	r0, #1
 8002fcc:	d02b      	beq.n	8003026 <_malloc_r+0xd2>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	442b      	add	r3, r5
 8002fd2:	6023      	str	r3, [r4, #0]
 8002fd4:	e00e      	b.n	8002ff4 <_malloc_r+0xa0>
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	1b52      	subs	r2, r2, r5
 8002fda:	d41e      	bmi.n	800301a <_malloc_r+0xc6>
 8002fdc:	2a0b      	cmp	r2, #11
 8002fde:	d916      	bls.n	800300e <_malloc_r+0xba>
 8002fe0:	1961      	adds	r1, r4, r5
 8002fe2:	42a3      	cmp	r3, r4
 8002fe4:	6025      	str	r5, [r4, #0]
 8002fe6:	bf18      	it	ne
 8002fe8:	6059      	strne	r1, [r3, #4]
 8002fea:	6863      	ldr	r3, [r4, #4]
 8002fec:	bf08      	it	eq
 8002fee:	6031      	streq	r1, [r6, #0]
 8002ff0:	5162      	str	r2, [r4, r5]
 8002ff2:	604b      	str	r3, [r1, #4]
 8002ff4:	4638      	mov	r0, r7
 8002ff6:	f104 060b 	add.w	r6, r4, #11
 8002ffa:	f000 f865 	bl	80030c8 <__malloc_unlock>
 8002ffe:	f026 0607 	bic.w	r6, r6, #7
 8003002:	1d23      	adds	r3, r4, #4
 8003004:	1af2      	subs	r2, r6, r3
 8003006:	d0b6      	beq.n	8002f76 <_malloc_r+0x22>
 8003008:	1b9b      	subs	r3, r3, r6
 800300a:	50a3      	str	r3, [r4, r2]
 800300c:	e7b3      	b.n	8002f76 <_malloc_r+0x22>
 800300e:	6862      	ldr	r2, [r4, #4]
 8003010:	42a3      	cmp	r3, r4
 8003012:	bf0c      	ite	eq
 8003014:	6032      	streq	r2, [r6, #0]
 8003016:	605a      	strne	r2, [r3, #4]
 8003018:	e7ec      	b.n	8002ff4 <_malloc_r+0xa0>
 800301a:	4623      	mov	r3, r4
 800301c:	6864      	ldr	r4, [r4, #4]
 800301e:	e7b2      	b.n	8002f86 <_malloc_r+0x32>
 8003020:	4634      	mov	r4, r6
 8003022:	6876      	ldr	r6, [r6, #4]
 8003024:	e7b9      	b.n	8002f9a <_malloc_r+0x46>
 8003026:	230c      	movs	r3, #12
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4638      	mov	r0, r7
 800302c:	f000 f84c 	bl	80030c8 <__malloc_unlock>
 8003030:	e7a1      	b.n	8002f76 <_malloc_r+0x22>
 8003032:	6025      	str	r5, [r4, #0]
 8003034:	e7de      	b.n	8002ff4 <_malloc_r+0xa0>
 8003036:	bf00      	nop
 8003038:	20000138 	.word	0x20000138

0800303c <_realloc_r>:
 800303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003040:	4680      	mov	r8, r0
 8003042:	4614      	mov	r4, r2
 8003044:	460e      	mov	r6, r1
 8003046:	b921      	cbnz	r1, 8003052 <_realloc_r+0x16>
 8003048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800304c:	4611      	mov	r1, r2
 800304e:	f7ff bf81 	b.w	8002f54 <_malloc_r>
 8003052:	b92a      	cbnz	r2, 8003060 <_realloc_r+0x24>
 8003054:	f7ff ff12 	bl	8002e7c <_free_r>
 8003058:	4625      	mov	r5, r4
 800305a:	4628      	mov	r0, r5
 800305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003060:	f000 f838 	bl	80030d4 <_malloc_usable_size_r>
 8003064:	4284      	cmp	r4, r0
 8003066:	4607      	mov	r7, r0
 8003068:	d802      	bhi.n	8003070 <_realloc_r+0x34>
 800306a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800306e:	d812      	bhi.n	8003096 <_realloc_r+0x5a>
 8003070:	4621      	mov	r1, r4
 8003072:	4640      	mov	r0, r8
 8003074:	f7ff ff6e 	bl	8002f54 <_malloc_r>
 8003078:	4605      	mov	r5, r0
 800307a:	2800      	cmp	r0, #0
 800307c:	d0ed      	beq.n	800305a <_realloc_r+0x1e>
 800307e:	42bc      	cmp	r4, r7
 8003080:	4622      	mov	r2, r4
 8003082:	4631      	mov	r1, r6
 8003084:	bf28      	it	cs
 8003086:	463a      	movcs	r2, r7
 8003088:	f7ff fed0 	bl	8002e2c <memcpy>
 800308c:	4631      	mov	r1, r6
 800308e:	4640      	mov	r0, r8
 8003090:	f7ff fef4 	bl	8002e7c <_free_r>
 8003094:	e7e1      	b.n	800305a <_realloc_r+0x1e>
 8003096:	4635      	mov	r5, r6
 8003098:	e7df      	b.n	800305a <_realloc_r+0x1e>
	...

0800309c <_sbrk_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4d06      	ldr	r5, [pc, #24]	; (80030b8 <_sbrk_r+0x1c>)
 80030a0:	2300      	movs	r3, #0
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	f7fd fc2c 	bl	8000904 <_sbrk>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d102      	bne.n	80030b6 <_sbrk_r+0x1a>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b103      	cbz	r3, 80030b6 <_sbrk_r+0x1a>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000140 	.word	0x20000140

080030bc <__malloc_lock>:
 80030bc:	4801      	ldr	r0, [pc, #4]	; (80030c4 <__malloc_lock+0x8>)
 80030be:	f000 b811 	b.w	80030e4 <__retarget_lock_acquire_recursive>
 80030c2:	bf00      	nop
 80030c4:	20000144 	.word	0x20000144

080030c8 <__malloc_unlock>:
 80030c8:	4801      	ldr	r0, [pc, #4]	; (80030d0 <__malloc_unlock+0x8>)
 80030ca:	f000 b80c 	b.w	80030e6 <__retarget_lock_release_recursive>
 80030ce:	bf00      	nop
 80030d0:	20000144 	.word	0x20000144

080030d4 <_malloc_usable_size_r>:
 80030d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d8:	1f18      	subs	r0, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bfbc      	itt	lt
 80030de:	580b      	ldrlt	r3, [r1, r0]
 80030e0:	18c0      	addlt	r0, r0, r3
 80030e2:	4770      	bx	lr

080030e4 <__retarget_lock_acquire_recursive>:
 80030e4:	4770      	bx	lr

080030e6 <__retarget_lock_release_recursive>:
 80030e6:	4770      	bx	lr

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
